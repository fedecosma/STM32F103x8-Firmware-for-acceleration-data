
Sensor_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009760  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098ac  080098ac  0000b018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080098ac  080098ac  0000b018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080098ac  080098ac  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ac  080098ac  0000a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080098b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000018  080098cc  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080098cc  0000b360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016671  00000000  00000000  0000b041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409f  00000000  00000000  000216b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00025758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc5  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaed  00000000  00000000  00027b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b97b  00000000  00000000  00042672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090361  00000000  00000000  0005dfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051fc  00000000  00000000  000ee394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f3590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08009854 	.word	0x08009854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08009854 	.word	0x08009854

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_TIM_PeriodElapsedCallback>:
static uint16_t counter_measure = 0;
static uint16_t counter_read = 0;
uint8_t time_between_requests = 3;
uint8_t time_between_readings = 4;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000664:	d160      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
	{
		if(!setup_in_progress)		//interrupt called and not in parameters setting (i.e command 36)
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d15c      	bne.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{

			if(discard_samples)
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b29b      	uxth	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d007      	beq.n	8000688 <HAL_TIM_PeriodElapsedCallback+0x34>
			{
				discard_samples--;
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	3b01      	subs	r3, #1
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000684:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

}
 8000686:	e04f      	b.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
				if(LIS3DHTR_DataReady(&hi2c1))	//data available
 8000688:	482b      	ldr	r0, [pc, #172]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800068a:	f000 fd07 	bl	800109c <LIS3DHTR_DataReady>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00e      	beq.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x5e>
					if(LIS3DHTR_Read(&hi2c1, &A_i) == HAL_OK)		//reading of LIS3DHTR sensor
 8000694:	4929      	ldr	r1, [pc, #164]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000696:	4828      	ldr	r0, [pc, #160]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000698:	f000 fd22 	bl	80010e0 <LIS3DHTR_Read>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d107      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x5e>
						updateMaxValues(&A_i);					//updating A_mt and A_ms
 80006a2:	4826      	ldr	r0, [pc, #152]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80006a4:	f000 ffe0 	bl	8001668 <updateMaxValues>
						HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ac:	4824      	ldr	r0, [pc, #144]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80006ae:	f002 fee7 	bl	8003480 <HAL_GPIO_TogglePin>
				if(++counter_measure >= time_between_requests * sampling_freq)	//0.33Hz measure request
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006bc:	801a      	strh	r2, [r3, #0]
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	429a      	cmp	r2, r3
 80006d4:	db05      	blt.n	80006e2 <HAL_TIM_PeriodElapsedCallback+0x8e>
					counter_measure = 0;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	801a      	strh	r2, [r3, #0]
					SHT40_MeasureRequest(&hi2c1);
 80006dc:	4816      	ldr	r0, [pc, #88]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006de:	f001 f8fe 	bl	80018de <SHT40_MeasureRequest>
				if(++counter_read >= time_between_readings * sampling_freq) 	//0.25 Hz reading of SHT40 sensor
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	fb01 f303 	mul.w	r3, r1, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	db0a      	blt.n	800071c <HAL_TIM_PeriodElapsedCallback+0xc8>
					counter_read = 0;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000708:	2200      	movs	r2, #0
 800070a:	801a      	strh	r2, [r3, #0]
					SHT40_Read(&hi2c1, &env);
 800070c:	4912      	ldr	r1, [pc, #72]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000710:	f001 f8ff 	bl	8001912 <SHT40_Read>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000714:	2102      	movs	r1, #2
 8000716:	480a      	ldr	r0, [pc, #40]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000718:	f002 feb2 	bl	8003480 <HAL_GPIO_TogglePin>
				if(stream_enabled)		//automatically sends samples if stream is enabled
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HAL_TIM_PeriodElapsedCallback+0xd4>
					Send_AccelSample();
 8000724:	f001 fd22 	bl	800216c <Send_AccelSample>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000003e 	.word	0x2000003e
 8000734:	2000003c 	.word	0x2000003c
 8000738:	20000048 	.word	0x20000048
 800073c:	20000144 	.word	0x20000144
 8000740:	40010c00 	.word	0x40010c00
 8000744:	20000034 	.word	0x20000034
 8000748:	20000000 	.word	0x20000000
 800074c:	2000000c 	.word	0x2000000c
 8000750:	20000036 	.word	0x20000036
 8000754:	20000001 	.word	0x20000001
 8000758:	2000015c 	.word	0x2000015c
 800075c:	2000003a 	.word	0x2000003a

08000760 <HAL_UART_TxCpltCallback>:

//UART DMA transmission callback
volatile uint8_t tx_busy;
uint8_t rx_byte;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <HAL_UART_TxCpltCallback+0x24>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d102      	bne.n	8000778 <HAL_UART_TxCpltCallback+0x18>
		tx_busy = 0;
 8000772:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_UART_TxCpltCallback+0x28>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40013800 	.word	0x40013800
 8000788:	20000038 	.word	0x20000038

0800078c <HAL_UART_RxCpltCallback>:

//UART DMA reception callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <HAL_UART_RxCpltCallback+0x30>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d109      	bne.n	80007b2 <HAL_UART_RxCpltCallback+0x26>
	{
		Parser_ProcessByte(rx_byte);			   //transfers byte to parser
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <HAL_UART_RxCpltCallback+0x34>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f824 	bl	80017f0 <Parser_ProcessByte>
		HAL_UART_Receive_DMA(&huart1, &rx_byte, 1); //restarts rx for next byte
 80007a8:	2201      	movs	r2, #1
 80007aa:	4905      	ldr	r1, [pc, #20]	@ (80007c0 <HAL_UART_RxCpltCallback+0x34>)
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <HAL_UART_RxCpltCallback+0x38>)
 80007ae:	f008 f903 	bl	80089b8 <HAL_UART_Receive_DMA>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40013800 	.word	0x40013800
 80007c0:	20000039 	.word	0x20000039
 80007c4:	20000218 	.word	0x20000218

080007c8 <handleSetupAccel>:
volatile uint16_t discard_samples = 0;		//discard 2s * Hz samples
uint8_t setup_in_progress = 0;				//setup flag

//used for cmd 36
void handleSetupAccel(uint8_t data_rate, uint8_t full_scale, uint8_t axes)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	460b      	mov	r3, r1
 80007d4:	71bb      	strb	r3, [r7, #6]
 80007d6:	4613      	mov	r3, r2
 80007d8:	717b      	strb	r3, [r7, #5]
	setup_in_progress = 1;
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <handleSetupAccel+0xb0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
	discard_samples = 2 * decodeHz(data_rate);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fa70 	bl	8001cc8 <decodeHz>
 80007e8:	4603      	mov	r3, r0
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <handleSetupAccel+0xb4>)
 80007f0:	801a      	strh	r2, [r3, #0]

	HAL_TIM_Base_Stop(&htim2);
 80007f2:	4823      	ldr	r0, [pc, #140]	@ (8000880 <handleSetupAccel+0xb8>)
 80007f4:	f007 fc58 	bl	80080a8 <HAL_TIM_Base_Stop>

	//sets data rate
	datarate_set = data_rate;
 80007f8:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <handleSetupAccel+0xbc>)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	7013      	strb	r3, [r2, #0]
	fullscale_set = full_scale;
 80007fe:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <handleSetupAccel+0xc0>)
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	7013      	strb	r3, [r2, #0]
	enabled_axes_set = axes;
 8000804:	4a21      	ldr	r2, [pc, #132]	@ (800088c <handleSetupAccel+0xc4>)
 8000806:	797b      	ldrb	r3, [r7, #5]
 8000808:	7013      	strb	r3, [r2, #0]

	uint16_t hz = decodeHz(data_rate);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fa5b 	bl	8001cc8 <decodeHz>
 8000812:	4603      	mov	r3, r0
 8000814:	81fb      	strh	r3, [r7, #14]
	uint8_t odr = decodeODR(data_rate);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fa89 	bl	8001d30 <decodeODR>
 800081e:	4603      	mov	r3, r0
 8000820:	737b      	strb	r3, [r7, #13]

	//aligning firmware's interrupt frequency with sensors' measurements reading
	if(LIS3DHTR_SetODR(&hi2c1, odr) != HAL_OK)
 8000822:	7b7b      	ldrb	r3, [r7, #13]
 8000824:	4619      	mov	r1, r3
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <handleSetupAccel+0xc8>)
 8000828:	f000 fd24 	bl	8001274 <LIS3DHTR_SetODR>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d11a      	bne.n	8000868 <handleSetupAccel+0xa0>
		return;
	setSamplingFrequency(hz);
 8000832:	89fb      	ldrh	r3, [r7, #14]
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f9ef 	bl	8001c18 <setSamplingFrequency>

	//sets full scale
	if(LIS3DHTR_SetFullScale(&hi2c1, full_scale) != HAL_OK)
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	4619      	mov	r1, r3
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <handleSetupAccel+0xc8>)
 8000840:	f000 fd58 	bl	80012f4 <LIS3DHTR_SetFullScale>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d110      	bne.n	800086c <handleSetupAccel+0xa4>
		return;

	//sets enable x, y, z axes
	if(LIS3DHTR_SetAxes(&hi2c1, axes) != HAL_OK)
 800084a:	797b      	ldrb	r3, [r7, #5]
 800084c:	4619      	mov	r1, r3
 800084e:	4810      	ldr	r0, [pc, #64]	@ (8000890 <handleSetupAccel+0xc8>)
 8000850:	f000 fd96 	bl	8001380 <LIS3DHTR_SetAxes>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10a      	bne.n	8000870 <handleSetupAccel+0xa8>
		return;

	HAL_TIM_Base_Start(&htim2);
 800085a:	4809      	ldr	r0, [pc, #36]	@ (8000880 <handleSetupAccel+0xb8>)
 800085c:	f007 fbda 	bl	8008014 <HAL_TIM_Base_Start>

	setup_in_progress = 0;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <handleSetupAccel+0xb0>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e004      	b.n	8000872 <handleSetupAccel+0xaa>
		return;
 8000868:	bf00      	nop
 800086a:	e002      	b.n	8000872 <handleSetupAccel+0xaa>
		return;
 800086c:	bf00      	nop
 800086e:	e000      	b.n	8000872 <handleSetupAccel+0xaa>
		return;
 8000870:	bf00      	nop

}
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000003e 	.word	0x2000003e
 800087c:	2000003c 	.word	0x2000003c
 8000880:	20000184 	.word	0x20000184
 8000884:	20000002 	.word	0x20000002
 8000888:	20000003 	.word	0x20000003
 800088c:	20000004 	.word	0x20000004
 8000890:	20000048 	.word	0x20000048

08000894 <handleCommand>:

void handleCommand(uint8_t *packet)
{
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af02      	add	r7, sp, #8
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = packet[0];
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	73fb      	strb	r3, [r7, #15]
	uint8_t payload = packet[1];
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	73bb      	strb	r3, [r7, #14]

	//please note that we're just checking the dimensions, not the content of the bytes (TODO)
	switch(cmd)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	3b35      	subs	r3, #53	@ 0x35
 80008ac:	2b1b      	cmp	r3, #27
 80008ae:	f200 80d4 	bhi.w	8000a5a <handleCommand+0x1c6>
 80008b2:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <handleCommand+0x24>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	08000929 	.word	0x08000929
 80008bc:	08000943 	.word	0x08000943
 80008c0:	0800096b 	.word	0x0800096b
 80008c4:	08000983 	.word	0x08000983
 80008c8:	080009a1 	.word	0x080009a1
 80008cc:	08000a5b 	.word	0x08000a5b
 80008d0:	08000a5b 	.word	0x08000a5b
 80008d4:	08000a5b 	.word	0x08000a5b
 80008d8:	08000a5b 	.word	0x08000a5b
 80008dc:	08000a5b 	.word	0x08000a5b
 80008e0:	08000a5b 	.word	0x08000a5b
 80008e4:	080009bf 	.word	0x080009bf
 80008e8:	080009d5 	.word	0x080009d5
 80008ec:	080009eb 	.word	0x080009eb
 80008f0:	08000a01 	.word	0x08000a01
 80008f4:	08000a5b 	.word	0x08000a5b
 80008f8:	08000a5b 	.word	0x08000a5b
 80008fc:	08000a5b 	.word	0x08000a5b
 8000900:	08000a5b 	.word	0x08000a5b
 8000904:	08000a5b 	.word	0x08000a5b
 8000908:	08000a5b 	.word	0x08000a5b
 800090c:	08000a5b 	.word	0x08000a5b
 8000910:	08000a5b 	.word	0x08000a5b
 8000914:	08000a5b 	.word	0x08000a5b
 8000918:	08000a5b 	.word	0x08000a5b
 800091c:	08000a5b 	.word	0x08000a5b
 8000920:	08000a5b 	.word	0x08000a5b
 8000924:	08000a1d 	.word	0x08000a1d
	{
		//general info
		case 0x35:
			if(payload == 1 && packet[2] == 0)
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	2b01      	cmp	r3, #1
 800092c:	f040 8097 	bne.w	8000a5e <handleCommand+0x1ca>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3302      	adds	r3, #2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8091 	bne.w	8000a5e <handleCommand+0x1ca>
				Send_Status();
 800093c:	f001 fb86 	bl	800204c <Send_Status>
			break;
 8000940:	e08d      	b.n	8000a5e <handleCommand+0x1ca>

		//config settings
		case 0x36:
			if (payload == 3)
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b03      	cmp	r3, #3
 8000946:	f040 808c 	bne.w	8000a62 <handleCommand+0x1ce>
			{
				handleSetupAccel(packet[2], packet[3], packet[4]);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3302      	adds	r3, #2
 800094e:	7818      	ldrb	r0, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3303      	adds	r3, #3
 8000954:	7819      	ldrb	r1, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3304      	adds	r3, #4
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	f7ff ff33 	bl	80007c8 <handleSetupAccel>
				Send_ACK(0x36);
 8000962:	2036      	movs	r0, #54	@ 0x36
 8000964:	f001 fb44 	bl	8001ff0 <Send_ACK>
			}
			break;
 8000968:	e07b      	b.n	8000a62 <handleCommand+0x1ce>

		//start stream
		case 0x37:
			if(payload == 1 && packet[2] == 0x00)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d17a      	bne.n	8000a66 <handleCommand+0x1d2>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3302      	adds	r3, #2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d175      	bne.n	8000a66 <handleCommand+0x1d2>
				stream_enabled = 1;
 800097a:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <handleCommand+0x1f8>)
 800097c:	2201      	movs	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
			break;
 8000980:	e071      	b.n	8000a66 <handleCommand+0x1d2>

		//stop stremam
		case 0x38:
			if(payload == 1 && packet[2] == 0x00)
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d170      	bne.n	8000a6a <handleCommand+0x1d6>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3302      	adds	r3, #2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d16b      	bne.n	8000a6a <handleCommand+0x1d6>
			{
				stream_enabled = 0;
 8000992:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <handleCommand+0x1f8>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
				Send_ACK(0x38);
 8000998:	2038      	movs	r0, #56	@ 0x38
 800099a:	f001 fb29 	bl	8001ff0 <Send_ACK>
			}
			break;
 800099e:	e064      	b.n	8000a6a <handleCommand+0x1d6>

		//send one sample
		case 0x39:
			if(payload == 1 && packet[2] == 0x00 && stream_enabled == 0)
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d163      	bne.n	8000a6e <handleCommand+0x1da>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3302      	adds	r3, #2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15e      	bne.n	8000a6e <handleCommand+0x1da>
 80009b0:	4b36      	ldr	r3, [pc, #216]	@ (8000a8c <handleCommand+0x1f8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d15a      	bne.n	8000a6e <handleCommand+0x1da>
				Send_AccelSample_Once();
 80009b8:	f001 fc24 	bl	8002204 <Send_AccelSample_Once>
			break;
 80009bc:	e057      	b.n	8000a6e <handleCommand+0x1da>

		case 0x40:
			if(payload == 1 && packet[2] == 0x00)
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d156      	bne.n	8000a72 <handleCommand+0x1de>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3302      	adds	r3, #2
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d151      	bne.n	8000a72 <handleCommand+0x1de>
			{
				Send_MaxA_ms();
 80009ce:	f001 fc65 	bl	800229c <Send_MaxA_ms>
			}
			break;
 80009d2:	e04e      	b.n	8000a72 <handleCommand+0x1de>

		case 0x41:
			if(payload == 1 && packet[2] == 0x00)
 80009d4:	7bbb      	ldrb	r3, [r7, #14]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d14d      	bne.n	8000a76 <handleCommand+0x1e2>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3302      	adds	r3, #2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d148      	bne.n	8000a76 <handleCommand+0x1e2>
			{
				Send_MaxA_mt();
 80009e4:	f001 fcc2 	bl	800236c <Send_MaxA_mt>
			}
			break;
 80009e8:	e045      	b.n	8000a76 <handleCommand+0x1e2>

		case 0x42:
			if(payload == 1 && packet[2] == 0x00)
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d144      	bne.n	8000a7a <handleCommand+0x1e6>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3302      	adds	r3, #2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d13f      	bne.n	8000a7a <handleCommand+0x1e6>
			{
				Send_EnvData();
 80009fa:	f001 fd03 	bl	8002404 <Send_EnvData>
			}
			break;
 80009fe:	e03c      	b.n	8000a7a <handleCommand+0x1e6>
		//reset A_ms
		case 0x43:
			if(payload == 1 && packet[2] == 0x00)
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d13b      	bne.n	8000a7e <handleCommand+0x1ea>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d136      	bne.n	8000a7e <handleCommand+0x1ea>
			{
				resetA_ms();
 8000a10:	f000 f98a 	bl	8000d28 <resetA_ms>
				Send_ACK(0x43);
 8000a14:	2043      	movs	r0, #67	@ 0x43
 8000a16:	f001 faeb 	bl	8001ff0 <Send_ACK>
			}
			break;
 8000a1a:	e030      	b.n	8000a7e <handleCommand+0x1ea>

		case 0x50:
			if(payload == 6)
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d12f      	bne.n	8000a82 <handleCommand+0x1ee>
			{
				setTimeAndDate(packet[2], packet[3], packet[4], packet[5], packet[6], packet[7]);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3302      	adds	r3, #2
 8000a26:	7818      	ldrb	r0, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	7819      	ldrb	r1, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3304      	adds	r3, #4
 8000a32:	781c      	ldrb	r4, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3305      	adds	r3, #5
 8000a38:	781d      	ldrb	r5, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	3207      	adds	r2, #7
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	9201      	str	r2, [sp, #4]
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	462b      	mov	r3, r5
 8000a4c:	4622      	mov	r2, r4
 8000a4e:	f001 f9a3 	bl	8001d98 <setTimeAndDate>
				Send_ACK(0x50);
 8000a52:	2050      	movs	r0, #80	@ 0x50
 8000a54:	f001 facc 	bl	8001ff0 <Send_ACK>
			}
			break;
 8000a58:	e013      	b.n	8000a82 <handleCommand+0x1ee>

		default: return; //no action
 8000a5a:	bf00      	nop
 8000a5c:	e012      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a5e:	bf00      	nop
 8000a60:	e010      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a62:	bf00      	nop
 8000a64:	e00e      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a66:	bf00      	nop
 8000a68:	e00c      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a6a:	bf00      	nop
 8000a6c:	e00a      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a6e:	bf00      	nop
 8000a70:	e008      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a72:	bf00      	nop
 8000a74:	e006      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a76:	bf00      	nop
 8000a78:	e004      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a7a:	bf00      	nop
 8000a7c:	e002      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a7e:	bf00      	nop
 8000a80:	e000      	b.n	8000a84 <handleCommand+0x1f0>
			break;
 8000a82:	bf00      	nop
	}
}
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000003a 	.word	0x2000003a

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <MX_DMA_Init+0x78>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <MX_DMA_Init+0x78>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <MX_DMA_Init+0x78>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f001 fe63 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f001 fe7c 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200e      	movs	r0, #14
 8000ac4:	f001 fe5b 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ac8:	200e      	movs	r0, #14
 8000aca:	f001 fe74 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f001 fe53 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ad8:	200f      	movs	r0, #15
 8000ada:	f001 fe6c 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2010      	movs	r0, #16
 8000ae4:	f001 fe4b 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ae8:	2010      	movs	r0, #16
 8000aea:	f001 fe64 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2011      	movs	r0, #17
 8000af4:	f001 fe43 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000af8:	2011      	movs	r0, #17
 8000afa:	f001 fe5c 	bl	80027b6 <HAL_NVIC_EnableIRQ>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <saveA_msToFlash>:
	recordedTime.Seconds = time.Seconds;
}
*/

void saveA_msToFlash(void)
{
 8000b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b10:	b08e      	sub	sp, #56	@ 0x38
 8000b12:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b14:	2200      	movs	r2, #0
 8000b16:	4950      	ldr	r1, [pc, #320]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000b18:	4850      	ldr	r0, [pc, #320]	@ (8000c5c <saveA_msToFlash+0x150>)
 8000b1a:	f006 fda7 	bl	800766c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	494f      	ldr	r1, [pc, #316]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000b22:	484e      	ldr	r0, [pc, #312]	@ (8000c5c <saveA_msToFlash+0x150>)
 8000b24:	f006 ff30 	bl	8007988 <HAL_RTC_GetDate>

	//unlocks flash memory
	HAL_FLASH_Unlock();
 8000b28:	f002 f97e 	bl	8002e28 <HAL_FLASH_Unlock>

	//deletes page
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase  = FLASH_TYPEERASE_PAGES;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase.PageAddress = FLASH_PAGE_ADDR;
 8000b30:	4b4c      	ldr	r3, [pc, #304]	@ (8000c64 <saveA_msToFlash+0x158>)
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
	erase.NbPages = 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t pageErr = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24

	if(HAL_FLASHEx_Erase(&erase, &pageErr) != HAL_OK)
 8000b3c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000b40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fa56 	bl	8002ff8 <HAL_FLASHEx_Erase>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <saveA_msToFlash+0x4c>
	{
		HAL_FLASH_Lock();
 8000b52:	f002 f98f 	bl	8002e74 <HAL_FLASH_Lock>
 8000b56:	e07b      	b.n	8000c50 <saveA_msToFlash+0x144>
		return;
	}

	//saves A_ms.x, y, z
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 0, (uint16_t)A_ms.x);
 8000b58:	4b43      	ldr	r3, [pc, #268]	@ (8000c68 <saveA_msToFlash+0x15c>)
 8000b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	461c      	mov	r4, r3
 8000b66:	4615      	mov	r5, r2
 8000b68:	4622      	mov	r2, r4
 8000b6a:	462b      	mov	r3, r5
 8000b6c:	493d      	ldr	r1, [pc, #244]	@ (8000c64 <saveA_msToFlash+0x158>)
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f002 f8ea 	bl	8002d48 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 2, (uint16_t)A_ms.y);
 8000b74:	4b3c      	ldr	r3, [pc, #240]	@ (8000c68 <saveA_msToFlash+0x15c>)
 8000b76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4698      	mov	r8, r3
 8000b82:	4691      	mov	r9, r2
 8000b84:	4642      	mov	r2, r8
 8000b86:	464b      	mov	r3, r9
 8000b88:	4938      	ldr	r1, [pc, #224]	@ (8000c6c <saveA_msToFlash+0x160>)
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f002 f8dc 	bl	8002d48 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 4, (uint16_t)A_ms.z);
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <saveA_msToFlash+0x15c>)
 8000b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	4693      	mov	fp, r2
 8000ba0:	4652      	mov	r2, sl
 8000ba2:	465b      	mov	r3, fp
 8000ba4:	4932      	ldr	r1, [pc, #200]	@ (8000c70 <saveA_msToFlash+0x164>)
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f002 f8ce 	bl	8002d48 <HAL_FLASH_Program>

	//saves last date and time
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 6, (uint16_t)(date.Date) | ((uint16_t)date.Month << 8));
 8000bac:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	17da      	asrs	r2, r3, #31
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	61fa      	str	r2, [r7, #28]
 8000bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bc4:	492b      	ldr	r1, [pc, #172]	@ (8000c74 <saveA_msToFlash+0x168>)
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f002 f8be 	bl	8002d48 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 8, (uint16_t)(date.Year));
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000bce:	78db      	ldrb	r3, [r3, #3]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	617a      	str	r2, [r7, #20]
 8000bd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bdc:	4926      	ldr	r1, [pc, #152]	@ (8000c78 <saveA_msToFlash+0x16c>)
 8000bde:	2001      	movs	r0, #1
 8000be0:	f002 f8b2 	bl	8002d48 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 10, (uint16_t)(time.Hours) | ((uint16_t)time.Minutes << 8));
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000bec:	785b      	ldrb	r3, [r3, #1]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	17da      	asrs	r2, r3, #31
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	60fa      	str	r2, [r7, #12]
 8000bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bfc:	491f      	ldr	r1, [pc, #124]	@ (8000c7c <saveA_msToFlash+0x170>)
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f002 f8a2 	bl	8002d48 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_PAGE_ADDR + 12, (uint16_t)(time.Seconds));
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000c06:	789b      	ldrb	r3, [r3, #2]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c14:	491a      	ldr	r1, [pc, #104]	@ (8000c80 <saveA_msToFlash+0x174>)
 8000c16:	2001      	movs	r0, #1
 8000c18:	f002 f896 	bl	8002d48 <HAL_FLASH_Program>

	//locks flash
	HAL_FLASH_Lock();
 8000c1c:	f002 f92a 	bl	8002e74 <HAL_FLASH_Lock>

	//saving registered date
	recordedDate.Date = date.Date;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000c22:	789a      	ldrb	r2, [r3, #2]
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <saveA_msToFlash+0x178>)
 8000c26:	709a      	strb	r2, [r3, #2]
	recordedDate.Month = date.Month;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000c2a:	785a      	ldrb	r2, [r3, #1]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <saveA_msToFlash+0x178>)
 8000c2e:	705a      	strb	r2, [r3, #1]
	recordedDate.Year = date.Year;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <saveA_msToFlash+0x154>)
 8000c32:	78da      	ldrb	r2, [r3, #3]
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <saveA_msToFlash+0x178>)
 8000c36:	70da      	strb	r2, [r3, #3]

	recordedTime.Hours = time.Hours;
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <saveA_msToFlash+0x17c>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	recordedTime.Minutes = time.Minutes;
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <saveA_msToFlash+0x17c>)
 8000c46:	705a      	strb	r2, [r3, #1]
	recordedTime.Seconds = time.Seconds;
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <saveA_msToFlash+0x14c>)
 8000c4a:	789a      	ldrb	r2, [r3, #2]
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <saveA_msToFlash+0x17c>)
 8000c4e:	709a      	strb	r2, [r3, #2]
}
 8000c50:	3738      	adds	r7, #56	@ 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c58:	20000214 	.word	0x20000214
 8000c5c:	20000130 	.word	0x20000130
 8000c60:	20000210 	.word	0x20000210
 8000c64:	0800fc00 	.word	0x0800fc00
 8000c68:	20000154 	.word	0x20000154
 8000c6c:	0800fc02 	.word	0x0800fc02
 8000c70:	0800fc04 	.word	0x0800fc04
 8000c74:	0800fc06 	.word	0x0800fc06
 8000c78:	0800fc08 	.word	0x0800fc08
 8000c7c:	0800fc0a 	.word	0x0800fc0a
 8000c80:	0800fc0c 	.word	0x0800fc0c
 8000c84:	20000040 	.word	0x20000040
 8000c88:	20000044 	.word	0x20000044

08000c8c <loadA_msFromFlash>:

void loadA_msFromFlash(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
	A_ms.x = *(int16_t*) (FLASH_PAGE_ADDR);
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <loadA_msFromFlash+0x74>)
 8000c94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <loadA_msFromFlash+0x78>)
 8000c9a:	801a      	strh	r2, [r3, #0]
	A_ms.y = *(int16_t*) (FLASH_PAGE_ADDR + 2);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <loadA_msFromFlash+0x7c>)
 8000c9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <loadA_msFromFlash+0x78>)
 8000ca4:	805a      	strh	r2, [r3, #2]
	A_ms.z = *(int16_t*) (FLASH_PAGE_ADDR + 4);
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <loadA_msFromFlash+0x80>)
 8000ca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <loadA_msFromFlash+0x78>)
 8000cae:	809a      	strh	r2, [r3, #4]

	uint16_t dateVal = *(uint16_t*) (FLASH_PAGE_ADDR + 6);
 8000cb0:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <loadA_msFromFlash+0x84>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	80fb      	strh	r3, [r7, #6]
	recordedDate.Date = dateVal & 0xFF;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <loadA_msFromFlash+0x88>)
 8000cbc:	709a      	strb	r2, [r3, #2]
	recordedDate.Month = (dateVal >> 8) & 0xFF;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <loadA_msFromFlash+0x88>)
 8000cc8:	705a      	strb	r2, [r3, #1]
	recordedDate.Year = *(uint8_t*) (FLASH_PAGE_ADDR + 8);
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <loadA_msFromFlash+0x8c>)
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <loadA_msFromFlash+0x88>)
 8000cd0:	70da      	strb	r2, [r3, #3]

	uint16_t timeVal = *(uint16_t*) (FLASH_PAGE_ADDR + 10);
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <loadA_msFromFlash+0x90>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	80bb      	strh	r3, [r7, #4]
	recordedTime.Hours = timeVal & 0xFF;
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <loadA_msFromFlash+0x94>)
 8000cde:	701a      	strb	r2, [r3, #0]
	recordedTime.Minutes = (timeVal >> 8) & 0xFF;
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	0a1b      	lsrs	r3, r3, #8
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <loadA_msFromFlash+0x94>)
 8000cea:	705a      	strb	r2, [r3, #1]
	recordedTime.Seconds = *(uint8_t*) (FLASH_PAGE_ADDR + 12);
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <loadA_msFromFlash+0x98>)
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <loadA_msFromFlash+0x94>)
 8000cf2:	709a      	strb	r2, [r3, #2]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	0800fc00 	.word	0x0800fc00
 8000d04:	20000154 	.word	0x20000154
 8000d08:	0800fc02 	.word	0x0800fc02
 8000d0c:	0800fc04 	.word	0x0800fc04
 8000d10:	0800fc06 	.word	0x0800fc06
 8000d14:	20000040 	.word	0x20000040
 8000d18:	0800fc08 	.word	0x0800fc08
 8000d1c:	0800fc0a 	.word	0x0800fc0a
 8000d20:	20000044 	.word	0x20000044
 8000d24:	0800fc0c 	.word	0x0800fc0c

08000d28 <resetA_ms>:

void resetA_ms(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	A_ms.x = 0.0f;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <resetA_ms+0x20>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	801a      	strh	r2, [r3, #0]
	A_ms.y = 0.0f;
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <resetA_ms+0x20>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	805a      	strh	r2, [r3, #2]
	A_ms.z = 0.0f;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <resetA_ms+0x20>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	809a      	strh	r2, [r3, #4]

	saveA_msToFlash();
 8000d3e:	f7ff fee5 	bl	8000b0c <saveA_msToFlash>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000154 	.word	0x20000154

08000d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_GPIO_Init+0x90>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_14, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f244 0102 	movw	r1, #16386	@ 0x4002
 8000dae:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000db0:	f002 fb4e 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14;
 8000db4:	f244 0302 	movw	r3, #16386	@ 0x4002
 8000db8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_GPIO_Init+0x94>)
 8000dce:	f002 f9bb 	bl	8003148 <HAL_GPIO_Init>

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	@ (8000e38 <MX_I2C1_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <MX_I2C1_Init+0x58>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_I2C1_Init+0x50>)
 8000e22:	f002 fb47 	bl	80034b4 <HAL_I2C_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 fba2 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000048 	.word	0x20000048
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	00061a80 	.word	0x00061a80

08000e40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a45      	ldr	r2, [pc, #276]	@ (8000f70 <HAL_I2C_MspInit+0x130>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f040 8082 	bne.w	8000f66 <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b44      	ldr	r3, [pc, #272]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a43      	ldr	r2, [pc, #268]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b41      	ldr	r3, [pc, #260]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e7a:	23c0      	movs	r3, #192	@ 0xc0
 8000e7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7e:	2312      	movs	r3, #18
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	483a      	ldr	r0, [pc, #232]	@ (8000f78 <HAL_I2C_MspInit+0x138>)
 8000e8e:	f002 f95b 	bl	8003148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e92:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a37      	ldr	r2, [pc, #220]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b35      	ldr	r3, [pc, #212]	@ (8000f74 <HAL_I2C_MspInit+0x134>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000eac:	4a34      	ldr	r2, [pc, #208]	@ (8000f80 <HAL_I2C_MspInit+0x140>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eb0:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ed6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000edc:	4827      	ldr	r0, [pc, #156]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ede:	f001 fc85 	bl	80027ec <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8000ee8:	f000 fb44 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef2:	4a22      	ldr	r2, [pc, #136]	@ (8000f7c <HAL_I2C_MspInit+0x13c>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000efa:	4a23      	ldr	r2, [pc, #140]	@ (8000f88 <HAL_I2C_MspInit+0x148>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f2a:	4816      	ldr	r0, [pc, #88]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f2c:	f001 fc5e 	bl	80027ec <HAL_DMA_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000f36:	f000 fb1d 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a11      	ldr	r2, [pc, #68]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f40:	4a10      	ldr	r2, [pc, #64]	@ (8000f84 <HAL_I2C_MspInit+0x144>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201f      	movs	r0, #31
 8000f4c:	f001 fc17 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f50:	201f      	movs	r0, #31
 8000f52:	f001 fc30 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	f001 fc0f 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f60:	2020      	movs	r0, #32
 8000f62:	f001 fc28 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	2000009c 	.word	0x2000009c
 8000f80:	40020080 	.word	0x40020080
 8000f84:	200000e0 	.word	0x200000e0
 8000f88:	4002006c 	.word	0x4002006c

08000f8c <LIS3DHTR_Init>:
uint8_t data_available = 0;	//data ready
uint8_t buffer[6] = {0}; 		//16-bit output for each axis (12-bit output left-justified)
uint8_t reg_addr = LIS3DHTR_OUT_X_L | 0x80; //auto increment function of LIS3DHTR sensor (bit #7LSb = 1)

HAL_StatusTypeDef LIS3DHTR_Init(I2C_HandleTypeDef *hi2c)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	6078      	str	r0, [r7, #4]
	//writes to CTRL_REG1
	if(HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_1, 1, &ctrl_1, 1, HAL_MAX_DELAY) != HAL_OK)
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <LIS3DHTR_Init+0x6c>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2130      	movs	r1, #48	@ 0x30
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f002 ff45 	bl	8003e38 <HAL_I2C_Mem_Write>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <LIS3DHTR_Init+0x2c>
		return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e01a      	b.n	8000fee <LIS3DHTR_Init+0x62>

	//writes to CTRL_REG4
	if(HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_4, 1, &ctrl_4, 1, HAL_MAX_DELAY) != HAL_OK)
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <LIS3DHTR_Init+0x70>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2223      	movs	r2, #35	@ 0x23
 8000fca:	2130      	movs	r1, #48	@ 0x30
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f002 ff33 	bl	8003e38 <HAL_I2C_Mem_Write>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <LIS3DHTR_Init+0x50>
		return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e008      	b.n	8000fee <LIS3DHTR_Init+0x62>
	ctrl_5 = ctrl_5 & ~(1 << 6);
	if(HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_5, 1, &ctrl_5, 1, HAL_MAX_DELAY) != HAL_OK)
		return HAL_ERROR;*/

	//WHO_AM_I check
	if(LIS3DHTR_Presence(hi2c) != HAL_OK)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f80f 	bl	8001000 <LIS3DHTR_Presence>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <LIS3DHTR_Init+0x60>
		return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LIS3DHTR_Init+0x62>

	return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000005 	.word	0x20000005
 8000ffc:	20000006 	.word	0x20000006

08001000 <LIS3DHTR_Presence>:

HAL_StatusTypeDef LIS3DHTR_Presence(I2C_HandleTypeDef *hi2c)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
 8001006:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, LIS3DHTR_WHO_AM_I, 1, &whoami, 1, HAL_MAX_DELAY) != HAL_OK)
 8001008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <LIS3DHTR_Presence+0x44>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	220f      	movs	r2, #15
 800101a:	2130      	movs	r1, #48	@ 0x30
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f003 f805 	bl	800402c <HAL_I2C_Mem_Read>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <LIS3DHTR_Presence+0x2c>
		return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e006      	b.n	800103a <LIS3DHTR_Presence+0x3a>

	if(whoami != 0x33)
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <LIS3DHTR_Presence+0x44>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b33      	cmp	r3, #51	@ 0x33
 8001032:	d001      	beq.n	8001038 <LIS3DHTR_Presence+0x38>
		return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LIS3DHTR_Presence+0x3a>

	return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000124 	.word	0x20000124

08001048 <getMgDigit>:
		default: return 32000;
	}
}

float getMgDigit(uint8_t fullscale)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	switch(fullscale)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b30      	cmp	r3, #48	@ 0x30
 8001056:	d010      	beq.n	800107a <getMgDigit+0x32>
 8001058:	2b30      	cmp	r3, #48	@ 0x30
 800105a:	dc10      	bgt.n	800107e <getMgDigit+0x36>
 800105c:	2b20      	cmp	r3, #32
 800105e:	d00a      	beq.n	8001076 <getMgDigit+0x2e>
 8001060:	2b20      	cmp	r3, #32
 8001062:	dc0c      	bgt.n	800107e <getMgDigit+0x36>
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <getMgDigit+0x26>
 8001068:	2b10      	cmp	r3, #16
 800106a:	d002      	beq.n	8001072 <getMgDigit+0x2a>
 800106c:	e007      	b.n	800107e <getMgDigit+0x36>
	{
	case 0x00: return 0.001f; break;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <getMgDigit+0x44>)
 8001070:	e006      	b.n	8001080 <getMgDigit+0x38>
	case 0x10: return 0.002f; break;
 8001072:	4b07      	ldr	r3, [pc, #28]	@ (8001090 <getMgDigit+0x48>)
 8001074:	e004      	b.n	8001080 <getMgDigit+0x38>
	case 0x20: return 0.004f; break;
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <getMgDigit+0x4c>)
 8001078:	e002      	b.n	8001080 <getMgDigit+0x38>
	case 0x30: return 0.012f; break;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <getMgDigit+0x50>)
 800107c:	e000      	b.n	8001080 <getMgDigit+0x38>

	default: return 0.012f;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <getMgDigit+0x50>)
	}
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	3a83126f 	.word	0x3a83126f
 8001090:	3b03126f 	.word	0x3b03126f
 8001094:	3b83126f 	.word	0x3b83126f
 8001098:	3c449ba6 	.word	0x3c449ba6

0800109c <LIS3DHTR_DataReady>:
	default: return 16000;
	}
}

uint8_t LIS3DHTR_DataReady(I2C_HandleTypeDef *hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af04      	add	r7, sp, #16
 80010a2:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, LIS3DHTR_STATUS_REG, I2C_MEMADD_SIZE_8BIT, &data_available, 1, HAL_MAX_DELAY) != HAL_OK)
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <LIS3DHTR_DataReady+0x40>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2227      	movs	r2, #39	@ 0x27
 80010b6:	2130      	movs	r1, #48	@ 0x30
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f002 ffb7 	bl	800402c <HAL_I2C_Mem_Read>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <LIS3DHTR_DataReady+0x2c>
		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e004      	b.n	80010d2 <LIS3DHTR_DataReady+0x36>

	return (data_available & 0x08);	//bit #3
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <LIS3DHTR_DataReady+0x40>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000125 	.word	0x20000125

080010e0 <LIS3DHTR_Read>:

HAL_StatusTypeDef LIS3DHTR_Read(I2C_HandleTypeDef *hi2c, LIS3DHTR_Data *data)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08d      	sub	sp, #52	@ 0x34
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	int16_t raw_x = 0, raw_y = 0, raw_z = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	83fb      	strh	r3, [r7, #30]
 80010ee:	2300      	movs	r3, #0
 80010f0:	83bb      	strh	r3, [r7, #28]
 80010f2:	2300      	movs	r3, #0
 80010f4:	837b      	strh	r3, [r7, #26]

	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, reg_addr, 1, buffer, 6, HAL_MAX_DELAY) != HAL_OK)
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <LIS3DHTR_Read+0x180>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001100:	9302      	str	r3, [sp, #8]
 8001102:	2306      	movs	r3, #6
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	4b57      	ldr	r3, [pc, #348]	@ (8001264 <LIS3DHTR_Read+0x184>)
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	2130      	movs	r1, #48	@ 0x30
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f002 ff8c 	bl	800402c <HAL_I2C_Mem_Read>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <LIS3DHTR_Read+0x3e>
		return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09c      	b.n	8001258 <LIS3DHTR_Read+0x178>

	//discards disabled axes measurements and sets them to zero
	if(enabled_axes_set & 0x01)
 800111e:	4b52      	ldr	r3, [pc, #328]	@ (8001268 <LIS3DHTR_Read+0x188>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <LIS3DHTR_Read+0x5e>
		raw_x = (int16_t)(buffer[1] << 8 | buffer[0]);
 800112a:	4b4e      	ldr	r3, [pc, #312]	@ (8001264 <LIS3DHTR_Read+0x184>)
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	b21b      	sxth	r3, r3
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b4b      	ldr	r3, [pc, #300]	@ (8001264 <LIS3DHTR_Read+0x184>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	83fb      	strh	r3, [r7, #30]
	if(enabled_axes_set & 0x02)
 800113e:	4b4a      	ldr	r3, [pc, #296]	@ (8001268 <LIS3DHTR_Read+0x188>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <LIS3DHTR_Read+0x7e>
		raw_y = (int16_t)(buffer[3] << 8 | buffer[2]);
 800114a:	4b46      	ldr	r3, [pc, #280]	@ (8001264 <LIS3DHTR_Read+0x184>)
 800114c:	78db      	ldrb	r3, [r3, #3]
 800114e:	b21b      	sxth	r3, r3
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b43      	ldr	r3, [pc, #268]	@ (8001264 <LIS3DHTR_Read+0x184>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	83bb      	strh	r3, [r7, #28]
	if(enabled_axes_set & 0x04)
 800115e:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <LIS3DHTR_Read+0x188>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	d009      	beq.n	800117e <LIS3DHTR_Read+0x9e>
		raw_z = (int16_t)(buffer[5] << 8 | buffer[4]);
 800116a:	4b3e      	ldr	r3, [pc, #248]	@ (8001264 <LIS3DHTR_Read+0x184>)
 800116c:	795b      	ldrb	r3, [r3, #5]
 800116e:	b21b      	sxth	r3, r3
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b3b      	ldr	r3, [pc, #236]	@ (8001264 <LIS3DHTR_Read+0x184>)
 8001176:	791b      	ldrb	r3, [r3, #4]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	837b      	strh	r3, [r7, #26]

	//checking full scale overflows

	//int16_t max_counts = getMaxValues(fullscale_set);

	float x_g = ((float)raw_x * getMgDigit(fullscale_set)) / 16.0f;
 800117e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f89c 	bl	80002c0 <__aeabi_i2f>
 8001188:	4604      	mov	r4, r0
 800118a:	4b38      	ldr	r3, [pc, #224]	@ (800126c <LIS3DHTR_Read+0x18c>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff5a 	bl	8001048 <getMgDigit>
 8001194:	4603      	mov	r3, r0
 8001196:	4619      	mov	r1, r3
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff f8e5 	bl	8000368 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f993 	bl	80004d0 <__aeabi_fdiv>
 80011aa:	4603      	mov	r3, r0
 80011ac:	617b      	str	r3, [r7, #20]
	data -> x = (int16_t)(x_g * 1000);
 80011ae:	4930      	ldr	r1, [pc, #192]	@ (8001270 <LIS3DHTR_Read+0x190>)
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff f8d9 	bl	8000368 <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fa25 	bl	8000608 <__aeabi_f2iz>
 80011be:	4603      	mov	r3, r0
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	801a      	strh	r2, [r3, #0]
	//if(data -> x > max_counts)  data -> x = max_counts;
	//if(data -> x < -max_counts) data -> x = -max_counts;

	float y_g = ((float)raw_y * getMgDigit(fullscale_set)) / 16.0f;
 80011c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f878 	bl	80002c0 <__aeabi_i2f>
 80011d0:	4604      	mov	r4, r0
 80011d2:	4b26      	ldr	r3, [pc, #152]	@ (800126c <LIS3DHTR_Read+0x18c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff36 	bl	8001048 <getMgDigit>
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff f8c1 	bl	8000368 <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f96f 	bl	80004d0 <__aeabi_fdiv>
 80011f2:	4603      	mov	r3, r0
 80011f4:	613b      	str	r3, [r7, #16]
	data -> y = (int16_t)(y_g * 1000);
 80011f6:	491e      	ldr	r1, [pc, #120]	@ (8001270 <LIS3DHTR_Read+0x190>)
 80011f8:	6938      	ldr	r0, [r7, #16]
 80011fa:	f7ff f8b5 	bl	8000368 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fa01 	bl	8000608 <__aeabi_f2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	b21a      	sxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	805a      	strh	r2, [r3, #2]
	//if(data -> y > max_counts)  data -> y = max_counts;
	//if(data -> y < -max_counts) data -> y = -max_counts;

	float z_g = ((float)raw_z * getMgDigit(fullscale_set)) / 16.0f;
 800120e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f854 	bl	80002c0 <__aeabi_i2f>
 8001218:	4604      	mov	r4, r0
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <LIS3DHTR_Read+0x18c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff12 	bl	8001048 <getMgDigit>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff f89d 	bl	8000368 <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f94b 	bl	80004d0 <__aeabi_fdiv>
 800123a:	4603      	mov	r3, r0
 800123c:	60fb      	str	r3, [r7, #12]
	data -> z = (int16_t)(z_g * 1000);
 800123e:	490c      	ldr	r1, [pc, #48]	@ (8001270 <LIS3DHTR_Read+0x190>)
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff f891 	bl	8000368 <__aeabi_fmul>
 8001246:	4603      	mov	r3, r0
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9dd 	bl	8000608 <__aeabi_f2iz>
 800124e:	4603      	mov	r3, r0
 8001250:	b21a      	sxth	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	809a      	strh	r2, [r3, #4]
	//if(data -> z > max_counts)  data -> z = max_counts;
	//if(data -> z < -max_counts) data -> z = -max_counts;

	//memset(buffer, 0, sizeof(buffer));

	return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3724      	adds	r7, #36	@ 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	20000007 	.word	0x20000007
 8001264:	20000128 	.word	0x20000128
 8001268:	20000004 	.word	0x20000004
 800126c:	20000003 	.word	0x20000003
 8001270:	447a0000 	.word	0x447a0000

08001274 <LIS3DHTR_SetODR>:

HAL_StatusTypeDef LIS3DHTR_SetODR(I2C_HandleTypeDef *hi2c, uint8_t odr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af04      	add	r7, sp, #16
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
	//reads CTRL_REG1 value
	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_1, 1, &ctrl_1, 1, HAL_MAX_DELAY) != HAL_OK)
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2220      	movs	r2, #32
 8001292:	2130      	movs	r1, #48	@ 0x30
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f002 fec9 	bl	800402c <HAL_I2C_Mem_Read>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <LIS3DHTR_SetODR+0x30>
		return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e020      	b.n	80012e6 <LIS3DHTR_SetODR+0x72>

	ctrl_1 = ctrl_1 & 0x0F; 					//masks ODR bits: ODR[3:0] = '0000'
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 80012b0:	701a      	strb	r2, [r3, #0]
	ctrl_1 = ctrl_1 | (odr << 4); 				//places new ODR bits
 80012b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b25a      	sxtb	r2, r3
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 80012c8:	701a      	strb	r2, [r3, #0]

	//writes to CTRL_REG1
	return HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_1, 1, &ctrl_1, 1, HAL_MAX_DELAY);
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <LIS3DHTR_SetODR+0x7c>)
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2220      	movs	r2, #32
 80012dc:	2130      	movs	r1, #48	@ 0x30
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f002 fdaa 	bl	8003e38 <HAL_I2C_Mem_Write>
 80012e4:	4603      	mov	r3, r0

}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000005 	.word	0x20000005

080012f4 <LIS3DHTR_SetFullScale>:

HAL_StatusTypeDef LIS3DHTR_SetFullScale(I2C_HandleTypeDef *hi2c, uint8_t fullscale)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af04      	add	r7, sp, #16
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
	if(fullscale > 0x30)
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b30      	cmp	r3, #48	@ 0x30
 8001304:	d901      	bls.n	800130a <LIS3DHTR_SetFullScale+0x16>
		return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e033      	b.n	8001372 <LIS3DHTR_SetFullScale+0x7e>

	//reads CTRL_REG4 value
	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_4, 1, &ctrl_4, 1, HAL_MAX_DELAY) != HAL_OK)
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	2223      	movs	r2, #35	@ 0x23
 800131c:	2130      	movs	r1, #48	@ 0x30
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f002 fe84 	bl	800402c <HAL_I2C_Mem_Read>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <LIS3DHTR_SetFullScale+0x3a>
		return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e021      	b.n	8001372 <LIS3DHTR_SetFullScale+0x7e>

	ctrl_4 = ctrl_4 & ~(0x30); 					//clears full scale[1:0]
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 800133a:	701a      	strb	r2, [r3, #0]
	ctrl_4 = ctrl_4 | (fullscale & 0x30); 		//sets new bits
 800133c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001340:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001344:	b25a      	sxtb	r2, r3
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 8001354:	701a      	strb	r2, [r3, #0]

	//writes to CTRL_REG4
	return HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_4, 1, &ctrl_4, 1, HAL_MAX_DELAY);
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <LIS3DHTR_SetFullScale+0x88>)
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2223      	movs	r2, #35	@ 0x23
 8001368:	2130      	movs	r1, #48	@ 0x30
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f002 fd64 	bl	8003e38 <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000006 	.word	0x20000006

08001380 <LIS3DHTR_SetAxes>:

HAL_StatusTypeDef LIS3DHTR_SetAxes(I2C_HandleTypeDef *hi2c, uint8_t axes)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	if(axes > 0x07)
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b07      	cmp	r3, #7
 8001390:	d901      	bls.n	8001396 <LIS3DHTR_SetAxes+0x16>
		return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e033      	b.n	80013fe <LIS3DHTR_SetAxes+0x7e>

	//reads CTRL_REG1 value
	if(HAL_I2C_Mem_Read(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_1, 1, &ctrl_1, 1, HAL_MAX_DELAY) != HAL_OK)
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	2220      	movs	r2, #32
 80013a8:	2130      	movs	r1, #48	@ 0x30
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f002 fe3e 	bl	800402c <HAL_I2C_Mem_Read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <LIS3DHTR_SetAxes+0x3a>
		return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e021      	b.n	80013fe <LIS3DHTR_SetAxes+0x7e>

	ctrl_1 = ctrl_1 & 0xF0; 					//clears Xen,Yen,Zen bits
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f023 030f 	bic.w	r3, r3, #15
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013c6:	701a      	strb	r2, [r3, #0]
	ctrl_1 = ctrl_1 | (axes & 0x07); 			//sets new bits
 80013c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	b25a      	sxtb	r2, r3
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013e0:	701a      	strb	r2, [r3, #0]

	//writes to CTRL_REG1
	return HAL_I2C_Mem_Write(hi2c, LIS3DHTR_ADDR, LIS3DHTR_CTRL_REG_1, 1, &ctrl_1, 1, HAL_MAX_DELAY);
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <LIS3DHTR_SetAxes+0x88>)
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2220      	movs	r2, #32
 80013f4:	2130      	movs	r1, #48	@ 0x30
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f002 fd1e 	bl	8003e38 <HAL_I2C_Mem_Write>
 80013fc:	4603      	mov	r3, r0

}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000005 	.word	0x20000005

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001410:	f001 f858 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f810 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f7ff fc98 	bl	8000d4c <MX_GPIO_Init>
  MX_DMA_Init();
 800141c:	f7ff fb38 	bl	8000a90 <MX_DMA_Init>
  MX_I2C1_Init();
 8001420:	f7ff fce0 	bl	8000de4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001424:	f000 fb5c 	bl	8001ae0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001428:	f000 fcec 	bl	8001e04 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800142c:	f000 f8ae 	bl	800158c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  TestInit();
 8001430:	f000 f860 	bl	80014f4 <TestInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <main+0x28>

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	@ 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	2228      	movs	r2, #40	@ 0x28
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f008 f9d8 	bl	80097fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001468:	2309      	movs	r3, #9
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001472:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2302      	movs	r3, #2
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001488:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800148e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001494:	4618      	mov	r0, r3
 8001496:	f005 fa47 	bl	8006928 <HAL_RCC_OscConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80014a0:	f000 f868 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a4:	230f      	movs	r3, #15
 80014a6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fcb3 	bl	8006e2c <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014cc:	f000 f852 	bl	8001574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014d0:	2301      	movs	r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fe35 	bl	800714c <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014e8:	f000 f844 	bl	8001574 <Error_Handler>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	@ 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <TestInit>:

/* USER CODE BEGIN 4 */

void TestInit()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
/*	HAL_Delay(2000);
	const char msg[] = "Initializing...\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg) - 1, HAL_MAX_DELAY);
*/
	//Loading A_ms from flash memory
	loadA_msFromFlash();
 80014f8:	f7ff fbc8 	bl	8000c8c <loadA_msFromFlash>
	HAL_Delay(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001500:	f001 f842 	bl	8002588 <HAL_Delay>
				recordedDate.Date, recordedDate.Month, 2000 + recordedDate.Year,
			   recordedTime.Hours, recordedTime.Minutes, recordedTime.Seconds);
	HAL_UART_Transmit(&huart1, (uint8_t*)det, strlen(det), HAL_MAX_DELAY);
*/
	//Establishes connection (check) and sets 100Hz frequency and full scale +-16g
	if(LIS3DHTR_Init(&hi2c1) != HAL_OK)
 8001504:	4817      	ldr	r0, [pc, #92]	@ (8001564 <TestInit+0x70>)
 8001506:	f7ff fd41 	bl	8000f8c <LIS3DHTR_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <TestInit+0x20>
		Error_Handler();
 8001510:	f000 f830 	bl	8001574 <Error_Handler>
	HAL_Delay(1000);
 8001514:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001518:	f001 f836 	bl	8002588 <HAL_Delay>
/*	const char acc[] = "LIS3DHTR connected\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)acc, sizeof(acc) - 1, HAL_MAX_DELAY);
*/
	//Soft-reset of the SHT40 sensor
	if(SHT40_Init(&hi2c1) != HAL_OK)
 800151c:	4811      	ldr	r0, [pc, #68]	@ (8001564 <TestInit+0x70>)
 800151e:	f000 f9c1 	bl	80018a4 <SHT40_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <TestInit+0x38>
		Error_Handler();
 8001528:	f000 f824 	bl	8001574 <Error_Handler>
	HAL_Delay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001530:	f001 f82a 	bl	8002588 <HAL_Delay>
/*	const char th[] = "SHT40 connected\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)th, sizeof(th) - 1, HAL_MAX_DELAY);
*/
	//Starts 100Hz timer w/ non-blocking interrupt
	HAL_TIM_Base_Start_IT(&htim2);
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <TestInit+0x74>)
 8001536:	f006 fddd 	bl	80080f4 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 800153a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153e:	f001 f823 	bl	8002588 <HAL_Delay>
/*	const char tim[] = "Timer initialized\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)tim, sizeof(tim) - 1, HAL_MAX_DELAY);

*/	//Starts DMA-based serial communication
	extern uint8_t rx_byte;
	Parser_Init();
 8001542:	f000 f949 	bl	80017d8 <Parser_Init>
	HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f001 f81d 	bl	8002588 <HAL_Delay>
//	const char parser[] = "Parser initialized\r\n";
//	HAL_UART_Transmit(&huart1, (uint8_t*)parser, sizeof(parser) - 1, HAL_MAX_DELAY);
	HAL_Delay(300);
 800154e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001552:	f001 f819 	bl	8002588 <HAL_Delay>
//	const char wait[] = "Waiting for command...\r\n";
//	HAL_UART_Transmit(&huart1, (uint8_t*)wait, sizeof(wait) - 1, HAL_MAX_DELAY);

	HAL_UART_Receive_DMA(&huart1, &rx_byte, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	4904      	ldr	r1, [pc, #16]	@ (800156c <TestInit+0x78>)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <TestInit+0x7c>)
 800155c:	f007 fa2c 	bl	80089b8 <HAL_UART_Receive_DMA>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000048 	.word	0x20000048
 8001568:	20000184 	.word	0x20000184
 800156c:	20000039 	.word	0x20000039
 8001570:	20000218 	.word	0x20000218

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001578:	2102      	movs	r1, #2
 800157a:	4803      	ldr	r0, [pc, #12]	@ (8001588 <Error_Handler+0x14>)
 800157c:	f001 ff80 	bl	8003480 <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x10>
 8001588:	40010800 	.word	0x40010800

0800158c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2100      	movs	r1, #0
 8001596:	460a      	mov	r2, r1
 8001598:	801a      	strh	r2, [r3, #0]
 800159a:	460a      	mov	r2, r1
 800159c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_RTC_Init+0x8c>)
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <MX_RTC_Init+0x90>)
 80015a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_RTC_Init+0x8c>)
 80015aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_RTC_Init+0x8c>)
 80015b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b8:	4817      	ldr	r0, [pc, #92]	@ (8001618 <MX_RTC_Init+0x8c>)
 80015ba:	f005 ff33 	bl	8007424 <HAL_RTC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80015c4:	f7ff ffd6 	bl	8001574 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2201      	movs	r2, #1
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	@ (8001618 <MX_RTC_Init+0x8c>)
 80015dc:	f005 ffae 	bl	800753c <HAL_RTC_SetTime>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80015e6:	f7ff ffc5 	bl	8001574 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80015ea:	2301      	movs	r3, #1
 80015ec:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80015ee:	2301      	movs	r3, #1
 80015f0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_RTC_Init+0x8c>)
 8001602:	f006 f90b 	bl	800781c <HAL_RTC_SetDate>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800160c:	f7ff ffb2 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000130 	.word	0x20000130
 800161c:	40002800 	.word	0x40002800

08001620 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_RTC_MspInit+0x3c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d110      	bne.n	8001654 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001632:	f005 f96d 	bl	8006910 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_RTC_MspInit+0x40>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <HAL_RTC_MspInit+0x40>)
 800163c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <HAL_RTC_MspInit+0x40>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_RTC_MspInit+0x44>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40002800 	.word	0x40002800
 8001660:	40021000 	.word	0x40021000
 8001664:	4242043c 	.word	0x4242043c

08001668 <updateMaxValues>:

SHT40_Data env = {0};

//updating A_mt and A_ms based off instantaneous acceleration values for each axis
void updateMaxValues(LIS3DHTR_Data *A_i)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	//flag to perform save operation of A_ms once for all the axes
	 uint8_t to_update = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

	//max A_mt (temporary)
	if(abs(A_i -> x) > abs(A_mt.x)) A_mt.x = abs(A_i -> x);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bfb8      	it	lt
 800167e:	425b      	neglt	r3, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <updateMaxValues+0x168>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfb8      	it	lt
 800168c:	425b      	neglt	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	429a      	cmp	r2, r3
 8001692:	d909      	bls.n	80016a8 <updateMaxValues+0x40>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	2b00      	cmp	r3, #0
 800169c:	bfb8      	it	lt
 800169e:	425b      	neglt	r3, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b4a      	ldr	r3, [pc, #296]	@ (80017d0 <updateMaxValues+0x168>)
 80016a6:	801a      	strh	r2, [r3, #0]
	if(abs(A_i -> y) > abs(A_mt.y)) A_mt.y = abs(A_i -> y);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bfb8      	it	lt
 80016b2:	425b      	neglt	r3, r3
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b46      	ldr	r3, [pc, #280]	@ (80017d0 <updateMaxValues+0x168>)
 80016b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bfb8      	it	lt
 80016c0:	425b      	neglt	r3, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d909      	bls.n	80016dc <updateMaxValues+0x74>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bfb8      	it	lt
 80016d2:	425b      	neglt	r3, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <updateMaxValues+0x168>)
 80016da:	805a      	strh	r2, [r3, #2]
	if(abs(A_i -> z) > abs(A_mt.z)) A_mt.z = abs(A_i -> z);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bfb8      	it	lt
 80016e6:	425b      	neglt	r3, r3
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <updateMaxValues+0x168>)
 80016ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bfb8      	it	lt
 80016f4:	425b      	neglt	r3, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d909      	bls.n	8001710 <updateMaxValues+0xa8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	bfb8      	it	lt
 8001706:	425b      	neglt	r3, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <updateMaxValues+0x168>)
 800170e:	809a      	strh	r2, [r3, #4]

	//max A_ms (persistent)
	if(abs(A_i -> x) > abs(A_ms.x))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	2b00      	cmp	r3, #0
 8001718:	bfb8      	it	lt
 800171a:	425b      	neglt	r3, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <updateMaxValues+0x16c>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb8      	it	lt
 8001728:	425b      	neglt	r3, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	429a      	cmp	r2, r3
 800172e:	d90b      	bls.n	8001748 <updateMaxValues+0xe0>
	{
		A_ms.x = abs(A_i -> x);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bfb8      	it	lt
 800173a:	425b      	neglt	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21a      	sxth	r2, r3
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <updateMaxValues+0x16c>)
 8001742:	801a      	strh	r2, [r3, #0]
		to_update = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
	}

	if(abs(A_i -> y) > abs(A_ms.y))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bfb8      	it	lt
 8001752:	425b      	neglt	r3, r3
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <updateMaxValues+0x16c>)
 8001758:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	bfb8      	it	lt
 8001760:	425b      	neglt	r3, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	429a      	cmp	r2, r3
 8001766:	d90b      	bls.n	8001780 <updateMaxValues+0x118>
	{
		A_ms.y = abs(A_i -> y);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bfb8      	it	lt
 8001772:	425b      	neglt	r3, r3
 8001774:	b29b      	uxth	r3, r3
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <updateMaxValues+0x16c>)
 800177a:	805a      	strh	r2, [r3, #2]
		to_update = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
	}

	if(abs(A_i -> z) > abs(A_ms.z))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	bfb8      	it	lt
 800178a:	425b      	neglt	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <updateMaxValues+0x16c>)
 8001790:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	bfb8      	it	lt
 8001798:	425b      	neglt	r3, r3
 800179a:	b29b      	uxth	r3, r3
 800179c:	429a      	cmp	r2, r3
 800179e:	d90b      	bls.n	80017b8 <updateMaxValues+0x150>
	{
		A_ms.z = abs(A_i -> z);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bfb8      	it	lt
 80017aa:	425b      	neglt	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <updateMaxValues+0x16c>)
 80017b2:	809a      	strh	r2, [r3, #4]
		to_update = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
	}

	//saving A_ms in non-volatile memory
	if(to_update)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <updateMaxValues+0x15e>
	{
		saveA_msToFlash();
 80017be:	f7ff f9a5 	bl	8000b0c <saveA_msToFlash>
		to_update = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
	}
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000014c 	.word	0x2000014c
 80017d4:	20000154 	.word	0x20000154

080017d8 <Parser_Init>:
#include <string.h>

static Parser parser;

void Parser_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	memset(&parser, 0, sizeof(Parser)); //resets parser (index = 0, buffer[] = {0})
 80017dc:	2221      	movs	r2, #33	@ 0x21
 80017de:	2100      	movs	r1, #0
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <Parser_Init+0x14>)
 80017e2:	f008 f80b 	bl	80097fc <memset>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000160 	.word	0x20000160

080017f0 <Parser_ProcessByte>:

void Parser_ProcessByte(uint8_t byte)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	//overflow check
	if(parser.index >= MAX_PACKET_DIM)
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b1f      	cmp	r3, #31
 8001802:	d901      	bls.n	8001808 <Parser_ProcessByte+0x18>
		Parser_Init(); //reset
 8001804:	f7ff ffe8 	bl	80017d8 <Parser_Init>

	parser.buffer[parser.index++] = byte;
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	b2d1      	uxtb	r1, r2
 8001812:	4a23      	ldr	r2, [pc, #140]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001814:	f882 1020 	strb.w	r1, [r2, #32]
 8001818:	4619      	mov	r1, r3
 800181a:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	5453      	strb	r3, [r2, r1]

	//cmd and payload bytes in buffer
	if(parser.index == 2)
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d106      	bne.n	8001838 <Parser_ProcessByte+0x48>
	{
		if(parser.buffer[1] > (MAX_PACKET_DIM - 3)) //checks if payload is bigger than MAX_PACKET_DIM (exluding cmd,payload and crc bytes)
 800182a:	4b1d      	ldr	r3, [pc, #116]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	2b1d      	cmp	r3, #29
 8001830:	d902      	bls.n	8001838 <Parser_ProcessByte+0x48>
		{
			Parser_Init(); //resets
 8001832:	f7ff ffd1 	bl	80017d8 <Parser_Init>
			return;
 8001836:	e030      	b.n	800189a <Parser_ProcessByte+0xaa>
	}

	//check if #data bytes corresponds to what declared in payload byte? TODO

	//4 bytes minimum: command | payload | data | CRC
	if(parser.index > 3 && parser.index == (parser.buffer[1] + 3)) //reached termination assuming #data bytes is coherent
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 800183a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d92b      	bls.n	800189a <Parser_ProcessByte+0xaa>
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	461a      	mov	r2, r3
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	3303      	adds	r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d122      	bne.n	800189a <Parser_ProcessByte+0xaa>
	{
		//crc
		uint8_t crc = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < parser.index - 1; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	73bb      	strb	r3, [r7, #14]
 800185c:	e008      	b.n	8001870 <Parser_ProcessByte+0x80>
			crc += parser.buffer[i];
 800185e:	7bbb      	ldrb	r3, [r7, #14]
 8001860:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001862:	5cd2      	ldrb	r2, [r2, r3]
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	4413      	add	r3, r2
 8001868:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < parser.index - 1; i++)
 800186a:	7bbb      	ldrb	r3, [r7, #14]
 800186c:	3301      	adds	r3, #1
 800186e:	73bb      	strb	r3, [r7, #14]
 8001870:	7bba      	ldrb	r2, [r7, #14]
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001878:	3b01      	subs	r3, #1
 800187a:	429a      	cmp	r2, r3
 800187c:	dbef      	blt.n	800185e <Parser_ProcessByte+0x6e>

		//checks CRC
		if(crc == parser.buffer[parser.index - 1])
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	429a      	cmp	r2, r3
 800188e:	d102      	bne.n	8001896 <Parser_ProcessByte+0xa6>
			handleCommand(parser.buffer); //transfers command sequence to the handler
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <Parser_ProcessByte+0xb0>)
 8001892:	f7fe ffff 	bl	8000894 <handleCommand>

		Parser_Init(); //resets once full command is dispatched
 8001896:	f7ff ff9f 	bl	80017d8 <Parser_Init>
	}

}
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000160 	.word	0x20000160

080018a4 <SHT40_Init>:
 */

#include "sht40.h"

HAL_StatusTypeDef  SHT40_Init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	//soft-reset
	uint8_t cmd = SHT40_SOFT_RESET_CMD;
 80018ac:	2394      	movs	r3, #148	@ 0x94
 80018ae:	73fb      	strb	r3, [r7, #15]

	//sending command to sensor
	if(HAL_I2C_Master_Transmit(hi2c, SHT40_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 80018b0:	f107 020f 	add.w	r2, r7, #15
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	2188      	movs	r1, #136	@ 0x88
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f001 ff50 	bl	8003764 <HAL_I2C_Master_Transmit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SHT40_Init+0x2a>
		return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e003      	b.n	80018d6 <SHT40_Init+0x32>

	//wait for reset completion
	HAL_Delay(2);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f000 fe5a 	bl	8002588 <HAL_Delay>

	return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <SHT40_MeasureRequest>:

HAL_StatusTypeDef SHT40_MeasureRequest(I2C_HandleTypeDef *hi2c)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	6078      	str	r0, [r7, #4]
	uint8_t cmd = SHT40_CMD_MEASURE;
 80018e6:	23fd      	movs	r3, #253	@ 0xfd
 80018e8:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_Master_Transmit(hi2c, SHT40_ADDR, &cmd, 1, HAL_MAX_DELAY) != HAL_OK)
 80018ea:	f107 020f 	add.w	r2, r7, #15
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	2188      	movs	r1, #136	@ 0x88
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 ff33 	bl	8003764 <HAL_I2C_Master_Transmit>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SHT40_MeasureRequest+0x2a>
		return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <SHT40_MeasureRequest+0x2c>

	return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <SHT40_Read>:

HAL_StatusTypeDef SHT40_Read(I2C_HandleTypeDef *hi2c, SHT40_Data *data)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af02      	add	r7, sp, #8
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
	uint8_t rx_buffer[6];	//2 bytes for temperature, 1 for CRC, 2 bytes for humidity, 1 for CRC

	//reading measurements
	if(HAL_I2C_Master_Receive(hi2c, SHT40_ADDR, rx_buffer, 6, HAL_MAX_DELAY) != HAL_OK)
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2306      	movs	r3, #6
 8001928:	2188      	movs	r1, #136	@ 0x88
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f002 f818 	bl	8003960 <HAL_I2C_Master_Receive>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SHT40_Read+0x28>
		return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e010      	b.n	800195c <SHT40_Read+0x4a>

	//fixing out-of-range conversions
	if (data -> humidity < 0.0f) data -> humidity = 0.0f;
	if (data -> humidity >100.0f) data -> humidity = 100.0f;*/

	data -> temperature = (uint16_t)(rx_buffer[0] << 8) | rx_buffer[1];					//raw temperature (before applying formula, ignore CRC, MSB first)
 800193a:	7a3b      	ldrb	r3, [r7, #8]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29b      	uxth	r3, r3
 8001940:	7a7a      	ldrb	r2, [r7, #9]
 8001942:	4313      	orrs	r3, r2
 8001944:	b29a      	uxth	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	801a      	strh	r2, [r3, #0]
	data -> humidity = (uint16_t)(rx_buffer[3] << 8) | rx_buffer[4];					//raw humidity (before applying formula, ignore CRC, MSB first)
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b29b      	uxth	r3, r3
 8001950:	7b3a      	ldrb	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	805a      	strh	r2, [r3, #2]

	return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_MspInit+0x5c>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a14      	ldr	r2, [pc, #80]	@ (80019c0 <HAL_MspInit+0x5c>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_MspInit+0x5c>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_MspInit+0x5c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_MspInit+0x5c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_MspInit+0x5c>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_MspInit+0x60>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_MspInit+0x60>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 fd9a 	bl	8002550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <DMA1_Channel2_IRQHandler+0x10>)
 8001a26:	f001 f84f 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200001cc 	.word	0x200001cc

08001a34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <DMA1_Channel4_IRQHandler+0x10>)
 8001a3a:	f001 f845 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000260 	.word	0x20000260

08001a48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Channel5_IRQHandler+0x10>)
 8001a4e:	f001 f83b 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002a4 	.word	0x200002a4

08001a5c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <DMA1_Channel6_IRQHandler+0x10>)
 8001a62:	f001 f831 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200000e0 	.word	0x200000e0

08001a70 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <DMA1_Channel7_IRQHandler+0x10>)
 8001a76:	f001 f827 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000009c 	.word	0x2000009c

08001a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM2_IRQHandler+0x10>)
 8001a8a:	f006 fb85 	bl	8008198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000184 	.word	0x20000184

08001a98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <I2C1_EV_IRQHandler+0x10>)
 8001a9e:	f002 fd39 	bl	8004514 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000048 	.word	0x20000048

08001aac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <I2C1_ER_IRQHandler+0x10>)
 8001ab2:	f002 fea0 	bl	80047f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000048 	.word	0x20000048

08001ac0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <USART1_IRQHandler+0x10>)
 8001ac6:	f006 ff9d 	bl	8008a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000218 	.word	0x20000218

08001ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b06:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001b12:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b14:	2263      	movs	r2, #99	@ 0x63
 8001b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b26:	f006 fa25 	bl	8007f74 <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b30:	f7ff fd20 	bl	8001574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b42:	f006 fc19 	bl	8008378 <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b4c:	f7ff fd12 	bl	8001574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_TIM2_Init+0x94>)
 8001b5e:	f006 fdfb 	bl	8008758 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f7ff fd04 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000184 	.word	0x20000184

08001b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b88:	d13b      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_TIM_Base_MspInit+0x94>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <HAL_TIM_Base_MspInit+0x94>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_TIM_Base_MspInit+0x94>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c14 <HAL_TIM_Base_MspInit+0x9c>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bae:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001bb4:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc0:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc8:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bd8:	f000 fe08 	bl	80027ec <HAL_DMA_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001be2:	f7ff fcc7 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bea:	621a      	str	r2, [r3, #32]
 8001bec:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_TIM_Base_MspInit+0x98>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f000 fdc1 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 fdda 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	200001cc 	.word	0x200001cc
 8001c14:	4002001c 	.word	0x4002001c

08001c18 <setSamplingFrequency>:
uint16_t sampling_freq = 100;			//default frequency
RTC_DateTypeDef date = {0};
RTC_TimeTypeDef time = {0};

void setSamplingFrequency(uint16_t hz)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
	//avoids out-of-range frequencies
	if((hz == 0) || (hz > 400)) return;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d046      	beq.n	8001cb6 <setSamplingFrequency+0x9e>
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001c2e:	d842      	bhi.n	8001cb6 <setSamplingFrequency+0x9e>

	sampling_freq = hz;
 8001c30:	4a23      	ldr	r2, [pc, #140]	@ (8001cc0 <setSamplingFrequency+0xa8>)
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	8013      	strh	r3, [r2, #0]

	//clock frequency, prescaler and auto-reload register values
	uint32_t timer_clock = HAL_RCC_GetHCLKFreq();								//72 MHz clock
 8001c36:	f005 fa39 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 8001c3a:	6178      	str	r0, [r7, #20]
	uint16_t prescaler = htim2.Init.Prescaler;									//(7199)
 8001c3c:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	827b      	strh	r3, [r7, #18]
	uint32_t timer_freq = timer_clock / (prescaler + 1);						//10 kHz
 8001c42:	8a7b      	ldrh	r3, [r7, #18]
 8001c44:	3301      	adds	r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
	uint16_t arr = (timer_freq / hz) - 1;										//Auto-Reload Register value calculation
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	817b      	strh	r3, [r7, #10]

	__HAL_TIM_DISABLE(&htim2);
 8001c5e:	4b19      	ldr	r3, [pc, #100]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <setSamplingFrequency+0x76>
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	f240 4344 	movw	r3, #1092	@ 0x444
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <setSamplingFrequency+0x76>
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	897a      	ldrh	r2, [r7, #10]
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c96:	897b      	ldrh	r3, [r7, #10]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c9a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(&htim2);
 8001ca4:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <setSamplingFrequency+0xac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e000      	b.n	8001cb8 <setSamplingFrequency+0xa0>
	if((hz == 0) || (hz > 400)) return;
 8001cb6:	bf00      	nop
}
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000000c 	.word	0x2000000c
 8001cc4:	20000184 	.word	0x20000184

08001cc8 <decodeHz>:

uint16_t decodeHz(uint8_t data)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	switch(data)
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b70      	cmp	r3, #112	@ 0x70
 8001cd6:	d022      	beq.n	8001d1e <decodeHz+0x56>
 8001cd8:	2b70      	cmp	r3, #112	@ 0x70
 8001cda:	dc23      	bgt.n	8001d24 <decodeHz+0x5c>
 8001cdc:	2b60      	cmp	r3, #96	@ 0x60
 8001cde:	d01c      	beq.n	8001d1a <decodeHz+0x52>
 8001ce0:	2b60      	cmp	r3, #96	@ 0x60
 8001ce2:	dc1f      	bgt.n	8001d24 <decodeHz+0x5c>
 8001ce4:	2b50      	cmp	r3, #80	@ 0x50
 8001ce6:	d016      	beq.n	8001d16 <decodeHz+0x4e>
 8001ce8:	2b50      	cmp	r3, #80	@ 0x50
 8001cea:	dc1b      	bgt.n	8001d24 <decodeHz+0x5c>
 8001cec:	2b40      	cmp	r3, #64	@ 0x40
 8001cee:	d010      	beq.n	8001d12 <decodeHz+0x4a>
 8001cf0:	2b40      	cmp	r3, #64	@ 0x40
 8001cf2:	dc17      	bgt.n	8001d24 <decodeHz+0x5c>
 8001cf4:	2b30      	cmp	r3, #48	@ 0x30
 8001cf6:	d00a      	beq.n	8001d0e <decodeHz+0x46>
 8001cf8:	2b30      	cmp	r3, #48	@ 0x30
 8001cfa:	dc13      	bgt.n	8001d24 <decodeHz+0x5c>
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d002      	beq.n	8001d06 <decodeHz+0x3e>
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d002      	beq.n	8001d0a <decodeHz+0x42>
 8001d04:	e00e      	b.n	8001d24 <decodeHz+0x5c>
	{
		case 0x10: return 1; break;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00d      	b.n	8001d26 <decodeHz+0x5e>
		case 0x20: return 10; break;
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	e00b      	b.n	8001d26 <decodeHz+0x5e>
		case 0x30: return 25; break;
 8001d0e:	2319      	movs	r3, #25
 8001d10:	e009      	b.n	8001d26 <decodeHz+0x5e>
		case 0x40: return 50; break;
 8001d12:	2332      	movs	r3, #50	@ 0x32
 8001d14:	e007      	b.n	8001d26 <decodeHz+0x5e>
		case 0x50: return 100; break;
 8001d16:	2364      	movs	r3, #100	@ 0x64
 8001d18:	e005      	b.n	8001d26 <decodeHz+0x5e>
		case 0x60: return 200; break;
 8001d1a:	23c8      	movs	r3, #200	@ 0xc8
 8001d1c:	e003      	b.n	8001d26 <decodeHz+0x5e>
		case 0x70: return 400; break;
 8001d1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001d22:	e000      	b.n	8001d26 <decodeHz+0x5e>

		default: return 100;
 8001d24:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <decodeODR>:

uint8_t decodeODR(uint8_t data)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	switch(data)
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b70      	cmp	r3, #112	@ 0x70
 8001d3e:	d022      	beq.n	8001d86 <decodeODR+0x56>
 8001d40:	2b70      	cmp	r3, #112	@ 0x70
 8001d42:	dc22      	bgt.n	8001d8a <decodeODR+0x5a>
 8001d44:	2b60      	cmp	r3, #96	@ 0x60
 8001d46:	d01c      	beq.n	8001d82 <decodeODR+0x52>
 8001d48:	2b60      	cmp	r3, #96	@ 0x60
 8001d4a:	dc1e      	bgt.n	8001d8a <decodeODR+0x5a>
 8001d4c:	2b50      	cmp	r3, #80	@ 0x50
 8001d4e:	d016      	beq.n	8001d7e <decodeODR+0x4e>
 8001d50:	2b50      	cmp	r3, #80	@ 0x50
 8001d52:	dc1a      	bgt.n	8001d8a <decodeODR+0x5a>
 8001d54:	2b40      	cmp	r3, #64	@ 0x40
 8001d56:	d010      	beq.n	8001d7a <decodeODR+0x4a>
 8001d58:	2b40      	cmp	r3, #64	@ 0x40
 8001d5a:	dc16      	bgt.n	8001d8a <decodeODR+0x5a>
 8001d5c:	2b30      	cmp	r3, #48	@ 0x30
 8001d5e:	d00a      	beq.n	8001d76 <decodeODR+0x46>
 8001d60:	2b30      	cmp	r3, #48	@ 0x30
 8001d62:	dc12      	bgt.n	8001d8a <decodeODR+0x5a>
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d002      	beq.n	8001d6e <decodeODR+0x3e>
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d002      	beq.n	8001d72 <decodeODR+0x42>
 8001d6c:	e00d      	b.n	8001d8a <decodeODR+0x5a>
	{
		case 0x10: return 0x01; break;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <decodeODR+0x5c>
		case 0x20: return 0x02; break;
 8001d72:	2302      	movs	r3, #2
 8001d74:	e00a      	b.n	8001d8c <decodeODR+0x5c>
		case 0x30: return 0x03; break;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e008      	b.n	8001d8c <decodeODR+0x5c>
		case 0x40: return 0x04; break;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <decodeODR+0x5c>
		case 0x50: return 0x05; break;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e004      	b.n	8001d8c <decodeODR+0x5c>
		case 0x60: return 0x06; break;
 8001d82:	2306      	movs	r3, #6
 8001d84:	e002      	b.n	8001d8c <decodeODR+0x5c>
		case 0x70: return 0x07; break;
 8001d86:	2307      	movs	r3, #7
 8001d88:	e000      	b.n	8001d8c <decodeODR+0x5c>

		default: return 0x05;
 8001d8a:	2305      	movs	r3, #5
	}
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
	...

08001d98 <setTimeAndDate>:

void setTimeAndDate(uint8_t day, uint8_t month, uint8_t year, uint8_t hour, uint8_t min, uint8_t sec)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	4603      	mov	r3, r0
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	460b      	mov	r3, r1
 8001db0:	717b      	strb	r3, [r7, #5]
 8001db2:	4613      	mov	r3, r2
 8001db4:	713b      	strb	r3, [r7, #4]
	date.Date = day;
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <setTimeAndDate+0x60>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	7093      	strb	r3, [r2, #2]
	date.Month = month;
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001df8 <setTimeAndDate+0x60>)
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	7053      	strb	r3, [r2, #1]
	date.Year = year;
 8001dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <setTimeAndDate+0x60>)
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	70d3      	strb	r3, [r2, #3]

	time.Hours = hour;
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001dfc <setTimeAndDate+0x64>)
 8001dca:	793b      	ldrb	r3, [r7, #4]
 8001dcc:	7013      	strb	r3, [r2, #0]
	time.Minutes = min;
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <setTimeAndDate+0x64>)
 8001dd0:	7e3b      	ldrb	r3, [r7, #24]
 8001dd2:	7053      	strb	r3, [r2, #1]
	time.Seconds = sec;
 8001dd4:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <setTimeAndDate+0x64>)
 8001dd6:	7f3b      	ldrb	r3, [r7, #28]
 8001dd8:	7093      	strb	r3, [r2, #2]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <setTimeAndDate+0x64>)
 8001dde:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <setTimeAndDate+0x68>)
 8001de0:	f005 fbac 	bl	800753c <HAL_RTC_SetTime>

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001de4:	2200      	movs	r2, #0
 8001de6:	4904      	ldr	r1, [pc, #16]	@ (8001df8 <setTimeAndDate+0x60>)
 8001de8:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <setTimeAndDate+0x68>)
 8001dea:	f005 fd17 	bl	800781c <HAL_RTC_SetDate>

}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000210 	.word	0x20000210
 8001dfc:	20000214 	.word	0x20000214
 8001e00:	20000130 	.word	0x20000130

08001e04 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <MX_USART1_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_USART1_UART_Init+0x4c>)
 8001e3c:	f006 fcfc 	bl	8008838 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f7ff fb95 	bl	8001574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000218 	.word	0x20000218
 8001e54:	40013800 	.word	0x40013800

08001e58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a48      	ldr	r2, [pc, #288]	@ (8001f94 <HAL_UART_MspInit+0x13c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	f040 8088 	bne.w	8001f8a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	4a46      	ldr	r2, [pc, #280]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6193      	str	r3, [r2, #24]
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4a40      	ldr	r2, [pc, #256]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6193      	str	r3, [r2, #24]
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f98 <HAL_UART_MspInit+0x140>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4837      	ldr	r0, [pc, #220]	@ (8001f9c <HAL_UART_MspInit+0x144>)
 8001ec0:	f001 f942 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4830      	ldr	r0, [pc, #192]	@ (8001f9c <HAL_UART_MspInit+0x144>)
 8001eda:	f001 f935 	bl	8003148 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ede:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001ee0:	4a30      	ldr	r2, [pc, #192]	@ (8001fa4 <HAL_UART_MspInit+0x14c>)
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f02:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001f0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f10:	4823      	ldr	r0, [pc, #140]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001f12:	f000 fc6b 	bl	80027ec <HAL_DMA_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001f1c:	f7ff fb2a 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001f24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f26:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_UART_MspInit+0x148>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fac <HAL_UART_MspInit+0x154>)
 8001f30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f5e:	4812      	ldr	r0, [pc, #72]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f60:	f000 fc44 	bl	80027ec <HAL_DMA_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001f6a:	f7ff fb03 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <HAL_UART_MspInit+0x150>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2025      	movs	r0, #37	@ 0x25
 8001f80:	f000 fbfd 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f84:	2025      	movs	r0, #37	@ 0x25
 8001f86:	f000 fc16 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	20000260 	.word	0x20000260
 8001fa4:	40020044 	.word	0x40020044
 8001fa8:	200002a4 	.word	0x200002a4
 8001fac:	40020058 	.word	0x40020058

08001fb0 <computeCRC>:
#include "flash_utils.h"
#include "callbacks.h"


uint8_t computeCRC(const uint8_t* data, uint8_t len)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < (len - 1); i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73bb      	strb	r3, [r7, #14]
 8001fc4:	e009      	b.n	8001fda <computeCRC+0x2a>
		crc += data[i];	//overflows on purpose (it is a mod 256 checksum)
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 1); i++)
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	73bb      	strb	r3, [r7, #14]
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf0      	blt.n	8001fc6 <computeCRC+0x16>

	return crc;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <Send_ACK>:

void Send_ACK(uint8_t cmd_byte)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	static uint8_t frame[4];

	frame[0] = cmd_byte + 0x80;
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	3b80      	subs	r3, #128	@ 0x80
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <Send_ACK+0x50>)
 8002002:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x01;
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <Send_ACK+0x50>)
 8002006:	2201      	movs	r2, #1
 8002008:	705a      	strb	r2, [r3, #1]
	frame[2] = 0x00;
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <Send_ACK+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	709a      	strb	r2, [r3, #2]
	frame[3] = (frame[0] + frame[1] + frame[2]) & 0xFF;
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <Send_ACK+0x50>)
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <Send_ACK+0x50>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	4413      	add	r3, r2
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <Send_ACK+0x50>)
 800201e:	789b      	ldrb	r3, [r3, #2]
 8002020:	4413      	add	r3, r2
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <Send_ACK+0x50>)
 8002026:	70da      	strb	r2, [r3, #3]

	tx_busy = 1;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <Send_ACK+0x54>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 800202e:	2204      	movs	r2, #4
 8002030:	4903      	ldr	r1, [pc, #12]	@ (8002040 <Send_ACK+0x50>)
 8002032:	4805      	ldr	r0, [pc, #20]	@ (8002048 <Send_ACK+0x58>)
 8002034:	f006 fc50 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200002e8 	.word	0x200002e8
 8002044:	20000038 	.word	0x20000038
 8002048:	20000218 	.word	0x20000218

0800204c <Send_Status>:

void Send_Status(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	static uint8_t frame[18];
	//int16_t temp = (int16_t)(T_i * 10.0f); //useful in order to avoid float types, using int
	//int16_t humidity = (int16_t)(H_i * 10.0f);

	frame[0] = 0x35 + 0x80;
 8002050:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <Send_Status+0xf8>)
 8002052:	22b5      	movs	r2, #181	@ 0xb5
 8002054:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x0F;
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <Send_Status+0xf8>)
 8002058:	220f      	movs	r2, #15
 800205a:	705a      	strb	r2, [r3, #1]

	//checks if LIS3DHTR is present
	frame[2] = ((whoami == 0x33) ? 0x01 : 0x00);
 800205c:	4b3a      	ldr	r3, [pc, #232]	@ (8002148 <Send_Status+0xfc>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b33      	cmp	r3, #51	@ 0x33
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	4b35      	ldr	r3, [pc, #212]	@ (8002144 <Send_Status+0xf8>)
 800206e:	709a      	strb	r2, [r3, #2]

	frame[3] = (uint8_t)(env.temperature & 0xFF);				//LSB
 8002070:	4b36      	ldr	r3, [pc, #216]	@ (800214c <Send_Status+0x100>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <Send_Status+0xf8>)
 8002078:	70da      	strb	r2, [r3, #3]
	frame[4] = (uint8_t)((env.temperature >> 8) & 0xFF);		//MSB
 800207a:	4b34      	ldr	r3, [pc, #208]	@ (800214c <Send_Status+0x100>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	b29b      	uxth	r3, r3
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <Send_Status+0xf8>)
 8002086:	711a      	strb	r2, [r3, #4]

	frame[5] = (uint8_t)(env.humidity & 0xFF);
 8002088:	4b30      	ldr	r3, [pc, #192]	@ (800214c <Send_Status+0x100>)
 800208a:	885b      	ldrh	r3, [r3, #2]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <Send_Status+0xf8>)
 8002090:	715a      	strb	r2, [r3, #5]
	frame[6] = (uint8_t)((env.humidity >> 8) & 0xFF);
 8002092:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <Send_Status+0x100>)
 8002094:	885b      	ldrh	r3, [r3, #2]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <Send_Status+0xf8>)
 800209e:	719a      	strb	r2, [r3, #6]

	frame[7] = fullscale_set;
 80020a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002150 <Send_Status+0x104>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b27      	ldr	r3, [pc, #156]	@ (8002144 <Send_Status+0xf8>)
 80020a6:	71da      	strb	r2, [r3, #7]
	frame[8] = datarate_set;
 80020a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002154 <Send_Status+0x108>)
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <Send_Status+0xf8>)
 80020ae:	721a      	strb	r2, [r3, #8]
	frame[9] = enabled_axes_set;
 80020b0:	4b29      	ldr	r3, [pc, #164]	@ (8002158 <Send_Status+0x10c>)
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <Send_Status+0xf8>)
 80020b6:	725a      	strb	r2, [r3, #9]
	frame[10] = (stream_enabled ? 0x01 : 0x00);
 80020b8:	4b28      	ldr	r3, [pc, #160]	@ (800215c <Send_Status+0x110>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <Send_Status+0xf8>)
 80020ca:	729a      	strb	r2, [r3, #10]

	//A_mt or A_ms?
	frame[11] = (uint8_t)(A_ms.x & 0xFF);
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <Send_Status+0x114>)
 80020ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <Send_Status+0xf8>)
 80020d6:	72da      	strb	r2, [r3, #11]
	frame[12] = (uint8_t)((A_ms.x >> 8) & 0xFF);
 80020d8:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <Send_Status+0x114>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020de:	121b      	asrs	r3, r3, #8
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <Send_Status+0xf8>)
 80020e6:	731a      	strb	r2, [r3, #12]

	frame[13] = (uint8_t)(A_ms.y & 0xFF);
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <Send_Status+0x114>)
 80020ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <Send_Status+0xf8>)
 80020f2:	735a      	strb	r2, [r3, #13]
	frame[14] = (uint8_t)((A_ms.y >> 8) & 0xFF);
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <Send_Status+0x114>)
 80020f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020fa:	121b      	asrs	r3, r3, #8
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <Send_Status+0xf8>)
 8002102:	739a      	strb	r2, [r3, #14]

	frame[15] = (uint8_t)(A_ms.z & 0xFF);
 8002104:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <Send_Status+0x114>)
 8002106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <Send_Status+0xf8>)
 800210e:	73da      	strb	r2, [r3, #15]
	frame[16] = (uint8_t)((A_ms.z >> 8) & 0xFF);
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <Send_Status+0x114>)
 8002112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002116:	121b      	asrs	r3, r3, #8
 8002118:	b21b      	sxth	r3, r3
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <Send_Status+0xf8>)
 800211e:	741a      	strb	r2, [r3, #16]

	frame[17] = computeCRC(frame, sizeof(frame));
 8002120:	2112      	movs	r1, #18
 8002122:	4808      	ldr	r0, [pc, #32]	@ (8002144 <Send_Status+0xf8>)
 8002124:	f7ff ff44 	bl	8001fb0 <computeCRC>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <Send_Status+0xf8>)
 800212e:	745a      	strb	r2, [r3, #17]

	tx_busy = 1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <Send_Status+0x118>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 8002136:	2212      	movs	r2, #18
 8002138:	4902      	ldr	r1, [pc, #8]	@ (8002144 <Send_Status+0xf8>)
 800213a:	480b      	ldr	r0, [pc, #44]	@ (8002168 <Send_Status+0x11c>)
 800213c:	f006 fbcc 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200002ec 	.word	0x200002ec
 8002148:	20000124 	.word	0x20000124
 800214c:	2000015c 	.word	0x2000015c
 8002150:	20000003 	.word	0x20000003
 8002154:	20000002 	.word	0x20000002
 8002158:	20000004 	.word	0x20000004
 800215c:	2000003a 	.word	0x2000003a
 8002160:	20000154 	.word	0x20000154
 8002164:	20000038 	.word	0x20000038
 8002168:	20000218 	.word	0x20000218

0800216c <Send_AccelSample>:

void Send_AccelSample(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	static uint8_t frame[9];

	frame[0] = 0x37 + 0x80;
 8002170:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <Send_AccelSample+0x88>)
 8002172:	22b7      	movs	r2, #183	@ 0xb7
 8002174:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x06;
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <Send_AccelSample+0x88>)
 8002178:	2206      	movs	r2, #6
 800217a:	705a      	strb	r2, [r3, #1]

	frame[2] = (uint8_t)(A_i.x & 0xFF);
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <Send_AccelSample+0x8c>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <Send_AccelSample+0x88>)
 8002186:	709a      	strb	r2, [r3, #2]
	frame[3] = (uint8_t)((A_i.x >> 8) & 0xFF);
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <Send_AccelSample+0x8c>)
 800218a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218e:	121b      	asrs	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <Send_AccelSample+0x88>)
 8002196:	70da      	strb	r2, [r3, #3]

	frame[4] = (uint8_t)(A_i.y & 0xFF);
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <Send_AccelSample+0x8c>)
 800219a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <Send_AccelSample+0x88>)
 80021a2:	711a      	strb	r2, [r3, #4]
	frame[5] = (uint8_t)((A_i.y >> 8) & 0xFF);
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <Send_AccelSample+0x8c>)
 80021a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021aa:	121b      	asrs	r3, r3, #8
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <Send_AccelSample+0x88>)
 80021b2:	715a      	strb	r2, [r3, #5]

	frame[6] = (uint8_t)(A_i.z & 0xFF);
 80021b4:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <Send_AccelSample+0x8c>)
 80021b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <Send_AccelSample+0x88>)
 80021be:	719a      	strb	r2, [r3, #6]
	frame[7] = (uint8_t)((A_i.z >> 8) & 0xFF);
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <Send_AccelSample+0x8c>)
 80021c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021c6:	121b      	asrs	r3, r3, #8
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <Send_AccelSample+0x88>)
 80021ce:	71da      	strb	r2, [r3, #7]

	frame[8] = computeCRC(frame, sizeof(frame));;
 80021d0:	2109      	movs	r1, #9
 80021d2:	4808      	ldr	r0, [pc, #32]	@ (80021f4 <Send_AccelSample+0x88>)
 80021d4:	f7ff feec 	bl	8001fb0 <computeCRC>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <Send_AccelSample+0x88>)
 80021de:	721a      	strb	r2, [r3, #8]

	tx_busy = 1;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <Send_AccelSample+0x90>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 80021e6:	2209      	movs	r2, #9
 80021e8:	4902      	ldr	r1, [pc, #8]	@ (80021f4 <Send_AccelSample+0x88>)
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <Send_AccelSample+0x94>)
 80021ec:	f006 fb74 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000300 	.word	0x20000300
 80021f8:	20000144 	.word	0x20000144
 80021fc:	20000038 	.word	0x20000038
 8002200:	20000218 	.word	0x20000218

08002204 <Send_AccelSample_Once>:

void Send_AccelSample_Once(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	static uint8_t frame[9];

	frame[0] = 0x39 + 0x80;
 8002208:	4b20      	ldr	r3, [pc, #128]	@ (800228c <Send_AccelSample_Once+0x88>)
 800220a:	22b9      	movs	r2, #185	@ 0xb9
 800220c:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x06;
 800220e:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <Send_AccelSample_Once+0x88>)
 8002210:	2206      	movs	r2, #6
 8002212:	705a      	strb	r2, [r3, #1]

	frame[2] = (uint8_t)(A_i.x & 0xFF);
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 8002216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <Send_AccelSample_Once+0x88>)
 800221e:	709a      	strb	r2, [r3, #2]
	frame[3] = (uint8_t)((A_i.x >> 8) & 0xFF);
 8002220:	4b1b      	ldr	r3, [pc, #108]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 8002222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002226:	121b      	asrs	r3, r3, #8
 8002228:	b21b      	sxth	r3, r3
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <Send_AccelSample_Once+0x88>)
 800222e:	70da      	strb	r2, [r3, #3]

	frame[4] = (uint8_t)(A_i.y & 0xFF);
 8002230:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 8002232:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <Send_AccelSample_Once+0x88>)
 800223a:	711a      	strb	r2, [r3, #4]
	frame[5] = (uint8_t)((A_i.y >> 8) & 0xFF);
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 800223e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002242:	121b      	asrs	r3, r3, #8
 8002244:	b21b      	sxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <Send_AccelSample_Once+0x88>)
 800224a:	715a      	strb	r2, [r3, #5]

	frame[6] = (uint8_t)(A_i.z & 0xFF);
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 800224e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <Send_AccelSample_Once+0x88>)
 8002256:	719a      	strb	r2, [r3, #6]
	frame[7] = (uint8_t)((A_i.z >> 8) & 0xFF);
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <Send_AccelSample_Once+0x8c>)
 800225a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800225e:	121b      	asrs	r3, r3, #8
 8002260:	b21b      	sxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <Send_AccelSample_Once+0x88>)
 8002266:	71da      	strb	r2, [r3, #7]

	frame[8] = computeCRC(frame, sizeof(frame));;
 8002268:	2109      	movs	r1, #9
 800226a:	4808      	ldr	r0, [pc, #32]	@ (800228c <Send_AccelSample_Once+0x88>)
 800226c:	f7ff fea0 	bl	8001fb0 <computeCRC>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <Send_AccelSample_Once+0x88>)
 8002276:	721a      	strb	r2, [r3, #8]

	tx_busy = 1;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <Send_AccelSample_Once+0x90>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 800227e:	2209      	movs	r2, #9
 8002280:	4902      	ldr	r1, [pc, #8]	@ (800228c <Send_AccelSample_Once+0x88>)
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <Send_AccelSample_Once+0x94>)
 8002284:	f006 fb28 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000030c 	.word	0x2000030c
 8002290:	20000144 	.word	0x20000144
 8002294:	20000038 	.word	0x20000038
 8002298:	20000218 	.word	0x20000218

0800229c <Send_MaxA_ms>:

void Send_MaxA_ms(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	static uint8_t frame[15];

	frame[0] = 0x40 + 0x80;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022a2:	22c0      	movs	r2, #192	@ 0xc0
 80022a4:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x0C;
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022a8:	220c      	movs	r2, #12
 80022aa:	705a      	strb	r2, [r3, #1]

	frame[2] = (uint8_t)(A_ms.x & 0xFF);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b27      	ldr	r3, [pc, #156]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022b6:	709a      	strb	r2, [r3, #2]
	frame[3] = (uint8_t)((A_ms.x >> 8) & 0xFF);
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	121b      	asrs	r3, r3, #8
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022c6:	70da      	strb	r2, [r3, #3]

	frame[4] = (uint8_t)(A_ms.y & 0xFF);
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022d2:	711a      	strb	r2, [r3, #4]
	frame[5] = (uint8_t)((A_ms.y >> 8) & 0xFF);
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022da:	121b      	asrs	r3, r3, #8
 80022dc:	b21b      	sxth	r3, r3
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022e2:	715a      	strb	r2, [r3, #5]

	frame[6] = (uint8_t)(A_ms.z & 0xFF);
 80022e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022ee:	719a      	strb	r2, [r3, #6]
	frame[7] = (uint8_t)((A_ms.z >> 8) & 0xFF);
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <Send_MaxA_ms+0xbc>)
 80022f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022f6:	121b      	asrs	r3, r3, #8
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b15      	ldr	r3, [pc, #84]	@ (8002354 <Send_MaxA_ms+0xb8>)
 80022fe:	71da      	strb	r2, [r3, #7]

	frame[8] = (uint8_t)(recordedDate.Date);
 8002300:	4b16      	ldr	r3, [pc, #88]	@ (800235c <Send_MaxA_ms+0xc0>)
 8002302:	789a      	ldrb	r2, [r3, #2]
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <Send_MaxA_ms+0xb8>)
 8002306:	721a      	strb	r2, [r3, #8]
	frame[9] = (uint8_t)(recordedDate.Month);
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <Send_MaxA_ms+0xc0>)
 800230a:	785a      	ldrb	r2, [r3, #1]
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <Send_MaxA_ms+0xb8>)
 800230e:	725a      	strb	r2, [r3, #9]
	frame[10] = (uint8_t)(recordedDate.Year);
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <Send_MaxA_ms+0xc0>)
 8002312:	78da      	ldrb	r2, [r3, #3]
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <Send_MaxA_ms+0xb8>)
 8002316:	729a      	strb	r2, [r3, #10]

	frame[11] = (uint8_t)(recordedTime.Hours);
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <Send_MaxA_ms+0xc4>)
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <Send_MaxA_ms+0xb8>)
 800231e:	72da      	strb	r2, [r3, #11]
	frame[12] = (uint8_t)(recordedTime.Minutes);
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <Send_MaxA_ms+0xc4>)
 8002322:	785a      	ldrb	r2, [r3, #1]
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <Send_MaxA_ms+0xb8>)
 8002326:	731a      	strb	r2, [r3, #12]
	frame[13] = (uint8_t)(recordedTime.Seconds);
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <Send_MaxA_ms+0xc4>)
 800232a:	789a      	ldrb	r2, [r3, #2]
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <Send_MaxA_ms+0xb8>)
 800232e:	735a      	strb	r2, [r3, #13]

	frame[14] = computeCRC(frame, sizeof(frame));
 8002330:	210f      	movs	r1, #15
 8002332:	4808      	ldr	r0, [pc, #32]	@ (8002354 <Send_MaxA_ms+0xb8>)
 8002334:	f7ff fe3c 	bl	8001fb0 <computeCRC>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <Send_MaxA_ms+0xb8>)
 800233e:	739a      	strb	r2, [r3, #14]

	tx_busy = 1;
 8002340:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <Send_MaxA_ms+0xc8>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 8002346:	220f      	movs	r2, #15
 8002348:	4902      	ldr	r1, [pc, #8]	@ (8002354 <Send_MaxA_ms+0xb8>)
 800234a:	4807      	ldr	r0, [pc, #28]	@ (8002368 <Send_MaxA_ms+0xcc>)
 800234c:	f006 fac4 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000318 	.word	0x20000318
 8002358:	20000154 	.word	0x20000154
 800235c:	20000040 	.word	0x20000040
 8002360:	20000044 	.word	0x20000044
 8002364:	20000038 	.word	0x20000038
 8002368:	20000218 	.word	0x20000218

0800236c <Send_MaxA_mt>:

void Send_MaxA_mt(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	static uint8_t frame[9];

	frame[0] = 0x41 + 0x80;
 8002370:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <Send_MaxA_mt+0x88>)
 8002372:	22c1      	movs	r2, #193	@ 0xc1
 8002374:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x06;
 8002376:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <Send_MaxA_mt+0x88>)
 8002378:	2206      	movs	r2, #6
 800237a:	705a      	strb	r2, [r3, #1]

	frame[2] = (uint8_t)(A_mt.x & 0xFF);
 800237c:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 800237e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <Send_MaxA_mt+0x88>)
 8002386:	709a      	strb	r2, [r3, #2]
	frame[3] = (uint8_t)((A_mt.x >> 8) & 0xFF);
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 800238a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238e:	121b      	asrs	r3, r3, #8
 8002390:	b21b      	sxth	r3, r3
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <Send_MaxA_mt+0x88>)
 8002396:	70da      	strb	r2, [r3, #3]

	frame[4] = (uint8_t)(A_mt.y & 0xFF);
 8002398:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 800239a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023a2:	711a      	strb	r2, [r3, #4]
	frame[5] = (uint8_t)((A_mt.y >> 8) & 0xFF);
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 80023a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023aa:	121b      	asrs	r3, r3, #8
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023b2:	715a      	strb	r2, [r3, #5]

	frame[6] = (uint8_t)(A_mt.z & 0xFF);
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 80023b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023be:	719a      	strb	r2, [r3, #6]
	frame[7] = (uint8_t)((A_mt.z >> 8) & 0xFF);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <Send_MaxA_mt+0x8c>)
 80023c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023c6:	121b      	asrs	r3, r3, #8
 80023c8:	b21b      	sxth	r3, r3
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023ce:	71da      	strb	r2, [r3, #7]

	frame[8] = computeCRC(frame, sizeof(frame));
 80023d0:	2109      	movs	r1, #9
 80023d2:	4808      	ldr	r0, [pc, #32]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023d4:	f7ff fdec 	bl	8001fb0 <computeCRC>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023de:	721a      	strb	r2, [r3, #8]

	tx_busy = 1;
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <Send_MaxA_mt+0x90>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 80023e6:	2209      	movs	r2, #9
 80023e8:	4902      	ldr	r1, [pc, #8]	@ (80023f4 <Send_MaxA_mt+0x88>)
 80023ea:	4805      	ldr	r0, [pc, #20]	@ (8002400 <Send_MaxA_mt+0x94>)
 80023ec:	f006 fa74 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000328 	.word	0x20000328
 80023f8:	2000014c 	.word	0x2000014c
 80023fc:	20000038 	.word	0x20000038
 8002400:	20000218 	.word	0x20000218

08002404 <Send_EnvData>:

void Send_EnvData(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	static uint8_t frame[7];

	frame[0] = 0x42 + 0x80;
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <Send_EnvData+0x64>)
 800240a:	22c2      	movs	r2, #194	@ 0xc2
 800240c:	701a      	strb	r2, [r3, #0]
	frame[1] = 0x04;
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <Send_EnvData+0x64>)
 8002410:	2204      	movs	r2, #4
 8002412:	705a      	strb	r2, [r3, #1]

	frame[2] = (uint8_t)(env.temperature & 0xFF);				//LSB
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <Send_EnvData+0x68>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <Send_EnvData+0x64>)
 800241c:	709a      	strb	r2, [r3, #2]
	frame[3] = (uint8_t)((env.temperature >> 8) & 0xFF);		//MSB
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <Send_EnvData+0x68>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <Send_EnvData+0x64>)
 800242a:	70da      	strb	r2, [r3, #3]

	frame[4] = (uint8_t)(env.humidity & 0xFF);
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <Send_EnvData+0x68>)
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <Send_EnvData+0x64>)
 8002434:	711a      	strb	r2, [r3, #4]
	frame[5] = (uint8_t)((env.humidity >> 8) & 0xFF);
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <Send_EnvData+0x68>)
 8002438:	885b      	ldrh	r3, [r3, #2]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	b29b      	uxth	r3, r3
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <Send_EnvData+0x64>)
 8002442:	715a      	strb	r2, [r3, #5]

	frame[6] = computeCRC(frame, sizeof(frame));
 8002444:	2107      	movs	r1, #7
 8002446:	4808      	ldr	r0, [pc, #32]	@ (8002468 <Send_EnvData+0x64>)
 8002448:	f7ff fdb2 	bl	8001fb0 <computeCRC>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <Send_EnvData+0x64>)
 8002452:	719a      	strb	r2, [r3, #6]

	tx_busy = 1;
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <Send_EnvData+0x6c>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, frame, sizeof(frame));
 800245a:	2207      	movs	r2, #7
 800245c:	4902      	ldr	r1, [pc, #8]	@ (8002468 <Send_EnvData+0x64>)
 800245e:	4805      	ldr	r0, [pc, #20]	@ (8002474 <Send_EnvData+0x70>)
 8002460:	f006 fa3a 	bl	80088d8 <HAL_UART_Transmit_DMA>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000334 	.word	0x20000334
 800246c:	2000015c 	.word	0x2000015c
 8002470:	20000038 	.word	0x20000038
 8002474:	20000218 	.word	0x20000218

08002478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002478:	f7ff fb2c 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480b      	ldr	r0, [pc, #44]	@ (80024ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800247e:	490c      	ldr	r1, [pc, #48]	@ (80024b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a09      	ldr	r2, [pc, #36]	@ (80024b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002494:	4c09      	ldr	r4, [pc, #36]	@ (80024bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a2:	f007 f9b3 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a6:	f7fe ffb1 	bl	800140c <main>
  bx lr
 80024aa:	4770      	bx	lr
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80024b4:	080098b4 	.word	0x080098b4
  ldr r2, =_sbss
 80024b8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80024bc:	20000360 	.word	0x20000360

080024c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_2_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_Init+0x28>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	@ (80024ec <HAL_Init+0x28>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 f947 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f000 f808 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7ff fa40 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40022000 	.word	0x40022000

080024f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_InitTick+0x54>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <HAL_InitTick+0x58>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002506:	fbb3 f3f1 	udiv	r3, r3, r1
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f95f 	bl	80027d2 <HAL_SYSTICK_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00e      	b.n	800253c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d80a      	bhi.n	800253a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002524:	2200      	movs	r2, #0
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800252c:	f000 f927 	bl	800277e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <HAL_InitTick+0x5c>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000008 	.word	0x20000008
 8002548:	20000014 	.word	0x20000014
 800254c:	20000010 	.word	0x20000010

08002550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <HAL_IncTick+0x1c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_IncTick+0x20>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a03      	ldr	r2, [pc, #12]	@ (8002570 <HAL_IncTick+0x20>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000014 	.word	0x20000014
 8002570:	2000033c 	.word	0x2000033c

08002574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b02      	ldr	r3, [pc, #8]	@ (8002584 <HAL_GetTick+0x10>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	2000033c 	.word	0x2000033c

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fff0 	bl	8002574 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffe0 	bl	8002574 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000014 	.word	0x20000014

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4906      	ldr	r1, [pc, #24]	@ (8002668 <__NVIC_EnableIRQ+0x34>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	@ (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	@ (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	@ 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002734:	d301      	bcc.n	800273a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <SysTick_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002742:	210f      	movs	r1, #15
 8002744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002748:	f7ff ff90 	bl	800266c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <SysTick_Config+0x40>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <SysTick_Config+0x40>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff2d 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff42 	bl	8002618 <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff90 	bl	80026c0 <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff5f 	bl	800266c <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff35 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa2 	bl	8002724 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e043      	b.n	800288a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <HAL_DMA_Init+0xa8>)
 800280a:	4413      	add	r3, r2
 800280c:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <HAL_DMA_Init+0xac>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <HAL_DMA_Init+0xb0>)
 800281e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002836:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800283a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	bffdfff8 	.word	0xbffdfff8
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	40020000 	.word	0x40020000

080028a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_DMA_Start_IT+0x20>
 80028bc:	2302      	movs	r3, #2
 80028be:	e04b      	b.n	8002958 <HAL_DMA_Start_IT+0xb8>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d13a      	bne.n	800294a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f9f8 	bl	8002cee <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 020e 	orr.w	r2, r2, #14
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00f      	b.n	8002938 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0204 	bic.w	r2, r2, #4
 8002926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 020a 	orr.w	r2, r2, #10
 8002936:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e005      	b.n	8002956 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002956:	7dfb      	ldrb	r3, [r7, #23]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d008      	beq.n	800298a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e020      	b.n	80029cc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 020e 	bic.w	r2, r2, #14
 8002998:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f202 	lsl.w	r2, r1, r2
 80029b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d005      	beq.n	80029fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e051      	b.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <HAL_DMA_Abort_IT+0xd4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_Abort_IT+0xa2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <HAL_DMA_Abort_IT+0xd8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x9e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab4 <HAL_DMA_Abort_IT+0xdc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x98>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <HAL_DMA_Abort_IT+0xe0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	@ (8002abc <HAL_DMA_Abort_IT+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x8c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <HAL_DMA_Abort_IT+0xe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_Abort_IT+0x86>
 8002a58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a76:	2310      	movs	r3, #16
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ac4 <HAL_DMA_Abort_IT+0xec>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    } 
  }
  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	4002001c 	.word	0x4002001c
 8002ab4:	40020030 	.word	0x40020030
 8002ab8:	40020044 	.word	0x40020044
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	4002006c 	.word	0x4002006c
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04f      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xc8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d04a      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a66      	ldr	r2, [pc, #408]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d029      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xae>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a65      	ldr	r2, [pc, #404]	@ (8002cbc <HAL_DMA_IRQHandler+0x1f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xaa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a63      	ldr	r2, [pc, #396]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xa4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a62      	ldr	r2, [pc, #392]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d012      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x9e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a60      	ldr	r2, [pc, #384]	@ (8002cc8 <HAL_DMA_IRQHandler+0x200>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x98>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ccc <HAL_DMA_IRQHandler+0x204>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x92>
 8002b54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b58:	e00e      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b5e:	e00b      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b64:	e008      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b6a:	e005      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b70:	e002      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b72:	2340      	movs	r3, #64	@ 0x40
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b76:	2304      	movs	r3, #4
 8002b78:	4a55      	ldr	r2, [pc, #340]	@ (8002cd0 <HAL_DMA_IRQHandler+0x208>)
 8002b7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8094 	beq.w	8002cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	e08e      	b.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2202      	movs	r2, #2
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d056      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x186>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d051      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 020a 	bic.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d029      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x166>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <HAL_DMA_IRQHandler+0x1f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x162>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a35      	ldr	r2, [pc, #212]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x15c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a34      	ldr	r2, [pc, #208]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d012      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x156>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_DMA_IRQHandler+0x200>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x150>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <HAL_DMA_IRQHandler+0x204>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d102      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x14a>
 8002c0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c10:	e00e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	e00b      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1c:	e008      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c22:	e005      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c28:	e002      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e000      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <HAL_DMA_IRQHandler+0x208>)
 8002c32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d034      	beq.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c4c:	e02f      	b.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2208      	movs	r2, #8
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d028      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 020e 	bic.w	r2, r2, #14
 8002c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
    }
  }
  return;
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
}
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40020008 	.word	0x40020008
 8002cbc:	4002001c 	.word	0x4002001c
 8002cc0:	40020030 	.word	0x40020030
 8002cc4:	40020044 	.word	0x40020044
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	4002006c 	.word	0x4002006c
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ce2:	b2db      	uxtb	r3, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d108      	bne.n	8002d2e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d2c:	e007      	b.n	8002d3e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
}
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d62:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <HAL_FLASH_Program+0xd8>)
 8002d64:	7e1b      	ldrb	r3, [r3, #24]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_FLASH_Program+0x26>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e054      	b.n	8002e18 <HAL_FLASH_Program+0xd0>
 8002d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e20 <HAL_FLASH_Program+0xd8>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d78:	f000 f8a8 	bl	8002ecc <FLASH_WaitForLastOperation>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d144      	bne.n	8002e10 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	757b      	strb	r3, [r7, #21]
 8002d90:	e007      	b.n	8002da2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d102      	bne.n	8002d9e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	757b      	strb	r3, [r7, #21]
 8002d9c:	e001      	b.n	8002da2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	75bb      	strb	r3, [r7, #22]
 8002da6:	e02d      	b.n	8002e04 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002da8:	7dbb      	ldrb	r3, [r7, #22]
 8002daa:	005a      	lsls	r2, r3, #1
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	eb02 0c03 	add.w	ip, r2, r3
 8002db2:	7dbb      	ldrb	r3, [r7, #22]
 8002db4:	0119      	lsls	r1, r3, #4
 8002db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dba:	f1c1 0620 	rsb	r6, r1, #32
 8002dbe:	f1a1 0020 	sub.w	r0, r1, #32
 8002dc2:	fa22 f401 	lsr.w	r4, r2, r1
 8002dc6:	fa03 f606 	lsl.w	r6, r3, r6
 8002dca:	4334      	orrs	r4, r6
 8002dcc:	fa23 f000 	lsr.w	r0, r3, r0
 8002dd0:	4304      	orrs	r4, r0
 8002dd2:	fa23 f501 	lsr.w	r5, r3, r1
 8002dd6:	b2a3      	uxth	r3, r4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4660      	mov	r0, ip
 8002ddc:	f000 f85a 	bl	8002e94 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002de0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002de4:	f000 f872 	bl	8002ecc <FLASH_WaitForLastOperation>
 8002de8:	4603      	mov	r3, r0
 8002dea:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002dec:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <HAL_FLASH_Program+0xdc>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <HAL_FLASH_Program+0xdc>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002dfe:	7dbb      	ldrb	r3, [r7, #22]
 8002e00:	3301      	adds	r3, #1
 8002e02:	75bb      	strb	r3, [r7, #22]
 8002e04:	7dba      	ldrb	r2, [r7, #22]
 8002e06:	7d7b      	ldrb	r3, [r7, #21]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d3cd      	bcc.n	8002da8 <HAL_FLASH_Program+0x60>
 8002e0c:	e000      	b.n	8002e10 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002e0e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_FLASH_Program+0xd8>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	761a      	strb	r2, [r3, #24]

  return status;
 8002e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e20:	20000340 	.word	0x20000340
 8002e24:	40022000 	.word	0x40022000

08002e28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <HAL_FLASH_Unlock+0x40>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_FLASH_Unlock+0x40>)
 8002e40:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <HAL_FLASH_Unlock+0x44>)
 8002e42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002e44:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <HAL_FLASH_Unlock+0x40>)
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <HAL_FLASH_Unlock+0x48>)
 8002e48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_FLASH_Unlock+0x40>)
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	45670123 	.word	0x45670123
 8002e70:	cdef89ab 	.word	0xcdef89ab

08002e74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <HAL_FLASH_Lock+0x1c>)
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <HAL_FLASH_Lock+0x1c>)
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000

08002e94 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <FLASH_Program_HalfWord+0x30>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <FLASH_Program_HalfWord+0x34>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <FLASH_Program_HalfWord+0x34>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	801a      	strh	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000340 	.word	0x20000340
 8002ec8:	40022000 	.word	0x40022000

08002ecc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff fb4e 	bl	8002574 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002eda:	e010      	b.n	8002efe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ee2:	d00c      	beq.n	8002efe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <FLASH_WaitForLastOperation+0x2e>
 8002eea:	f7ff fb43 	bl	8002574 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d201      	bcs.n	8002efe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e025      	b.n	8002f4a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e8      	bne.n	8002edc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f18:	2220      	movs	r2, #32
 8002f1a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f34:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <FLASH_WaitForLastOperation+0x88>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002f40:	f000 f80a 	bl	8002f58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40022000 	.word	0x40022000

08002f58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f62:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f6e:	4b21      	ldr	r3, [pc, #132]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002f8e:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002f98:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <FLASH_SetErrorCode+0x9c>)
 8002fb8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f240 1201 	movw	r2, #257	@ 0x101
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d106      	bne.n	8002fde <FLASH_SetErrorCode+0x86>
 8002fd0:	4b07      	ldr	r3, [pc, #28]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a06      	ldr	r2, [pc, #24]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	61d3      	str	r3, [r2, #28]
}  
 8002fdc:	e002      	b.n	8002fe4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002fde:	4a04      	ldr	r2, [pc, #16]	@ (8002ff0 <FLASH_SetErrorCode+0x98>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60d3      	str	r3, [r2, #12]
}  
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	20000340 	.word	0x20000340

08002ff8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800300a:	4b2f      	ldr	r3, [pc, #188]	@ (80030c8 <HAL_FLASHEx_Erase+0xd0>)
 800300c:	7e1b      	ldrb	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_FLASHEx_Erase+0x1e>
 8003012:	2302      	movs	r3, #2
 8003014:	e053      	b.n	80030be <HAL_FLASHEx_Erase+0xc6>
 8003016:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <HAL_FLASHEx_Erase+0xd0>)
 8003018:	2201      	movs	r2, #1
 800301a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d116      	bne.n	8003052 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003024:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003028:	f7ff ff50 	bl	8002ecc <FLASH_WaitForLastOperation>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d141      	bne.n	80030b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003032:	2001      	movs	r0, #1
 8003034:	f000 f84c 	bl	80030d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003038:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800303c:	f7ff ff46 	bl	8002ecc <FLASH_WaitForLastOperation>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003044:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <HAL_FLASHEx_Erase+0xd4>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a20      	ldr	r2, [pc, #128]	@ (80030cc <HAL_FLASHEx_Erase+0xd4>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6113      	str	r3, [r2, #16]
 8003050:	e031      	b.n	80030b6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003052:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003056:	f7ff ff39 	bl	8002ecc <FLASH_WaitForLastOperation>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d12a      	bne.n	80030b6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003066:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	e019      	b.n	80030a4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003070:	68b8      	ldr	r0, [r7, #8]
 8003072:	f000 f849 	bl	8003108 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003076:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800307a:	f7ff ff27 	bl	8002ecc <FLASH_WaitForLastOperation>
 800307e:	4603      	mov	r3, r0
 8003080:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_FLASHEx_Erase+0xd4>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	4a11      	ldr	r2, [pc, #68]	@ (80030cc <HAL_FLASHEx_Erase+0xd4>)
 8003088:	f023 0302 	bic.w	r3, r3, #2
 800308c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	601a      	str	r2, [r3, #0]
            break;
 800309a:	e00c      	b.n	80030b6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030a2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	029a      	lsls	r2, r3, #10
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4413      	add	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3dc      	bcc.n	8003070 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <HAL_FLASHEx_Erase+0xd0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	761a      	strb	r2, [r3, #24]

  return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000340 	.word	0x20000340
 80030cc:	40022000 	.word	0x40022000

080030d0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <FLASH_MassErase+0x30>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80030de:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <FLASH_MassErase+0x34>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <FLASH_MassErase+0x34>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <FLASH_MassErase+0x34>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <FLASH_MassErase+0x34>)
 80030f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030f4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000340 	.word	0x20000340
 8003104:	40022000 	.word	0x40022000

08003108 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <FLASH_PageErase+0x38>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003116:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <FLASH_PageErase+0x3c>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <FLASH_PageErase+0x3c>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <FLASH_PageErase+0x3c>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <FLASH_PageErase+0x3c>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4a05      	ldr	r2, [pc, #20]	@ (8003144 <FLASH_PageErase+0x3c>)
 800312e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003132:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000340 	.word	0x20000340
 8003144:	40022000 	.word	0x40022000

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b08b      	sub	sp, #44	@ 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	e169      	b.n	8003430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800315c:	2201      	movs	r2, #1
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 8158 	bne.w	800342a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a9a      	ldr	r2, [pc, #616]	@ (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05e      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003184:	4a98      	ldr	r2, [pc, #608]	@ (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d875      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 800318a:	4a98      	ldr	r2, [pc, #608]	@ (80033ec <HAL_GPIO_Init+0x2a4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d058      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003190:	4a96      	ldr	r2, [pc, #600]	@ (80033ec <HAL_GPIO_Init+0x2a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d86f      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 8003196:	4a96      	ldr	r2, [pc, #600]	@ (80033f0 <HAL_GPIO_Init+0x2a8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d052      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 800319c:	4a94      	ldr	r2, [pc, #592]	@ (80033f0 <HAL_GPIO_Init+0x2a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d869      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031a2:	4a94      	ldr	r2, [pc, #592]	@ (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04c      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031a8:	4a92      	ldr	r2, [pc, #584]	@ (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d863      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ae:	4a92      	ldr	r2, [pc, #584]	@ (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d046      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031b4:	4a90      	ldr	r2, [pc, #576]	@ (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d85d      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d82a      	bhi.n	8003214 <HAL_GPIO_Init+0xcc>
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d859      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031c2:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <HAL_GPIO_Init+0x80>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003243 	.word	0x08003243
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800322f 	.word	0x0800322f
 80031d4:	08003271 	.word	0x08003271
 80031d8:	08003277 	.word	0x08003277
 80031dc:	08003277 	.word	0x08003277
 80031e0:	08003277 	.word	0x08003277
 80031e4:	08003277 	.word	0x08003277
 80031e8:	08003277 	.word	0x08003277
 80031ec:	08003277 	.word	0x08003277
 80031f0:	08003277 	.word	0x08003277
 80031f4:	08003277 	.word	0x08003277
 80031f8:	08003277 	.word	0x08003277
 80031fc:	08003277 	.word	0x08003277
 8003200:	08003277 	.word	0x08003277
 8003204:	08003277 	.word	0x08003277
 8003208:	08003277 	.word	0x08003277
 800320c:	08003225 	.word	0x08003225
 8003210:	08003239 	.word	0x08003239
 8003214:	4a79      	ldr	r2, [pc, #484]	@ (80033fc <HAL_GPIO_Init+0x2b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800321a:	e02c      	b.n	8003276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e029      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e024      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	3308      	adds	r3, #8
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e01f      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	330c      	adds	r3, #12
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e01a      	b.n	8003278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800324a:	2304      	movs	r3, #4
 800324c:	623b      	str	r3, [r7, #32]
          break;
 800324e:	e013      	b.n	8003278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003258:	2308      	movs	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	611a      	str	r2, [r3, #16]
          break;
 8003262:	e009      	b.n	8003278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003264:	2308      	movs	r3, #8
 8003266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	615a      	str	r2, [r3, #20]
          break;
 800326e:	e003      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e000      	b.n	8003278 <HAL_GPIO_Init+0x130>
          break;
 8003276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2bff      	cmp	r3, #255	@ 0xff
 800327c:	d801      	bhi.n	8003282 <HAL_GPIO_Init+0x13a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_Init+0x13e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2bff      	cmp	r3, #255	@ 0xff
 800328c:	d802      	bhi.n	8003294 <HAL_GPIO_Init+0x14c>
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x152>
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	3b08      	subs	r3, #8
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	210f      	movs	r1, #15
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80b1 	beq.w	800342a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <HAL_GPIO_Init+0x2b8>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032e0:	4a48      	ldr	r2, [pc, #288]	@ (8003404 <HAL_GPIO_Init+0x2bc>)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a40      	ldr	r2, [pc, #256]	@ (8003408 <HAL_GPIO_Init+0x2c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <HAL_GPIO_Init+0x1ec>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <HAL_GPIO_Init+0x2c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00d      	beq.n	8003330 <HAL_GPIO_Init+0x1e8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3e      	ldr	r2, [pc, #248]	@ (8003410 <HAL_GPIO_Init+0x2c8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <HAL_GPIO_Init+0x1e4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3d      	ldr	r2, [pc, #244]	@ (8003414 <HAL_GPIO_Init+0x2cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_GPIO_Init+0x1e0>
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003328:	2304      	movs	r3, #4
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003334:	2300      	movs	r3, #0
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003346:	492f      	ldr	r1, [pc, #188]	@ (8003404 <HAL_GPIO_Init+0x2bc>)
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003360:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	492c      	ldr	r1, [pc, #176]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800336e:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	4928      	ldr	r1, [pc, #160]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003388:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	4922      	ldr	r1, [pc, #136]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003396:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	491e      	ldr	r1, [pc, #120]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4918      	ldr	r1, [pc, #96]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033be:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	4914      	ldr	r1, [pc, #80]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d021      	beq.n	800341c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	490e      	ldr	r1, [pc, #56]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e021      	b.n	800342a <HAL_GPIO_Init+0x2e2>
 80033e6:	bf00      	nop
 80033e8:	10320000 	.word	0x10320000
 80033ec:	10310000 	.word	0x10310000
 80033f0:	10220000 	.word	0x10220000
 80033f4:	10210000 	.word	0x10210000
 80033f8:	10120000 	.word	0x10120000
 80033fc:	10110000 	.word	0x10110000
 8003400:	40021000 	.word	0x40021000
 8003404:	40010000 	.word	0x40010000
 8003408:	40010800 	.word	0x40010800
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_GPIO_Init+0x304>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	43db      	mvns	r3, r3
 8003424:	4909      	ldr	r1, [pc, #36]	@ (800344c <HAL_GPIO_Init+0x304>)
 8003426:	4013      	ands	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f47f ae8e 	bne.w	800315c <HAL_GPIO_Init+0x14>
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	372c      	adds	r7, #44	@ 0x2c
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	041a      	lsls	r2, r3, #16
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43d9      	mvns	r1, r3
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	400b      	ands	r3, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	611a      	str	r2, [r3, #16]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e12b      	b.n	800371e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fcb0 	bl	8000e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	@ 0x24
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003518:	f003 fdd2 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 800351c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a81      	ldr	r2, [pc, #516]	@ (8003728 <HAL_I2C_Init+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d807      	bhi.n	8003538 <HAL_I2C_Init+0x84>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a80      	ldr	r2, [pc, #512]	@ (800372c <HAL_I2C_Init+0x278>)
 800352c:	4293      	cmp	r3, r2
 800352e:	bf94      	ite	ls
 8003530:	2301      	movls	r3, #1
 8003532:	2300      	movhi	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e006      	b.n	8003546 <HAL_I2C_Init+0x92>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a7d      	ldr	r2, [pc, #500]	@ (8003730 <HAL_I2C_Init+0x27c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0e7      	b.n	800371e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a78      	ldr	r2, [pc, #480]	@ (8003734 <HAL_I2C_Init+0x280>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9b      	lsrs	r3, r3, #18
 8003558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a6a      	ldr	r2, [pc, #424]	@ (8003728 <HAL_I2C_Init+0x274>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <HAL_I2C_Init+0xd4>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3301      	adds	r3, #1
 8003586:	e009      	b.n	800359c <HAL_I2C_Init+0xe8>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	4a69      	ldr	r2, [pc, #420]	@ (8003738 <HAL_I2C_Init+0x284>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	3301      	adds	r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	495c      	ldr	r1, [pc, #368]	@ (8003728 <HAL_I2C_Init+0x274>)
 80035b8:	428b      	cmp	r3, r1
 80035ba:	d819      	bhi.n	80035f0 <HAL_I2C_Init+0x13c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e59      	subs	r1, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035d0:	400b      	ands	r3, r1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_I2C_Init+0x138>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e59      	subs	r1, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ea:	e051      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035ec:	2304      	movs	r3, #4
 80035ee:	e04f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <HAL_I2C_Init+0x168>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e012      	b.n	8003642 <HAL_I2C_Init+0x18e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	0099      	lsls	r1, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Init+0x196>
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_I2C_Init+0x1bc>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e58      	subs	r0, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	440b      	add	r3, r1
 8003660:	fbb0 f3f3 	udiv	r3, r0, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e58      	subs	r0, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	0099      	lsls	r1, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	fbb0 f3f3 	udiv	r3, r0, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	6809      	ldr	r1, [r1, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6911      	ldr	r1, [r2, #16]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	000186a0 	.word	0x000186a0
 800372c:	001e847f 	.word	0x001e847f
 8003730:	003d08ff 	.word	0x003d08ff
 8003734:	431bde83 	.word	0x431bde83
 8003738:	10624dd3 	.word	0x10624dd3

0800373c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b80      	cmp	r3, #128	@ 0x80
 8003750:	d103      	bne.n	800375a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  }
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	817b      	strh	r3, [r7, #10]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7fe fefc 	bl	8002574 <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	f040 80e0 	bne.w	800394c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2319      	movs	r3, #25
 8003792:	2201      	movs	r2, #1
 8003794:	4970      	ldr	r1, [pc, #448]	@ (8003958 <HAL_I2C_Master_Transmit+0x1f4>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f002 fe38 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0d3      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2C_Master_Transmit+0x50>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0cc      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d007      	beq.n	80037da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2221      	movs	r2, #33	@ 0x21
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2210      	movs	r2, #16
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	893a      	ldrh	r2, [r7, #8]
 800380a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a50      	ldr	r2, [pc, #320]	@ (800395c <HAL_I2C_Master_Transmit+0x1f8>)
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f002 fa7c 	bl	8005d20 <I2C_MasterRequestWrite>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e08d      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003848:	e066      	b.n	8003918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f002 fef6 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	2b04      	cmp	r3, #4
 8003860:	d107      	bne.n	8003872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06b      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11b      	bne.n	80038ec <HAL_I2C_Master_Transmit+0x188>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6a39      	ldr	r1, [r7, #32]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f002 feed 	bl	80066d0 <I2C_WaitOnBTFFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	2b04      	cmp	r3, #4
 8003902:	d107      	bne.n	8003914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e01a      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d194      	bne.n	800384a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	00100002 	.word	0x00100002
 800395c:	ffff0000 	.word	0xffff0000

08003960 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	@ 0x30
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	460b      	mov	r3, r1
 800396e:	817b      	strh	r3, [r7, #10]
 8003970:	4613      	mov	r3, r2
 8003972:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7fe fdfc 	bl	8002574 <HAL_GetTick>
 800397c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	f040 824b 	bne.w	8003e22 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2319      	movs	r3, #25
 8003992:	2201      	movs	r2, #1
 8003994:	497f      	ldr	r1, [pc, #508]	@ (8003b94 <HAL_I2C_Master_Receive+0x234>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f002 fd38 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
 80039a4:	e23e      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_I2C_Master_Receive+0x54>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e237      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d007      	beq.n	80039da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2222      	movs	r2, #34	@ 0x22
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2210      	movs	r2, #16
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	893a      	ldrh	r2, [r7, #8]
 8003a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a5f      	ldr	r2, [pc, #380]	@ (8003b98 <HAL_I2C_Master_Receive+0x238>)
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a1c:	8979      	ldrh	r1, [r7, #10]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f002 f9fe 	bl	8005e24 <I2C_MasterRequestRead>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1f8      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d113      	bne.n	8003a62 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e1cc      	b.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d11e      	bne.n	8003aa8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7a:	b672      	cpsid	i
}
 8003a7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa4:	b662      	cpsie	i
}
 8003aa6:	e035      	b.n	8003b14 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d11e      	bne.n	8003aee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003abe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
}
 8003ac2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aea:	b662      	cpsie	i
}
 8003aec:	e012      	b.n	8003b14 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b14:	e172      	b.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	f200 811f 	bhi.w	8003d5e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d123      	bne.n	8003b70 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f002 fe49 	bl	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e173      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b6e:	e145      	b.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d152      	bne.n	8003c1e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4906      	ldr	r1, [pc, #24]	@ (8003b9c <HAL_I2C_Master_Receive+0x23c>)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f002 fc42 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e148      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
 8003b92:	bf00      	nop
 8003b94:	00100002 	.word	0x00100002
 8003b98:	ffff0000 	.word	0xffff0000
 8003b9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba0:	b672      	cpsid	i
}
 8003ba2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003be6:	b662      	cpsie	i
}
 8003be8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c1c:	e0ee      	b.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	2200      	movs	r2, #0
 8003c26:	4981      	ldr	r1, [pc, #516]	@ (8003e2c <HAL_I2C_Master_Receive+0x4cc>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f002 fbef 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0f5      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c48:	b672      	cpsid	i
}
 8003c4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e30 <HAL_I2C_Master_Receive+0x4d0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	4a6b      	ldr	r2, [pc, #428]	@ (8003e34 <HAL_I2C_Master_Receive+0x4d4>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0a1a      	lsrs	r2, r3, #8
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00da      	lsls	r2, r3, #3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d118      	bne.n	8003cd6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc6:	b662      	cpsie	i
}
 8003cc8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0a6      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d1d9      	bne.n	8003c98 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d26:	b662      	cpsie	i
}
 8003d28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d5c:	e04e      	b.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f002 fd2e 	bl	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e058      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d124      	bne.n	8003dfc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f47f ae88 	bne.w	8003b16 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	@ 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	00010004 	.word	0x00010004
 8003e30:	20000008 	.word	0x20000008
 8003e34:	14f8b589 	.word	0x14f8b589

08003e38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	4608      	mov	r0, r1
 8003e42:	4611      	mov	r1, r2
 8003e44:	461a      	mov	r2, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	817b      	strh	r3, [r7, #10]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	813b      	strh	r3, [r7, #8]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e52:	f7fe fb8f 	bl	8002574 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	f040 80d9 	bne.w	8004018 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	2319      	movs	r3, #25
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	496d      	ldr	r1, [pc, #436]	@ (8004024 <HAL_I2C_Mem_Write+0x1ec>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f002 facb 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0cc      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_Mem_Write+0x56>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0c5      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d007      	beq.n	8003eb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ec2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2221      	movs	r2, #33	@ 0x21
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2240      	movs	r2, #64	@ 0x40
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8004028 <HAL_I2C_Mem_Write+0x1f0>)
 8003ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef6:	88f8      	ldrh	r0, [r7, #6]
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f002 f85a 	bl	8005fc0 <I2C_RequestMemoryWrite>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d052      	beq.n	8003fb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e081      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f002 fb90 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e06b      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_I2C_Mem_Write+0x180>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d017      	beq.n	8003fb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	781a      	ldrb	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1aa      	bne.n	8003f16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f002 fb83 	bl	80066d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00d      	beq.n	8003fec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d107      	bne.n	8003fe8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e016      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000

0800402c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	4608      	mov	r0, r1
 8004036:	4611      	mov	r1, r2
 8004038:	461a      	mov	r2, r3
 800403a:	4603      	mov	r3, r0
 800403c:	817b      	strh	r3, [r7, #10]
 800403e:	460b      	mov	r3, r1
 8004040:	813b      	strh	r3, [r7, #8]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404a:	f7fe fa93 	bl	8002574 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	f040 8250 	bne.w	80044fe <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2319      	movs	r3, #25
 8004064:	2201      	movs	r2, #1
 8004066:	4982      	ldr	r1, [pc, #520]	@ (8004270 <HAL_I2C_Mem_Read+0x244>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f002 f9cf 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
 8004076:	e243      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_I2C_Mem_Read+0x5a>
 8004082:	2302      	movs	r3, #2
 8004084:	e23c      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d007      	beq.n	80040ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	@ 0x22
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a62      	ldr	r2, [pc, #392]	@ (8004274 <HAL_I2C_Mem_Read+0x248>)
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ee:	88f8      	ldrh	r0, [r7, #6]
 80040f0:	893a      	ldrh	r2, [r7, #8]
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4603      	mov	r3, r0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f001 fff4 	bl	80060ec <I2C_RequestMemoryRead>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1f8      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d113      	bne.n	800413e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e1cc      	b.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	2b01      	cmp	r3, #1
 8004144:	d11e      	bne.n	8004184 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004156:	b672      	cpsid	i
}
 8004158:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004180:	b662      	cpsie	i
}
 8004182:	e035      	b.n	80041f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	2b02      	cmp	r3, #2
 800418a:	d11e      	bne.n	80041ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800419c:	b672      	cpsid	i
}
 800419e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041c6:	b662      	cpsie	i
}
 80041c8:	e012      	b.n	80041f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041f0:	e172      	b.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	f200 811f 	bhi.w	800443a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	2b01      	cmp	r3, #1
 8004202:	d123      	bne.n	800424c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004206:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f002 fadb 	bl	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e173      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800424a:	e145      	b.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004250:	2b02      	cmp	r3, #2
 8004252:	d152      	bne.n	80042fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	2200      	movs	r2, #0
 800425c:	4906      	ldr	r1, [pc, #24]	@ (8004278 <HAL_I2C_Mem_Read+0x24c>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f002 f8d4 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e148      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
 800426e:	bf00      	nop
 8004270:	00100002 	.word	0x00100002
 8004274:	ffff0000 	.word	0xffff0000
 8004278:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800427c:	b672      	cpsid	i
}
 800427e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042c2:	b662      	cpsie	i
}
 80042c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042f8:	e0ee      	b.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004300:	2200      	movs	r2, #0
 8004302:	4981      	ldr	r1, [pc, #516]	@ (8004508 <HAL_I2C_Mem_Read+0x4dc>)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f002 f881 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0f5      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004324:	b672      	cpsid	i
}
 8004326:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800435a:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <HAL_I2C_Mem_Read+0x4e0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	08db      	lsrs	r3, r3, #3
 8004360:	4a6b      	ldr	r2, [pc, #428]	@ (8004510 <HAL_I2C_Mem_Read+0x4e4>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0a1a      	lsrs	r2, r3, #8
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	00da      	lsls	r2, r3, #3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	3b01      	subs	r3, #1
 8004378:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d118      	bne.n	80043b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043a2:	b662      	cpsie	i
}
 80043a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0a6      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d1d9      	bne.n	8004374 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004402:	b662      	cpsie	i
}
 8004404:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004438:	e04e      	b.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f002 f9c0 	bl	80067c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e058      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d124      	bne.n	80044d8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f47f ae88 	bne.w	80041f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	@ 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	00010004 	.word	0x00010004
 800450c:	20000008 	.word	0x20000008
 8004510:	14f8b589 	.word	0x14f8b589

08004514 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004534:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b10      	cmp	r3, #16
 8004542:	d003      	beq.n	800454c <HAL_I2C_EV_IRQHandler+0x38>
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	f040 80c1 	bne.w	80046ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_I2C_EV_IRQHandler+0x6e>
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800456c:	d003      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0x62>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004574:	d101      	bne.n	800457a <HAL_I2C_EV_IRQHandler+0x66>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x68>
 800457a:	2300      	movs	r3, #0
 800457c:	2b01      	cmp	r3, #1
 800457e:	f000 8132 	beq.w	80047e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_I2C_EV_IRQHandler+0x92>
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	0a5b      	lsrs	r3, r3, #9
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f002 f99e 	bl	80068da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fd99 	bl	80050d6 <I2C_Master_SB>
 80045a4:	e092      	b.n	80046cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	0a5b      	lsrs	r3, r3, #9
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fe0e 	bl	80051e0 <I2C_Master_ADD10>
 80045c4:	e082      	b.n	80046cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	0a5b      	lsrs	r3, r3, #9
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fe27 	bl	8005232 <I2C_Master_ADDR>
 80045e4:	e072      	b.n	80046cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03b      	beq.n	800466a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004600:	f000 80f3 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00f      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x11c>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	0a9b      	lsrs	r3, r3, #10
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <HAL_I2C_EV_IRQHandler+0x11c>
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9f1 	bl	8004a10 <I2C_MasterTransmit_TXE>
 800462e:	e04d      	b.n	80046cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80d6 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	0a5b      	lsrs	r3, r3, #9
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80cf 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800464c:	7bbb      	ldrb	r3, [r7, #14]
 800464e:	2b21      	cmp	r3, #33	@ 0x21
 8004650:	d103      	bne.n	800465a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa78 	bl	8004b48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004658:	e0c7      	b.n	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b40      	cmp	r3, #64	@ 0x40
 800465e:	f040 80c4 	bne.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fae6 	bl	8004c34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004668:	e0bf      	b.n	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004678:	f000 80b7 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00f      	beq.n	80046a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	0a9b      	lsrs	r3, r3, #10
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb5f 	bl	8004d64 <I2C_MasterReceive_RXNE>
 80046a6:	e011      	b.n	80046cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 809a 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	0a5b      	lsrs	r3, r3, #9
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8093 	beq.w	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fc15 	bl	8004ef4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ca:	e08e      	b.n	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80046cc:	e08d      	b.n	80047ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	e007      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x20e>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	0a5b      	lsrs	r3, r3, #9
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004718:	69b9      	ldr	r1, [r7, #24]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 ffe0 	bl	80056e0 <I2C_Slave_ADDR>
 8004720:	e066      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x22e>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f001 f81a 	bl	8005774 <I2C_Slave_STOPF>
 8004740:	e056      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004742:	7bbb      	ldrb	r3, [r7, #14]
 8004744:	2b21      	cmp	r3, #33	@ 0x21
 8004746:	d002      	beq.n	800474e <HAL_I2C_EV_IRQHandler+0x23a>
 8004748:	7bbb      	ldrb	r3, [r7, #14]
 800474a:	2b29      	cmp	r3, #41	@ 0x29
 800474c:	d125      	bne.n	800479a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00f      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x266>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a9b      	lsrs	r3, r3, #10
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_I2C_EV_IRQHandler+0x266>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fef8 	bl	8005568 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004778:	e039      	b.n	80047ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d033      	beq.n	80047ee <HAL_I2C_EV_IRQHandler+0x2da>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d02d      	beq.n	80047ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff25 	bl	80055e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004798:	e029      	b.n	80047ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00f      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	0a9b      	lsrs	r3, r3, #10
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 ff2f 	bl	8005622 <I2C_SlaveReceive_RXNE>
 80047c4:	e014      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 ff5d 	bl	800569e <I2C_SlaveReceive_BTF>
 80047e4:	e004      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b08a      	sub	sp, #40	@ 0x28
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004818:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_I2C_ER_IRQHandler+0x5e>
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004842:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	0a5b      	lsrs	r3, r3, #9
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <HAL_I2C_ER_IRQHandler+0x88>
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800487c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	0a9b      	lsrs	r3, r3, #10
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d03f      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x114>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d039      	beq.n	800490a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004896:	7efb      	ldrb	r3, [r7, #27]
 8004898:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048b0:	7ebb      	ldrb	r3, [r7, #26]
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d112      	bne.n	80048dc <HAL_I2C_ER_IRQHandler+0xe6>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10f      	bne.n	80048dc <HAL_I2C_ER_IRQHandler+0xe6>
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	2b21      	cmp	r3, #33	@ 0x21
 80048c0:	d008      	beq.n	80048d4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b29      	cmp	r3, #41	@ 0x29
 80048c6:	d005      	beq.n	80048d4 <HAL_I2C_ER_IRQHandler+0xde>
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b28      	cmp	r3, #40	@ 0x28
 80048cc:	d106      	bne.n	80048dc <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b21      	cmp	r3, #33	@ 0x21
 80048d2:	d103      	bne.n	80048dc <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f001 f87d 	bl	80059d4 <I2C_Slave_AF>
 80048da:	e016      	b.n	800490a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048ee:	7efb      	ldrb	r3, [r7, #27]
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d002      	beq.n	80048fa <HAL_I2C_ER_IRQHandler+0x104>
 80048f4:	7efb      	ldrb	r3, [r7, #27]
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d107      	bne.n	800490a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004908:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	0adb      	lsrs	r3, r3, #11
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <HAL_I2C_ER_IRQHandler+0x13e>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	f043 0308 	orr.w	r3, r3, #8
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004932:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f001 f8b8 	bl	8005abc <I2C_ITError>
  }
}
 800494c:	bf00      	nop
 800494e:	3728      	adds	r7, #40	@ 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
 80049a8:	4613      	mov	r3, r2
 80049aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d150      	bne.n	8004ad8 <I2C_MasterTransmit_TXE+0xc8>
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b21      	cmp	r3, #33	@ 0x21
 8004a3a:	d14d      	bne.n	8004ad8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d01d      	beq.n	8004a7e <I2C_MasterTransmit_TXE+0x6e>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d01a      	beq.n	8004a7e <I2C_MasterTransmit_TXE+0x6e>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a4e:	d016      	beq.n	8004a7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2211      	movs	r2, #17
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ff6c 	bl	8004954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7c:	e060      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d107      	bne.n	8004ac8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ff81 	bl	80049c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac6:	e03b      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff3f 	bl	8004954 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ad6:	e033      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b21      	cmp	r3, #33	@ 0x21
 8004adc:	d005      	beq.n	8004aea <I2C_MasterTransmit_TXE+0xda>
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d12d      	bne.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b22      	cmp	r3, #34	@ 0x22
 8004ae8:	d12a      	bne.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d108      	bne.n	8004b06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b04:	e01c      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b40      	cmp	r3, #64	@ 0x40
 8004b10:	d103      	bne.n	8004b1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f88e 	bl	8004c34 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b18:	e012      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b3e:	e7ff      	b.n	8004b40 <I2C_MasterTransmit_TXE+0x130>
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b21      	cmp	r3, #33	@ 0x21
 8004b60:	d164      	bne.n	8004c2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b90:	e04c      	b.n	8004c2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d01d      	beq.n	8004bd4 <I2C_MasterTransmit_BTF+0x8c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d01a      	beq.n	8004bd4 <I2C_MasterTransmit_BTF+0x8c>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ba4:	d016      	beq.n	8004bd4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2211      	movs	r2, #17
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fec1 	bl	8004954 <HAL_I2C_MasterTxCpltCallback>
}
 8004bd2:	e02b      	b.n	8004c2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004be2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d107      	bne.n	8004c1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fed6 	bl	80049c8 <HAL_I2C_MemTxCpltCallback>
}
 8004c1c:	e006      	b.n	8004c2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fe94 	bl	8004954 <HAL_I2C_MasterTxCpltCallback>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11d      	bne.n	8004c88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10b      	bne.n	8004c6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004c6a:	e077      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	121b      	asrs	r3, r3, #8
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c86:	e069      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10b      	bne.n	8004ca8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ca6:	e059      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d152      	bne.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b22      	cmp	r3, #34	@ 0x22
 8004cb4:	d10d      	bne.n	8004cd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cd0:	e044      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b21      	cmp	r3, #33	@ 0x21
 8004ce0:	d112      	bne.n	8004d08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d06:	e029      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d124      	bne.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b21      	cmp	r3, #33	@ 0x21
 8004d16:	d121      	bne.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fe3a 	bl	80049c8 <HAL_I2C_MemTxCpltCallback>
}
 8004d54:	e002      	b.n	8004d5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fe fcf0 	bl	800373c <I2C_Flush_DR>
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b22      	cmp	r3, #34	@ 0x22
 8004d76:	f040 80b9 	bne.w	8004eec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d921      	bls.n	8004dd2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	f040 8096 	bne.w	8004eec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004dd0:	e08c      	b.n	8004eec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d07f      	beq.n	8004eda <I2C_MasterReceive_RXNE+0x176>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <I2C_MasterReceive_RXNE+0x82>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d179      	bne.n	8004eda <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fcba 	bl	8006760 <I2C_WaitOnSTOPRequestThroughIT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d14c      	bne.n	8004e8c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d10a      	bne.n	8004e62 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fdbd 	bl	80049da <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e60:	e044      	b.n	8004eec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d002      	beq.n	8004e76 <I2C_MasterReceive_RXNE+0x112>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d103      	bne.n	8004e7e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e7c:	e002      	b.n	8004e84 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2212      	movs	r2, #18
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fd6e 	bl	8004966 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e8a:	e02f      	b.n	8004eec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fd8a 	bl	80049ec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ed8:	e008      	b.n	8004eec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee8:	605a      	str	r2, [r3, #4]
}
 8004eea:	e7ff      	b.n	8004eec <I2C_MasterReceive_RXNE+0x188>
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d11b      	bne.n	8004f44 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f42:	e0c4      	b.n	80050ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d129      	bne.n	8004fa2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d00a      	beq.n	8004f7a <I2C_MasterReceive_BTF+0x86>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d007      	beq.n	8004f7a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f78:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fa0:	e095      	b.n	80050ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d17d      	bne.n	80050a8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d002      	beq.n	8004fb8 <I2C_MasterReceive_BTF+0xc4>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d108      	bne.n	8004fca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e016      	b.n	8004ff8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d002      	beq.n	8004fd6 <I2C_MasterReceive_BTF+0xe2>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e007      	b.n	8004ff8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005052:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b40      	cmp	r3, #64	@ 0x40
 8005066:	d10a      	bne.n	800507e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fcaf 	bl	80049da <HAL_I2C_MemRxCpltCallback>
}
 800507c:	e027      	b.n	80050ce <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b08      	cmp	r3, #8
 800508a:	d002      	beq.n	8005092 <I2C_MasterReceive_BTF+0x19e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b20      	cmp	r3, #32
 8005090:	d103      	bne.n	800509a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
 8005098:	e002      	b.n	80050a0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2212      	movs	r2, #18
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff fc60 	bl	8004966 <HAL_I2C_MasterRxCpltCallback>
}
 80050a6:	e012      	b.n	80050ce <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050ce:	bf00      	nop
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b40      	cmp	r3, #64	@ 0x40
 80050e8:	d117      	bne.n	800511a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005102:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005104:	e067      	b.n	80051d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	611a      	str	r2, [r3, #16]
}
 8005118:	e05d      	b.n	80051d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005122:	d133      	bne.n	800518c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b21      	cmp	r3, #33	@ 0x21
 800512e:	d109      	bne.n	8005144 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	e008      	b.n	8005156 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <I2C_Master_SB+0x92>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d108      	bne.n	800517a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d032      	beq.n	80051d6 <I2C_Master_SB+0x100>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02d      	beq.n	80051d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005188:	605a      	str	r2, [r3, #4]
}
 800518a:	e024      	b.n	80051d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10e      	bne.n	80051b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005198:	b29b      	uxth	r3, r3
 800519a:	11db      	asrs	r3, r3, #7
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f003 0306 	and.w	r3, r3, #6
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f063 030f 	orn	r3, r3, #15
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
}
 80051b0:	e011      	b.n	80051d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	b29b      	uxth	r3, r3
 80051c0:	11db      	asrs	r3, r3, #7
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 0306 	and.w	r3, r3, #6
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f063 030e 	orn	r3, r3, #14
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <I2C_Master_ADD10+0x26>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <I2C_Master_ADD10+0x48>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005226:	605a      	str	r2, [r3, #4]
  }
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005232:	b480      	push	{r7}
 8005234:	b091      	sub	sp, #68	@ 0x44
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005240:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b22      	cmp	r3, #34	@ 0x22
 800525a:	f040 8174 	bne.w	8005546 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <I2C_Master_ADDR+0x54>
 8005266:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d10b      	bne.n	8005286 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526e:	2300      	movs	r3, #0
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	633b      	str	r3, [r7, #48]	@ 0x30
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	633b      	str	r3, [r7, #48]	@ 0x30
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	e16b      	b.n	800555e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528a:	2b00      	cmp	r3, #0
 800528c:	d11d      	bne.n	80052ca <I2C_Master_ADDR+0x98>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005296:	d118      	bne.n	80052ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005298:	2300      	movs	r3, #0
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80052c8:	e149      	b.n	800555e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e120      	b.n	800553e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	f040 808a 	bne.w	800541c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800530e:	d137      	bne.n	8005380 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800532e:	d113      	bne.n	8005358 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	e0f2      	b.n	800553e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	623b      	str	r3, [r7, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e0de      	b.n	800553e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005382:	2b08      	cmp	r3, #8
 8005384:	d02e      	beq.n	80053e4 <I2C_Master_ADDR+0x1b2>
 8005386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005388:	2b20      	cmp	r3, #32
 800538a:	d02b      	beq.n	80053e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538e:	2b12      	cmp	r3, #18
 8005390:	d102      	bne.n	8005398 <I2C_Master_ADDR+0x166>
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	2b01      	cmp	r3, #1
 8005396:	d125      	bne.n	80053e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	2b04      	cmp	r3, #4
 800539c:	d00e      	beq.n	80053bc <I2C_Master_ADDR+0x18a>
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d00b      	beq.n	80053bc <I2C_Master_ADDR+0x18a>
 80053a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d008      	beq.n	80053bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e007      	b.n	80053cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	e0ac      	b.n	800553e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e090      	b.n	800553e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d158      	bne.n	80054d8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005428:	2b04      	cmp	r3, #4
 800542a:	d021      	beq.n	8005470 <I2C_Master_ADDR+0x23e>
 800542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542e:	2b02      	cmp	r3, #2
 8005430:	d01e      	beq.n	8005470 <I2C_Master_ADDR+0x23e>
 8005432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005434:	2b10      	cmp	r3, #16
 8005436:	d01b      	beq.n	8005470 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005446:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e012      	b.n	8005496 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800547e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a4:	d14b      	bne.n	800553e <I2C_Master_ADDR+0x30c>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054ac:	d00b      	beq.n	80054c6 <I2C_Master_ADDR+0x294>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d008      	beq.n	80054c6 <I2C_Master_ADDR+0x294>
 80054b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d005      	beq.n	80054c6 <I2C_Master_ADDR+0x294>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d002      	beq.n	80054c6 <I2C_Master_ADDR+0x294>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d13b      	bne.n	800553e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	e032      	b.n	800553e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f6:	d117      	bne.n	8005528 <I2C_Master_ADDR+0x2f6>
 80054f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054fe:	d00b      	beq.n	8005518 <I2C_Master_ADDR+0x2e6>
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	2b01      	cmp	r3, #1
 8005504:	d008      	beq.n	8005518 <I2C_Master_ADDR+0x2e6>
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	2b08      	cmp	r3, #8
 800550a:	d005      	beq.n	8005518 <I2C_Master_ADDR+0x2e6>
 800550c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550e:	2b10      	cmp	r3, #16
 8005510:	d002      	beq.n	8005518 <I2C_Master_ADDR+0x2e6>
 8005512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005514:	2b20      	cmp	r3, #32
 8005516:	d107      	bne.n	8005528 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005526:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005544:	e00b      	b.n	800555e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
}
 800555c:	e7ff      	b.n	800555e <I2C_Master_ADDR+0x32c>
 800555e:	bf00      	nop
 8005560:	3744      	adds	r7, #68	@ 0x44
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005576:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02b      	beq.n	80055da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <I2C_SlaveTransmit_TXE+0x72>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b29      	cmp	r3, #41	@ 0x29
 80055b4:	d111      	bne.n	80055da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2221      	movs	r2, #33	@ 0x21
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2228      	movs	r2, #40	@ 0x28
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff f9cf 	bl	8004978 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d011      	beq.n	8005618 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005630:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02c      	beq.n	8005696 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d114      	bne.n	8005696 <I2C_SlaveReceive_RXNE+0x74>
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005670:	d111      	bne.n	8005696 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005680:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2222      	movs	r2, #34	@ 0x22
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2228      	movs	r2, #40	@ 0x28
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff f97a 	bl	800498a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d012      	beq.n	80056d6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056fa:	2b28      	cmp	r3, #40	@ 0x28
 80056fc:	d127      	bne.n	800574e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800570c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	089b      	lsrs	r3, r3, #2
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	81bb      	strh	r3, [r7, #12]
 8005730:	e002      	b.n	8005738 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005740:	89ba      	ldrh	r2, [r7, #12]
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff f928 	bl	800499c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800574c:	e00e      	b.n	800576c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005782:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005792:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005794:	2300      	movs	r3, #0
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d0:	d172      	bne.n	80058b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b22      	cmp	r3, #34	@ 0x22
 80057d6:	d002      	beq.n	80057de <I2C_Slave_STOPF+0x6a>
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b2a      	cmp	r3, #42	@ 0x2a
 80057dc:	d135      	bne.n	800584a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005810:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fa5c 	bl	8002cd4 <HAL_DMA_GetState>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d049      	beq.n	80058b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	4a69      	ldr	r2, [pc, #420]	@ (80059cc <I2C_Slave_STOPF+0x258>)
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd f8d2 	bl	80029d8 <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03d      	beq.n	80058b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005848:	e035      	b.n	80058b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	f043 0204 	orr.w	r2, r3, #4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800587c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fa26 	bl	8002cd4 <HAL_DMA_GetState>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d014      	beq.n	80058b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	4a4e      	ldr	r2, [pc, #312]	@ (80059cc <I2C_Slave_STOPF+0x258>)
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	4618      	mov	r0, r3
 800589c:	f7fd f89c 	bl	80029d8 <HAL_DMA_Abort_IT>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058b0:	4610      	mov	r0, r2
 80058b2:	4798      	blx	r3
 80058b4:	e000      	b.n	80058b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d03e      	beq.n	8005940 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d112      	bne.n	80058f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	2b40      	cmp	r3, #64	@ 0x40
 8005902:	d112      	bne.n	800592a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8b7 	bl	8005abc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800594e:	e039      	b.n	80059c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b2a      	cmp	r3, #42	@ 0x2a
 8005954:	d109      	bne.n	800596a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2228      	movs	r2, #40	@ 0x28
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f810 	bl	800498a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b28      	cmp	r3, #40	@ 0x28
 8005974:	d111      	bne.n	800599a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <I2C_Slave_STOPF+0x25c>)
 800597a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff f80f 	bl	80049b6 <HAL_I2C_ListenCpltCallback>
}
 8005998:	e014      	b.n	80059c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	2b22      	cmp	r3, #34	@ 0x22
 80059a0:	d002      	beq.n	80059a8 <I2C_Slave_STOPF+0x234>
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b22      	cmp	r3, #34	@ 0x22
 80059a6:	d10d      	bne.n	80059c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fe ffe3 	bl	800498a <HAL_I2C_SlaveRxCpltCallback>
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	080062bd 	.word	0x080062bd
 80059d0:	ffff0000 	.word	0xffff0000

080059d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d002      	beq.n	80059f6 <I2C_Slave_AF+0x22>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d129      	bne.n	8005a4a <I2C_Slave_AF+0x76>
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b28      	cmp	r3, #40	@ 0x28
 80059fa:	d126      	bne.n	8005a4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab8 <I2C_Slave_AF+0xe4>)
 8005a00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fe ffb7 	bl	80049b6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a48:	e031      	b.n	8005aae <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b21      	cmp	r3, #33	@ 0x21
 8005a4e:	d129      	bne.n	8005aa4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <I2C_Slave_AF+0xe4>)
 8005a54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2221      	movs	r2, #33	@ 0x21
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a94:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fd fe50 	bl	800373c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fe ff6b 	bl	8004978 <HAL_I2C_SlaveTxCpltCallback>
}
 8005aa2:	e004      	b.n	8005aae <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aac:	615a      	str	r2, [r3, #20]
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	ffff0000 	.word	0xffff0000

08005abc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ad2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ad4:	7bbb      	ldrb	r3, [r7, #14]
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d002      	beq.n	8005ae0 <I2C_ITError+0x24>
 8005ada:	7bbb      	ldrb	r3, [r7, #14]
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d10a      	bne.n	8005af6 <I2C_ITError+0x3a>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b22      	cmp	r3, #34	@ 0x22
 8005ae4:	d107      	bne.n	8005af6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005afc:	2b28      	cmp	r3, #40	@ 0x28
 8005afe:	d107      	bne.n	8005b10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2228      	movs	r2, #40	@ 0x28
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b0e:	e015      	b.n	8005b3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1e:	d00a      	beq.n	8005b36 <I2C_ITError+0x7a>
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b60      	cmp	r3, #96	@ 0x60
 8005b24:	d007      	beq.n	8005b36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b4a:	d162      	bne.n	8005c12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d020      	beq.n	8005bac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6e:	4a6a      	ldr	r2, [pc, #424]	@ (8005d18 <I2C_ITError+0x25c>)
 8005b70:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc ff2e 	bl	80029d8 <HAL_DMA_Abort_IT>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8089 	beq.w	8005c96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	e074      	b.n	8005c96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb0:	4a59      	ldr	r2, [pc, #356]	@ (8005d18 <I2C_ITError+0x25c>)
 8005bb2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fc ff0d 	bl	80029d8 <HAL_DMA_Abort_IT>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d068      	beq.n	8005c96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b40      	cmp	r3, #64	@ 0x40
 8005bd0:	d10b      	bne.n	8005bea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4798      	blx	r3
 8005c10:	e041      	b.n	8005c96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b60      	cmp	r3, #96	@ 0x60
 8005c1c:	d125      	bne.n	8005c6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d10b      	bne.n	8005c52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0201 	bic.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe fecb 	bl	80049fe <HAL_I2C_AbortCpltCallback>
 8005c68:	e015      	b.n	8005c96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d10b      	bne.n	8005c90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fe feab 	bl	80049ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10e      	bne.n	8005cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d113      	bne.n	8005d10 <I2C_ITError+0x254>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b28      	cmp	r3, #40	@ 0x28
 8005cec:	d110      	bne.n	8005d10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <I2C_ITError+0x260>)
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fe fe53 	bl	80049b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	080062bd 	.word	0x080062bd
 8005d1c:	ffff0000 	.word	0xffff0000

08005d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d006      	beq.n	8005d4a <I2C_MasterRequestWrite+0x2a>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d003      	beq.n	8005d4a <I2C_MasterRequestWrite+0x2a>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d48:	d108      	bne.n	8005d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e00b      	b.n	8005d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	2b12      	cmp	r3, #18
 8005d62:	d107      	bne.n	8005d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fb43 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00d      	beq.n	8005da8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d9a:	d103      	bne.n	8005da4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e035      	b.n	8005e14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005db0:	d108      	bne.n	8005dc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dc0:	611a      	str	r2, [r3, #16]
 8005dc2:	e01b      	b.n	8005dfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dc4:	897b      	ldrh	r3, [r7, #10]
 8005dc6:	11db      	asrs	r3, r3, #7
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0306 	and.w	r3, r3, #6
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f063 030f 	orn	r3, r3, #15
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	490e      	ldr	r1, [pc, #56]	@ (8005e1c <I2C_MasterRequestWrite+0xfc>)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fb8c 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e010      	b.n	8005e14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4907      	ldr	r1, [pc, #28]	@ (8005e20 <I2C_MasterRequestWrite+0x100>)
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fb7c 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	00010008 	.word	0x00010008
 8005e20:	00010002 	.word	0x00010002

08005e24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	460b      	mov	r3, r1
 8005e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d006      	beq.n	8005e5e <I2C_MasterRequestRead+0x3a>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d003      	beq.n	8005e5e <I2C_MasterRequestRead+0x3a>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e5c:	d108      	bne.n	8005e70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	e00b      	b.n	8005e88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	2b11      	cmp	r3, #17
 8005e76:	d107      	bne.n	8005e88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fab9 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eae:	d103      	bne.n	8005eb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e079      	b.n	8005fb0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ec4:	d108      	bne.n	8005ed8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ec6:	897b      	ldrh	r3, [r7, #10]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	611a      	str	r2, [r3, #16]
 8005ed6:	e05f      	b.n	8005f98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ed8:	897b      	ldrh	r3, [r7, #10]
 8005eda:	11db      	asrs	r3, r3, #7
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0306 	and.w	r3, r3, #6
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f063 030f 	orn	r3, r3, #15
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4930      	ldr	r1, [pc, #192]	@ (8005fb8 <I2C_MasterRequestRead+0x194>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fb02 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e054      	b.n	8005fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f06:	897b      	ldrh	r3, [r7, #10]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4929      	ldr	r1, [pc, #164]	@ (8005fbc <I2C_MasterRequestRead+0x198>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 faf2 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e044      	b.n	8005fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fa57 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f72:	d103      	bne.n	8005f7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e017      	b.n	8005fb0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f80:	897b      	ldrh	r3, [r7, #10]
 8005f82:	11db      	asrs	r3, r3, #7
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0306 	and.w	r3, r3, #6
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f063 030e 	orn	r3, r3, #14
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4907      	ldr	r1, [pc, #28]	@ (8005fbc <I2C_MasterRequestRead+0x198>)
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 faae 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	00010008 	.word	0x00010008
 8005fbc:	00010002 	.word	0x00010002

08005fc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	817b      	strh	r3, [r7, #10]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	813b      	strh	r3, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 fa08 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006010:	d103      	bne.n	800601a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006018:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e05f      	b.n	80060de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800601e:	897b      	ldrh	r3, [r7, #10]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800602c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	492d      	ldr	r1, [pc, #180]	@ (80060e8 <I2C_RequestMemoryWrite+0x128>)
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fa63 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e04c      	b.n	80060de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605c:	6a39      	ldr	r1, [r7, #32]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 faee 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00d      	beq.n	8006086 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	2b04      	cmp	r3, #4
 8006070:	d107      	bne.n	8006082 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e02b      	b.n	80060de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	611a      	str	r2, [r3, #16]
 8006096:	e021      	b.n	80060dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006098:	893b      	ldrh	r3, [r7, #8]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a8:	6a39      	ldr	r1, [r7, #32]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fac8 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d107      	bne.n	80060ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e005      	b.n	80060de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	00010002 	.word	0x00010002

080060ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	817b      	strh	r3, [r7, #10]
 80060fe:	460b      	mov	r3, r1
 8006100:	813b      	strh	r3, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006114:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	2200      	movs	r2, #0
 800612e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f96a 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00d      	beq.n	800615a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800614c:	d103      	bne.n	8006156 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e0aa      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	4952      	ldr	r1, [pc, #328]	@ (80062b8 <I2C_RequestMemoryRead+0x1cc>)
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f9c5 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e097      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006198:	6a39      	ldr	r1, [r7, #32]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fa50 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d107      	bne.n	80061be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e076      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061c2:	88fb      	ldrh	r3, [r7, #6]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d105      	bne.n	80061d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c8:	893b      	ldrh	r3, [r7, #8]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	611a      	str	r2, [r3, #16]
 80061d2:	e021      	b.n	8006218 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061d4:	893b      	ldrh	r3, [r7, #8]
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	b29b      	uxth	r3, r3
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e4:	6a39      	ldr	r1, [r7, #32]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fa2a 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d107      	bne.n	800620a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e050      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800620e:	893b      	ldrh	r3, [r7, #8]
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621a:	6a39      	ldr	r1, [r7, #32]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fa0f 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622c:	2b04      	cmp	r3, #4
 800622e:	d107      	bne.n	8006240 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800623e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e035      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006252:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2200      	movs	r2, #0
 800625c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f8d3 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627a:	d103      	bne.n	8006284 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e013      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006288:	897b      	ldrh	r3, [r7, #10]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	b2da      	uxtb	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	6a3a      	ldr	r2, [r7, #32]
 800629c:	4906      	ldr	r1, [pc, #24]	@ (80062b8 <I2C_RequestMemoryRead+0x1cc>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f92e 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	00010002 	.word	0x00010002

080062bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006404 <I2C_DMAAbort+0x148>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	08db      	lsrs	r3, r3, #3
 80062dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006408 <I2C_DMAAbort+0x14c>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0a1a      	lsrs	r2, r3, #8
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	00da      	lsls	r2, r3, #3
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006302:	e00a      	b.n	800631a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3b01      	subs	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006318:	d0ea      	beq.n	80062f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006326:	2200      	movs	r2, #0
 8006328:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006336:	2200      	movs	r2, #0
 8006338:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006348:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2200      	movs	r2, #0
 800634e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635c:	2200      	movs	r2, #0
 800635e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	2200      	movs	r2, #0
 800636e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b60      	cmp	r3, #96	@ 0x60
 800638a:	d10e      	bne.n	80063aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063a2:	6978      	ldr	r0, [r7, #20]
 80063a4:	f7fe fb2b 	bl	80049fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063a8:	e027      	b.n	80063fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063aa:	7cfb      	ldrb	r3, [r7, #19]
 80063ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063b0:	2b28      	cmp	r3, #40	@ 0x28
 80063b2:	d117      	bne.n	80063e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2228      	movs	r2, #40	@ 0x28
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80063e2:	e007      	b.n	80063f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	f7fe faf9 	bl	80049ec <HAL_I2C_ErrorCallback>
}
 80063fa:	bf00      	nop
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000008 	.word	0x20000008
 8006408:	14f8b589 	.word	0x14f8b589

0800640c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800641c:	e048      	b.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006424:	d044      	beq.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fc f8a5 	bl	8002574 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d139      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	0c1b      	lsrs	r3, r3, #16
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	d10d      	bne.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	43da      	mvns	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	e00c      	b.n	800647c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	43da      	mvns	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	429a      	cmp	r2, r3
 8006480:	d116      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e023      	b.n	80064f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10d      	bne.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	e00c      	b.n	80064f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	43da      	mvns	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d093      	beq.n	800641e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800650e:	e071      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651e:	d123      	bne.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	f043 0204 	orr.w	r2, r3, #4
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e067      	b.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800656e:	d041      	beq.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fc f800 	bl	8002574 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d136      	bne.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10c      	bne.n	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	43da      	mvns	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4013      	ands	r3, r2
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e00b      	b.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	43da      	mvns	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e021      	b.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10c      	bne.n	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	43da      	mvns	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e00b      	b.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	43da      	mvns	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	bf14      	ite	ne
 800662a:	2301      	movne	r3, #1
 800662c:	2300      	moveq	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f af6d 	bne.w	8006510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800664c:	e034      	b.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f915 	bl	800687e <I2C_IsAcknowledgeFailed>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e034      	b.n	80066c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006664:	d028      	beq.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fb ff85 	bl	8002574 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11d      	bne.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b80      	cmp	r3, #128	@ 0x80
 8006688:	d016      	beq.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e007      	b.n	80066c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c2:	2b80      	cmp	r3, #128	@ 0x80
 80066c4:	d1c3      	bne.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066dc:	e034      	b.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f8cd 	bl	800687e <I2C_IsAcknowledgeFailed>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e034      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066f4:	d028      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f6:	f7fb ff3d 	bl	8002574 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11d      	bne.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d016      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e007      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d1c3      	bne.n	80066de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800676c:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	08db      	lsrs	r3, r3, #3
 8006772:	4a13      	ldr	r2, [pc, #76]	@ (80067c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	0a1a      	lsrs	r2, r3, #8
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b01      	subs	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e008      	b.n	80067b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ac:	d0e9      	beq.n	8006782 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000008 	.word	0x20000008
 80067c0:	14f8b589 	.word	0x14f8b589

080067c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067d0:	e049      	b.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d119      	bne.n	8006814 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0210 	mvn.w	r2, #16
 80067e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e030      	b.n	8006876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006814:	f7fb feae 	bl	8002574 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d11d      	bne.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b40      	cmp	r3, #64	@ 0x40
 8006836:	d016      	beq.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	f043 0220 	orr.w	r2, r3, #32
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e007      	b.n	8006876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d1ae      	bne.n	80067d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006894:	d11b      	bne.n	80068ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800689e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr

080068da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80068ea:	d103      	bne.n	80068f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068f2:	e007      	b.n	8006904 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80068fc:	d102      	bne.n	8006904 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2208      	movs	r2, #8
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr
	...

08006910 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006914:	4b03      	ldr	r3, [pc, #12]	@ (8006924 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
}
 800691a:	bf00      	nop
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	420e0020 	.word	0x420e0020

08006928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e272      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8087 	beq.w	8006a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006948:	4b92      	ldr	r3, [pc, #584]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b04      	cmp	r3, #4
 8006952:	d00c      	beq.n	800696e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006954:	4b8f      	ldr	r3, [pc, #572]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b08      	cmp	r3, #8
 800695e:	d112      	bne.n	8006986 <HAL_RCC_OscConfig+0x5e>
 8006960:	4b8c      	ldr	r3, [pc, #560]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800696c:	d10b      	bne.n	8006986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800696e:	4b89      	ldr	r3, [pc, #548]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d06c      	beq.n	8006a54 <HAL_RCC_OscConfig+0x12c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d168      	bne.n	8006a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e24c      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698e:	d106      	bne.n	800699e <HAL_RCC_OscConfig+0x76>
 8006990:	4b80      	ldr	r3, [pc, #512]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a7f      	ldr	r2, [pc, #508]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e02e      	b.n	80069fc <HAL_RCC_OscConfig+0xd4>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10c      	bne.n	80069c0 <HAL_RCC_OscConfig+0x98>
 80069a6:	4b7b      	ldr	r3, [pc, #492]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a7a      	ldr	r2, [pc, #488]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b78      	ldr	r3, [pc, #480]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a77      	ldr	r2, [pc, #476]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e01d      	b.n	80069fc <HAL_RCC_OscConfig+0xd4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0xbc>
 80069ca:	4b72      	ldr	r3, [pc, #456]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a71      	ldr	r2, [pc, #452]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a6e      	ldr	r2, [pc, #440]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0xd4>
 80069e4:	4b6b      	ldr	r3, [pc, #428]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a6a      	ldr	r2, [pc, #424]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4b68      	ldr	r3, [pc, #416]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a67      	ldr	r2, [pc, #412]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d013      	beq.n	8006a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a04:	f7fb fdb6 	bl	8002574 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fb fdb2 	bl	8002574 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	@ 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e200      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0xe4>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2c:	f7fb fda2 	bl	8002574 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a34:	f7fb fd9e 	bl	8002574 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b64      	cmp	r3, #100	@ 0x64
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e1ec      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a46:	4b53      	ldr	r3, [pc, #332]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x10c>
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d063      	beq.n	8006b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a62:	4b4c      	ldr	r3, [pc, #304]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a6e:	4b49      	ldr	r3, [pc, #292]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d11c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x18c>
 8006a7a:	4b46      	ldr	r3, [pc, #280]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d116      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a86:	4b43      	ldr	r3, [pc, #268]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_RCC_OscConfig+0x176>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e1c0      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4939      	ldr	r1, [pc, #228]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ab2:	e03a      	b.n	8006b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d020      	beq.n	8006afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006abc:	4b36      	ldr	r3, [pc, #216]	@ (8006b98 <HAL_RCC_OscConfig+0x270>)
 8006abe:	2201      	movs	r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac2:	f7fb fd57 	bl	8002574 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aca:	f7fb fd53 	bl	8002574 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e1a1      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006adc:	4b2d      	ldr	r3, [pc, #180]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4927      	ldr	r1, [pc, #156]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	600b      	str	r3, [r1, #0]
 8006afc:	e015      	b.n	8006b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006afe:	4b26      	ldr	r3, [pc, #152]	@ (8006b98 <HAL_RCC_OscConfig+0x270>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fb fd36 	bl	8002574 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b0c:	f7fb fd32 	bl	8002574 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e180      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d03a      	beq.n	8006bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3e:	4b17      	ldr	r3, [pc, #92]	@ (8006b9c <HAL_RCC_OscConfig+0x274>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b44:	f7fb fd16 	bl	8002574 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4c:	f7fb fd12 	bl	8002574 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e160      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f000 fad0 	bl	8007110 <RCC_Delay>
 8006b70:	e01c      	b.n	8006bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b72:	4b0a      	ldr	r3, [pc, #40]	@ (8006b9c <HAL_RCC_OscConfig+0x274>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b78:	f7fb fcfc 	bl	8002574 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b7e:	e00f      	b.n	8006ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b80:	f7fb fcf8 	bl	8002574 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d908      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e146      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
 8006b92:	bf00      	nop
 8006b94:	40021000 	.word	0x40021000
 8006b98:	42420000 	.word	0x42420000
 8006b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba0:	4b92      	ldr	r3, [pc, #584]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e9      	bne.n	8006b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80a6 	beq.w	8006d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10d      	bne.n	8006be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bca:	4b88      	ldr	r3, [pc, #544]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4a87      	ldr	r2, [pc, #540]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd4:	61d3      	str	r3, [r2, #28]
 8006bd6:	4b85      	ldr	r3, [pc, #532]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be6:	4b82      	ldr	r3, [pc, #520]	@ (8006df0 <HAL_RCC_OscConfig+0x4c8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d118      	bne.n	8006c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8006df0 <HAL_RCC_OscConfig+0x4c8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8006df0 <HAL_RCC_OscConfig+0x4c8>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bfe:	f7fb fcb9 	bl	8002574 <HAL_GetTick>
 8006c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c04:	e008      	b.n	8006c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c06:	f7fb fcb5 	bl	8002574 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b64      	cmp	r3, #100	@ 0x64
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e103      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c18:	4b75      	ldr	r3, [pc, #468]	@ (8006df0 <HAL_RCC_OscConfig+0x4c8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f0      	beq.n	8006c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d106      	bne.n	8006c3a <HAL_RCC_OscConfig+0x312>
 8006c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	4a6e      	ldr	r2, [pc, #440]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	6213      	str	r3, [r2, #32]
 8006c38:	e02d      	b.n	8006c96 <HAL_RCC_OscConfig+0x36e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10c      	bne.n	8006c5c <HAL_RCC_OscConfig+0x334>
 8006c42:	4b6a      	ldr	r3, [pc, #424]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	4a69      	ldr	r2, [pc, #420]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	6213      	str	r3, [r2, #32]
 8006c4e:	4b67      	ldr	r3, [pc, #412]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	4a66      	ldr	r2, [pc, #408]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	6213      	str	r3, [r2, #32]
 8006c5a:	e01c      	b.n	8006c96 <HAL_RCC_OscConfig+0x36e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b05      	cmp	r3, #5
 8006c62:	d10c      	bne.n	8006c7e <HAL_RCC_OscConfig+0x356>
 8006c64:	4b61      	ldr	r3, [pc, #388]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	4a60      	ldr	r2, [pc, #384]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c6a:	f043 0304 	orr.w	r3, r3, #4
 8006c6e:	6213      	str	r3, [r2, #32]
 8006c70:	4b5e      	ldr	r3, [pc, #376]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	4a5d      	ldr	r2, [pc, #372]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	6213      	str	r3, [r2, #32]
 8006c7c:	e00b      	b.n	8006c96 <HAL_RCC_OscConfig+0x36e>
 8006c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4a5a      	ldr	r2, [pc, #360]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	6213      	str	r3, [r2, #32]
 8006c8a:	4b58      	ldr	r3, [pc, #352]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	4a57      	ldr	r2, [pc, #348]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c9e:	f7fb fc69 	bl	8002574 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca4:	e00a      	b.n	8006cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fb fc65 	bl	8002574 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e0b1      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x37e>
 8006cc8:	e014      	b.n	8006cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cca:	f7fb fc53 	bl	8002574 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cd0:	e00a      	b.n	8006ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd2:	f7fb fc4f 	bl	8002574 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e09b      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	4b40      	ldr	r3, [pc, #256]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ee      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d105      	bne.n	8006d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8087 	beq.w	8006e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d10:	4b36      	ldr	r3, [pc, #216]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f003 030c 	and.w	r3, r3, #12
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d061      	beq.n	8006de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d146      	bne.n	8006db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d24:	4b33      	ldr	r3, [pc, #204]	@ (8006df4 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2a:	f7fb fc23 	bl	8002574 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d32:	f7fb fc1f 	bl	8002574 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e06d      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d44:	4b29      	ldr	r3, [pc, #164]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f0      	bne.n	8006d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d58:	d108      	bne.n	8006d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	4921      	ldr	r1, [pc, #132]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a19      	ldr	r1, [r3, #32]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	491b      	ldr	r1, [pc, #108]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d84:	4b1b      	ldr	r3, [pc, #108]	@ (8006df4 <HAL_RCC_OscConfig+0x4cc>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d8a:	f7fb fbf3 	bl	8002574 <HAL_GetTick>
 8006d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d90:	e008      	b.n	8006da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d92:	f7fb fbef 	bl	8002574 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e03d      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006da4:	4b11      	ldr	r3, [pc, #68]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0f0      	beq.n	8006d92 <HAL_RCC_OscConfig+0x46a>
 8006db0:	e035      	b.n	8006e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <HAL_RCC_OscConfig+0x4cc>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db8:	f7fb fbdc 	bl	8002574 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc0:	f7fb fbd8 	bl	8002574 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e026      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f0      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x498>
 8006dde:	e01e      	b.n	8006e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e019      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40007000 	.word	0x40007000
 8006df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006df8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <HAL_RCC_OscConfig+0x500>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d106      	bne.n	8006e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d001      	beq.n	8006e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40021000 	.word	0x40021000

08006e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0d0      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e40:	4b6a      	ldr	r3, [pc, #424]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d910      	bls.n	8006e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b67      	ldr	r3, [pc, #412]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 0207 	bic.w	r2, r3, #7
 8006e56:	4965      	ldr	r1, [pc, #404]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b63      	ldr	r3, [pc, #396]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0b8      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d020      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e88:	4b59      	ldr	r3, [pc, #356]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	4a58      	ldr	r2, [pc, #352]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ea0:	4b53      	ldr	r3, [pc, #332]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a52      	ldr	r2, [pc, #328]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eac:	4b50      	ldr	r3, [pc, #320]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	494d      	ldr	r1, [pc, #308]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d040      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d107      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed2:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d115      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e07f      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d107      	bne.n	8006efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	4b41      	ldr	r3, [pc, #260]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e073      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efa:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e06b      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f0a:	4b39      	ldr	r3, [pc, #228]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4936      	ldr	r1, [pc, #216]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f1c:	f7fb fb2a 	bl	8002574 <HAL_GetTick>
 8006f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f22:	e00a      	b.n	8006f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f24:	f7fb fb26 	bl	8002574 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e053      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f003 020c 	and.w	r2, r3, #12
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d1eb      	bne.n	8006f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f4c:	4b27      	ldr	r3, [pc, #156]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d210      	bcs.n	8006f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5a:	4b24      	ldr	r3, [pc, #144]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f023 0207 	bic.w	r2, r3, #7
 8006f62:	4922      	ldr	r1, [pc, #136]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b20      	ldr	r3, [pc, #128]	@ (8006fec <HAL_RCC_ClockConfig+0x1c0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e032      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f88:	4b19      	ldr	r3, [pc, #100]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4916      	ldr	r1, [pc, #88]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fa6:	4b12      	ldr	r3, [pc, #72]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	490e      	ldr	r1, [pc, #56]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fba:	f000 f821 	bl	8007000 <HAL_RCC_GetSysClockFreq>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	490a      	ldr	r1, [pc, #40]	@ (8006ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fcc:	5ccb      	ldrb	r3, [r1, r3]
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8006fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fd6:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <HAL_RCC_ClockConfig+0x1d0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fb fa88 	bl	80024f0 <HAL_InitTick>

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40022000 	.word	0x40022000
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	0800986c 	.word	0x0800986c
 8006ff8:	20000008 	.word	0x20000008
 8006ffc:	20000010 	.word	0x20000010

08007000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	2300      	movs	r3, #0
 8007014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800701a:	4b1e      	ldr	r3, [pc, #120]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x94>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b04      	cmp	r3, #4
 8007028:	d002      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x30>
 800702a:	2b08      	cmp	r3, #8
 800702c:	d003      	beq.n	8007036 <HAL_RCC_GetSysClockFreq+0x36>
 800702e:	e027      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007030:	4b19      	ldr	r3, [pc, #100]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x98>)
 8007032:	613b      	str	r3, [r7, #16]
      break;
 8007034:	e027      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	0c9b      	lsrs	r3, r3, #18
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	4a17      	ldr	r2, [pc, #92]	@ (800709c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007040:	5cd3      	ldrb	r3, [r2, r3]
 8007042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d010      	beq.n	8007070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800704e:	4b11      	ldr	r3, [pc, #68]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x94>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	0c5b      	lsrs	r3, r3, #17
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	4a11      	ldr	r2, [pc, #68]	@ (80070a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800705a:	5cd3      	ldrb	r3, [r2, r3]
 800705c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a0d      	ldr	r2, [pc, #52]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x98>)
 8007062:	fb03 f202 	mul.w	r2, r3, r2
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	fbb2 f3f3 	udiv	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e004      	b.n	800707a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a0c      	ldr	r2, [pc, #48]	@ (80070a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	613b      	str	r3, [r7, #16]
      break;
 800707e:	e002      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007080:	4b09      	ldr	r3, [pc, #36]	@ (80070a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007082:	613b      	str	r3, [r7, #16]
      break;
 8007084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007086:	693b      	ldr	r3, [r7, #16]
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40021000 	.word	0x40021000
 8007098:	00f42400 	.word	0x00f42400
 800709c:	08009884 	.word	0x08009884
 80070a0:	08009894 	.word	0x08009894
 80070a4:	003d0900 	.word	0x003d0900
 80070a8:	007a1200 	.word	0x007a1200

080070ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b0:	4b02      	ldr	r3, [pc, #8]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x10>)
 80070b2:	681b      	ldr	r3, [r3, #0]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	20000008 	.word	0x20000008

080070c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070c4:	f7ff fff2 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b05      	ldr	r3, [pc, #20]	@ (80070e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4903      	ldr	r1, [pc, #12]	@ (80070e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40021000 	.word	0x40021000
 80070e4:	0800987c 	.word	0x0800987c

080070e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070ec:	f7ff ffde 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	0adb      	lsrs	r3, r3, #11
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4903      	ldr	r1, [pc, #12]	@ (800710c <HAL_RCC_GetPCLK2Freq+0x24>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	0800987c 	.word	0x0800987c

08007110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007118:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <RCC_Delay+0x34>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a0a      	ldr	r2, [pc, #40]	@ (8007148 <RCC_Delay+0x38>)
 800711e:	fba2 2303 	umull	r2, r3, r2, r3
 8007122:	0a5b      	lsrs	r3, r3, #9
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800712c:	bf00      	nop
  }
  while (Delay --);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1e5a      	subs	r2, r3, #1
 8007132:	60fa      	str	r2, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f9      	bne.n	800712c <RCC_Delay+0x1c>
}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr
 8007144:	20000008 	.word	0x20000008
 8007148:	10624dd3 	.word	0x10624dd3

0800714c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d07d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800716c:	4b4f      	ldr	r3, [pc, #316]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10d      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007178:	4b4c      	ldr	r3, [pc, #304]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	4a4b      	ldr	r2, [pc, #300]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007182:	61d3      	str	r3, [r2, #28]
 8007184:	4b49      	ldr	r3, [pc, #292]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007190:	2301      	movs	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007194:	4b46      	ldr	r3, [pc, #280]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d118      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071a0:	4b43      	ldr	r3, [pc, #268]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a42      	ldr	r2, [pc, #264]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ac:	f7fb f9e2 	bl	8002574 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b2:	e008      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b4:	f7fb f9de 	bl	8002574 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b64      	cmp	r3, #100	@ 0x64
 80071c0:	d901      	bls.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e06d      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c6:	4b3a      	ldr	r3, [pc, #232]	@ (80072b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071d2:	4b36      	ldr	r3, [pc, #216]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02e      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d027      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071f0:	4b2e      	ldr	r3, [pc, #184]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071fa:	4b2e      	ldr	r3, [pc, #184]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007200:	4b2c      	ldr	r3, [pc, #176]	@ (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007206:	4a29      	ldr	r2, [pc, #164]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d014      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007216:	f7fb f9ad 	bl	8002574 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800721c:	e00a      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800721e:	f7fb f9a9 	bl	8002574 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e036      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0ee      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007240:	4b1a      	ldr	r3, [pc, #104]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4917      	ldr	r1, [pc, #92]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	4313      	orrs	r3, r2
 8007250:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007258:	4b14      	ldr	r3, [pc, #80]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	4a13      	ldr	r2, [pc, #76]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007262:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	490b      	ldr	r1, [pc, #44]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800727e:	4313      	orrs	r3, r2
 8007280:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0310 	and.w	r3, r3, #16
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800728e:	4b07      	ldr	r3, [pc, #28]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4904      	ldr	r1, [pc, #16]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729c:	4313      	orrs	r3, r2
 800729e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40021000 	.word	0x40021000
 80072b0:	40007000 	.word	0x40007000
 80072b4:	42420440 	.word	0x42420440

080072b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	2300      	movs	r3, #0
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b10      	cmp	r3, #16
 80072de:	f200 8089 	bhi.w	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d045      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d074      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80072ee:	e081      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 80072f0:	4b45      	ldr	r3, [pc, #276]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072f6:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d07a      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	0c9b      	lsrs	r3, r3, #18
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	4a40      	ldr	r2, [pc, #256]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800730c:	5cd3      	ldrb	r3, [r2, r3]
 800730e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d015      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800731a:	4b3b      	ldr	r3, [pc, #236]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	0c5b      	lsrs	r3, r3, #17
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	4a3a      	ldr	r2, [pc, #232]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007326:	5cd3      	ldrb	r3, [r2, r3]
 8007328:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007334:	4a37      	ldr	r2, [pc, #220]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fbb2 f2f3 	udiv	r2, r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4a33      	ldr	r2, [pc, #204]	@ (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007350:	4b2d      	ldr	r3, [pc, #180]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800735c:	d102      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	61bb      	str	r3, [r7, #24]
      break;
 8007362:	e049      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	61bb      	str	r3, [r7, #24]
      break;
 8007372:	e041      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8007374:	4b24      	ldr	r3, [pc, #144]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007384:	d108      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e01e      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80073a4:	4b18      	ldr	r3, [pc, #96]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80073b0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	e00e      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073c2:	d11b      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80073c4:	4b10      	ldr	r3, [pc, #64]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d015      	beq.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 80073d0:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80073d2:	61bb      	str	r3, [r7, #24]
      break;
 80073d4:	e012      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80073d6:	e011      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80073d8:	f7ff fe86 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	0b9b      	lsrs	r3, r3, #14
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	3301      	adds	r3, #1
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	61bb      	str	r3, [r7, #24]
      break;
 80073f2:	e004      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80073f4:	bf00      	nop
 80073f6:	e002      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80073fc:	bf00      	nop
    }
  }
  return (frequency);
 80073fe:	69bb      	ldr	r3, [r7, #24]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40021000 	.word	0x40021000
 800740c:	08009898 	.word	0x08009898
 8007410:	080098a8 	.word	0x080098a8
 8007414:	00f42400 	.word	0x00f42400
 8007418:	003d0900 	.word	0x003d0900
 800741c:	aaaaaaab 	.word	0xaaaaaaab
 8007420:	0001e848 	.word	0x0001e848

08007424 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e07a      	b.n	8007530 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	7c5b      	ldrb	r3, [r3, #17]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa f8e8 	bl	8001620 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 faea 	bl	8007a30 <HAL_RTC_WaitForSynchro>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2204      	movs	r2, #4
 8007466:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e061      	b.n	8007530 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fba3 	bl	8007bb8 <RTC_EnterInitMode>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d004      	beq.n	8007482 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2204      	movs	r2, #4
 800747c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e056      	b.n	8007530 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0207 	bic.w	r2, r2, #7
 8007490:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800749a:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <HAL_RTC_Init+0x114>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	4a26      	ldr	r2, [pc, #152]	@ (8007538 <HAL_RTC_Init+0x114>)
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80074a6:	4b24      	ldr	r3, [pc, #144]	@ (8007538 <HAL_RTC_Init+0x114>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	4921      	ldr	r1, [pc, #132]	@ (8007538 <HAL_RTC_Init+0x114>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074c0:	d003      	beq.n	80074ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e00e      	b.n	80074e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80074ca:	2001      	movs	r0, #1
 80074cc:	f7ff fef4 	bl	80072b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80074d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e026      	b.n	8007530 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	0c1a      	lsrs	r2, r3, #16
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f002 020f 	and.w	r2, r2, #15
 80074f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	b292      	uxth	r2, r2
 80074fe:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb81 	bl	8007c08 <RTC_ExitInitMode>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2204      	movs	r2, #4
 8007510:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e00c      	b.n	8007530 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800752e:	2300      	movs	r3, #0
  }
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40006c00 	.word	0x40006c00

0800753c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800753c:	b590      	push	{r4, r7, lr}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_RTC_SetTime+0x20>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e080      	b.n	8007662 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	7c1b      	ldrb	r3, [r3, #16]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_RTC_SetTime+0x30>
 8007568:	2302      	movs	r3, #2
 800756a:	e07a      	b.n	8007662 <HAL_RTC_SetTime+0x126>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2202      	movs	r2, #2
 8007576:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d113      	bne.n	80075a6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007588:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	4619      	mov	r1, r3
 8007592:	460b      	mov	r3, r1
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	1a5b      	subs	r3, r3, r1
 8007598:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800759a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80075a0:	4413      	add	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e01e      	b.n	80075e4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fb71 	bl	8007c92 <RTC_Bcd2ToByte>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80075b8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fb66 	bl	8007c92 <RTC_Bcd2ToByte>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	4613      	mov	r3, r2
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80075d2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	789b      	ldrb	r3, [r3, #2]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fb5a 	bl	8007c92 <RTC_Bcd2ToByte>
 80075de:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80075e0:	4423      	add	r3, r4
 80075e2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80075e4:	6979      	ldr	r1, [r7, #20]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fa7f 	bl	8007aea <RTC_WriteTimeCounter>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2204      	movs	r2, #4
 80075f6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e02f      	b.n	8007662 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0205 	bic.w	r2, r2, #5
 8007610:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fa90 	bl	8007b38 <RTC_ReadAlarmCounter>
 8007618:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007620:	d018      	beq.n	8007654 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	429a      	cmp	r2, r3
 8007628:	d214      	bcs.n	8007654 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007630:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007634:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007636:	6939      	ldr	r1, [r7, #16]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 fa96 	bl	8007b6a <RTC_WriteAlarmCounter>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2204      	movs	r2, #4
 8007648:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e006      	b.n	8007662 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	bd90      	pop	{r4, r7, pc}
	...

0800766c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_RTC_GetTime+0x28>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0b5      	b.n	8007804 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0ac      	b.n	8007804 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f9ed 	bl	8007a8a <RTC_ReadTimeCounter>
 80076b0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4a55      	ldr	r2, [pc, #340]	@ (800780c <HAL_RTC_GetTime+0x1a0>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	0adb      	lsrs	r3, r3, #11
 80076bc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4b52      	ldr	r3, [pc, #328]	@ (800780c <HAL_RTC_GetTime+0x1a0>)
 80076c2:	fba3 1302 	umull	r1, r3, r3, r2
 80076c6:	0adb      	lsrs	r3, r3, #11
 80076c8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	4a4f      	ldr	r2, [pc, #316]	@ (8007810 <HAL_RTC_GetTime+0x1a4>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	4a4a      	ldr	r2, [pc, #296]	@ (800780c <HAL_RTC_GetTime+0x1a0>)
 80076e4:	fba2 1203 	umull	r1, r2, r2, r3
 80076e8:	0ad2      	lsrs	r2, r2, #11
 80076ea:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80076ee:	fb01 f202 	mul.w	r2, r1, r2
 80076f2:	1a9a      	subs	r2, r3, r2
 80076f4:	4b46      	ldr	r3, [pc, #280]	@ (8007810 <HAL_RTC_GetTime+0x1a4>)
 80076f6:	fba3 1302 	umull	r1, r3, r3, r2
 80076fa:	0959      	lsrs	r1, r3, #5
 80076fc:	460b      	mov	r3, r1
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	1a5b      	subs	r3, r3, r1
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	1ad1      	subs	r1, r2, r3
 8007706:	b2ca      	uxtb	r2, r1
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b17      	cmp	r3, #23
 8007710:	d955      	bls.n	80077be <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4a3f      	ldr	r2, [pc, #252]	@ (8007814 <HAL_RTC_GetTime+0x1a8>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	091b      	lsrs	r3, r3, #4
 800771c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800771e:	6939      	ldr	r1, [r7, #16]
 8007720:	4b3c      	ldr	r3, [pc, #240]	@ (8007814 <HAL_RTC_GetTime+0x1a8>)
 8007722:	fba3 2301 	umull	r2, r3, r3, r1
 8007726:	091a      	lsrs	r2, r3, #4
 8007728:	4613      	mov	r3, r2
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	4413      	add	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	1aca      	subs	r2, r1, r3
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f9fd 	bl	8007b38 <RTC_ReadAlarmCounter>
 800773e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007746:	d008      	beq.n	800775a <HAL_RTC_GetTime+0xee>
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	429a      	cmp	r2, r3
 800774e:	d904      	bls.n	800775a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	e002      	b.n	8007760 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800775e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	4a2d      	ldr	r2, [pc, #180]	@ (8007818 <HAL_RTC_GetTime+0x1ac>)
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800776e:	69b9      	ldr	r1, [r7, #24]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f9ba 	bl	8007aea <RTC_WriteTimeCounter>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e041      	b.n	8007804 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007786:	d00c      	beq.n	80077a2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	4413      	add	r3, r2
 800778e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f9e9 	bl	8007b6a <RTC_WriteAlarmCounter>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e030      	b.n	8007804 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80077a2:	69f9      	ldr	r1, [r7, #28]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f9e0 	bl	8007b6a <RTC_WriteAlarmCounter>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e027      	b.n	8007804 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80077b4:	6979      	ldr	r1, [r7, #20]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa88 	bl	8007ccc <RTC_DateUpdate>
 80077bc:	e003      	b.n	80077c6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01a      	beq.n	8007802 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fa41 	bl	8007c58 <RTC_ByteToBcd2>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa38 	bl	8007c58 <RTC_ByteToBcd2>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461a      	mov	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	789b      	ldrb	r3, [r3, #2]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fa2f 	bl	8007c58 <RTC_ByteToBcd2>
 80077fa:	4603      	mov	r3, r0
 80077fc:	461a      	mov	r2, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	91a2b3c5 	.word	0x91a2b3c5
 8007810:	88888889 	.word	0x88888889
 8007814:	aaaaaaab 	.word	0xaaaaaaab
 8007818:	00015180 	.word	0x00015180

0800781c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <HAL_RTC_SetDate+0x24>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e097      	b.n	8007974 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	7c1b      	ldrb	r3, [r3, #16]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_RTC_SetDate+0x34>
 800784c:	2302      	movs	r3, #2
 800784e:	e091      	b.n	8007974 <HAL_RTC_SetDate+0x158>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10c      	bne.n	800787c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	78da      	ldrb	r2, [r3, #3]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	785a      	ldrb	r2, [r3, #1]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	789a      	ldrb	r2, [r3, #2]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	739a      	strb	r2, [r3, #14]
 800787a:	e01a      	b.n	80078b2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	78db      	ldrb	r3, [r3, #3]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fa06 	bl	8007c92 <RTC_Bcd2ToByte>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	4618      	mov	r0, r3
 8007894:	f000 f9fd 	bl	8007c92 <RTC_Bcd2ToByte>
 8007898:	4603      	mov	r3, r0
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	789b      	ldrb	r3, [r3, #2]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f9f4 	bl	8007c92 <RTC_Bcd2ToByte>
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	7bdb      	ldrb	r3, [r3, #15]
 80078b6:	4618      	mov	r0, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7b59      	ldrb	r1, [r3, #13]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	7b9b      	ldrb	r3, [r3, #14]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f000 fadf 	bl	8007e84 <RTC_WeekDayNum>
 80078c6:	4603      	mov	r3, r0
 80078c8:	461a      	mov	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	7b1a      	ldrb	r2, [r3, #12]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 f8d7 	bl	8007a8a <RTC_ReadTimeCounter>
 80078dc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4a26      	ldr	r2, [pc, #152]	@ (800797c <HAL_RTC_SetDate+0x160>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	0adb      	lsrs	r3, r3, #11
 80078e8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b18      	cmp	r3, #24
 80078ee:	d93a      	bls.n	8007966 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4a23      	ldr	r2, [pc, #140]	@ (8007980 <HAL_RTC_SetDate+0x164>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	4a22      	ldr	r2, [pc, #136]	@ (8007984 <HAL_RTC_SetDate+0x168>)
 80078fc:	fb02 f303 	mul.w	r3, r2, r3
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007906:	69f9      	ldr	r1, [r7, #28]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f8ee 	bl	8007aea <RTC_WriteTimeCounter>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2204      	movs	r2, #4
 8007918:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e027      	b.n	8007974 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f907 	bl	8007b38 <RTC_ReadAlarmCounter>
 800792a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007932:	d018      	beq.n	8007966 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	429a      	cmp	r2, r3
 800793a:	d214      	bcs.n	8007966 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007942:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007946:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007948:	69b9      	ldr	r1, [r7, #24]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f90d 	bl	8007b6a <RTC_WriteAlarmCounter>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2204      	movs	r2, #4
 800795a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e006      	b.n	8007974 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3720      	adds	r7, #32
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	91a2b3c5 	.word	0x91a2b3c5
 8007980:	aaaaaaab 	.word	0xaaaaaaab
 8007984:	00015180 	.word	0x00015180

08007988 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	2100      	movs	r1, #0
 800799a:	460a      	mov	r2, r1
 800799c:	801a      	strh	r2, [r3, #0]
 800799e:	460a      	mov	r2, r1
 80079a0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_RTC_GetDate+0x26>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e03a      	b.n	8007a28 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80079b2:	f107 0314 	add.w	r3, r7, #20
 80079b6:	2200      	movs	r2, #0
 80079b8:	4619      	mov	r1, r3
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff fe56 	bl	800766c <HAL_RTC_GetTime>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e02e      	b.n	8007a28 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	7b1a      	ldrb	r2, [r3, #12]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	7bda      	ldrb	r2, [r3, #15]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	7b5a      	ldrb	r2, [r3, #13]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	7b9a      	ldrb	r2, [r3, #14]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01a      	beq.n	8007a26 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	78db      	ldrb	r3, [r3, #3]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 f92f 	bl	8007c58 <RTC_ByteToBcd2>
 80079fa:	4603      	mov	r3, r0
 80079fc:	461a      	mov	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f926 	bl	8007c58 <RTC_ByteToBcd2>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	789b      	ldrb	r3, [r3, #2]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f91d 	bl	8007c58 <RTC_ByteToBcd2>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e01d      	b.n	8007a82 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0208 	bic.w	r2, r2, #8
 8007a54:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007a56:	f7fa fd8d 	bl	8002574 <HAL_GetTick>
 8007a5a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007a5c:	e009      	b.n	8007a72 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007a5e:	f7fa fd89 	bl	8002574 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a6c:	d901      	bls.n	8007a72 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e007      	b.n	8007a82 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ee      	beq.n	8007a5e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	827b      	strh	r3, [r7, #18]
 8007a96:	2300      	movs	r3, #0
 8007a98:	823b      	strh	r3, [r7, #16]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007aba:	8a7a      	ldrh	r2, [r7, #18]
 8007abc:	8a3b      	ldrh	r3, [r7, #16]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d008      	beq.n	8007ad4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007ac2:	8a3b      	ldrh	r3, [r7, #16]
 8007ac4:	041a      	lsls	r2, r3, #16
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	e004      	b.n	8007ade <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007ad4:	8a7b      	ldrh	r3, [r7, #18]
 8007ad6:	041a      	lsls	r2, r3, #16
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007ade:	697b      	ldr	r3, [r7, #20]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr

08007aea <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f85d 	bl	8007bb8 <RTC_EnterInitMode>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
 8007b08:	e011      	b.n	8007b2e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	0c12      	lsrs	r2, r2, #16
 8007b12:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f872 	bl	8007c08 <RTC_ExitInitMode>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	81fb      	strh	r3, [r7, #14]
 8007b44:	2300      	movs	r3, #0
 8007b46:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b56:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007b58:	89fb      	ldrh	r3, [r7, #14]
 8007b5a:	041a      	lsls	r2, r3, #16
 8007b5c:	89bb      	ldrh	r3, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr

08007b6a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f81d 	bl	8007bb8 <RTC_EnterInitMode>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e011      	b.n	8007bae <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	0c12      	lsrs	r2, r2, #16
 8007b92:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	b292      	uxth	r2, r2
 8007b9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f832 	bl	8007c08 <RTC_ExitInitMode>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007bc4:	f7fa fcd6 	bl	8002574 <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007bca:	e009      	b.n	8007be0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007bcc:	f7fa fcd2 	bl	8002574 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bda:	d901      	bls.n	8007be0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e00f      	b.n	8007c00 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0ee      	beq.n	8007bcc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0210 	orr.w	r2, r2, #16
 8007bfc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0210 	bic.w	r2, r2, #16
 8007c22:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007c24:	f7fa fca6 	bl	8002574 <HAL_GetTick>
 8007c28:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007c2a:	e009      	b.n	8007c40 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007c2c:	f7fa fca2 	bl	8002574 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c3a:	d901      	bls.n	8007c40 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e007      	b.n	8007c50 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0ee      	beq.n	8007c2c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007c66:	e005      	b.n	8007c74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	3b0a      	subs	r3, #10
 8007c72:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b09      	cmp	r3, #9
 8007c78:	d8f6      	bhi.n	8007c68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b2db      	uxtb	r3, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	4603      	mov	r3, r0
 8007c9a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	b2db      	uxtb	r3, r3
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr

08007ccc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7bdb      	ldrb	r3, [r3, #15]
 8007cea:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7b5b      	ldrb	r3, [r3, #13]
 8007cf0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7b9b      	ldrb	r3, [r3, #14]
 8007cf6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	e06f      	b.n	8007dde <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d011      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d00e      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b05      	cmp	r3, #5
 8007d0e:	d00b      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b07      	cmp	r3, #7
 8007d14:	d008      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d005      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2b0a      	cmp	r3, #10
 8007d20:	d002      	beq.n	8007d28 <RTC_DateUpdate+0x5c>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b0c      	cmp	r3, #12
 8007d26:	d117      	bne.n	8007d58 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b1e      	cmp	r3, #30
 8007d2c:	d803      	bhi.n	8007d36 <RTC_DateUpdate+0x6a>
      {
        day++;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3301      	adds	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007d34:	e050      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d005      	beq.n	8007d48 <RTC_DateUpdate+0x7c>
        {
          month++;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007d42:	2301      	movs	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007d46:	e047      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
          year++;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	3301      	adds	r3, #1
 8007d54:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007d56:	e03f      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d008      	beq.n	8007d70 <RTC_DateUpdate+0xa4>
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b06      	cmp	r3, #6
 8007d62:	d005      	beq.n	8007d70 <RTC_DateUpdate+0xa4>
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b09      	cmp	r3, #9
 8007d68:	d002      	beq.n	8007d70 <RTC_DateUpdate+0xa4>
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b0b      	cmp	r3, #11
 8007d6e:	d10c      	bne.n	8007d8a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b1d      	cmp	r3, #29
 8007d74:	d803      	bhi.n	8007d7e <RTC_DateUpdate+0xb2>
      {
        day++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007d7c:	e02c      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007d84:	2301      	movs	r3, #1
 8007d86:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007d88:	e026      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d123      	bne.n	8007dd8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b1b      	cmp	r3, #27
 8007d94:	d803      	bhi.n	8007d9e <RTC_DateUpdate+0xd2>
      {
        day++;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	e01c      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b1c      	cmp	r3, #28
 8007da2:	d111      	bne.n	8007dc8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f839 	bl	8007e20 <RTC_IsLeapYear>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <RTC_DateUpdate+0xf0>
        {
          day++;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e00d      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e007      	b.n	8007dd8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b1d      	cmp	r3, #29
 8007dcc:	d104      	bne.n	8007dd8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d38b      	bcc.n	8007cfe <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	4619      	mov	r1, r3
 8007e08:	6978      	ldr	r0, [r7, #20]
 8007e0a:	f000 f83b 	bl	8007e84 <RTC_WeekDayNum>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	731a      	strb	r2, [r3, #12]
}
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e01d      	b.n	8007e76 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	4a10      	ldr	r2, [pc, #64]	@ (8007e80 <RTC_IsLeapYear+0x60>)
 8007e3e:	fba2 1203 	umull	r1, r2, r2, r3
 8007e42:	0952      	lsrs	r2, r2, #5
 8007e44:	2164      	movs	r1, #100	@ 0x64
 8007e46:	fb01 f202 	mul.w	r2, r1, r2
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e00f      	b.n	8007e76 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <RTC_IsLeapYear+0x60>)
 8007e5a:	fba2 1203 	umull	r1, r2, r2, r3
 8007e5e:	09d2      	lsrs	r2, r2, #7
 8007e60:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8007e64:	fb01 f202 	mul.w	r2, r1, r2
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007e74:	2300      	movs	r3, #0
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr
 8007e80:	51eb851f 	.word	0x51eb851f

08007e84 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
 8007e90:	4613      	mov	r3, r2
 8007e92:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8007ea2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d82d      	bhi.n	8007f06 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	4613      	mov	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f68 <RTC_WeekDayNum+0xe4>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	085a      	lsrs	r2, r3, #1
 8007ebe:	78bb      	ldrb	r3, [r7, #2]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	089b      	lsrs	r3, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4926      	ldr	r1, [pc, #152]	@ (8007f6c <RTC_WeekDayNum+0xe8>)
 8007ed4:	fba1 1303 	umull	r1, r3, r1, r3
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	1ad2      	subs	r2, r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4922      	ldr	r1, [pc, #136]	@ (8007f6c <RTC_WeekDayNum+0xe8>)
 8007ee2:	fba1 1303 	umull	r1, r3, r1, r3
 8007ee6:	09db      	lsrs	r3, r3, #7
 8007ee8:	4413      	add	r3, r2
 8007eea:	1d1a      	adds	r2, r3, #4
 8007eec:	4b20      	ldr	r3, [pc, #128]	@ (8007f70 <RTC_WeekDayNum+0xec>)
 8007eee:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef2:	1ad1      	subs	r1, r2, r3
 8007ef4:	0849      	lsrs	r1, r1, #1
 8007ef6:	440b      	add	r3, r1
 8007ef8:	0899      	lsrs	r1, r3, #2
 8007efa:	460b      	mov	r3, r1
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	1a5b      	subs	r3, r3, r1
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e029      	b.n	8007f5a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007f06:	78fa      	ldrb	r2, [r7, #3]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	4413      	add	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	4a15      	ldr	r2, [pc, #84]	@ (8007f68 <RTC_WeekDayNum+0xe4>)
 8007f14:	fba2 2303 	umull	r2, r3, r2, r3
 8007f18:	085a      	lsrs	r2, r3, #1
 8007f1a:	78bb      	ldrb	r3, [r7, #2]
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	441a      	add	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	089b      	lsrs	r3, r3, #2
 8007f26:	441a      	add	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4910      	ldr	r1, [pc, #64]	@ (8007f6c <RTC_WeekDayNum+0xe8>)
 8007f2c:	fba1 1303 	umull	r1, r3, r1, r3
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	490d      	ldr	r1, [pc, #52]	@ (8007f6c <RTC_WeekDayNum+0xe8>)
 8007f38:	fba1 1303 	umull	r1, r3, r1, r3
 8007f3c:	09db      	lsrs	r3, r3, #7
 8007f3e:	4413      	add	r3, r2
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <RTC_WeekDayNum+0xec>)
 8007f44:	fba3 1302 	umull	r1, r3, r3, r2
 8007f48:	1ad1      	subs	r1, r2, r3
 8007f4a:	0849      	lsrs	r1, r1, #1
 8007f4c:	440b      	add	r3, r1
 8007f4e:	0899      	lsrs	r1, r3, #2
 8007f50:	460b      	mov	r3, r1
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	1a5b      	subs	r3, r3, r1
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	b2db      	uxtb	r3, r3
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr
 8007f68:	38e38e39 	.word	0x38e38e39
 8007f6c:	51eb851f 	.word	0x51eb851f
 8007f70:	24924925 	.word	0x24924925

08007f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e041      	b.n	800800a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7f9 fdec 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f000 facc 	bl	8008550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	d001      	beq.n	800802c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e032      	b.n	8008092 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a18      	ldr	r2, [pc, #96]	@ (800809c <HAL_TIM_Base_Start+0x88>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00e      	beq.n	800805c <HAL_TIM_Base_Start+0x48>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008046:	d009      	beq.n	800805c <HAL_TIM_Base_Start+0x48>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a14      	ldr	r2, [pc, #80]	@ (80080a0 <HAL_TIM_Base_Start+0x8c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_TIM_Base_Start+0x48>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a13      	ldr	r2, [pc, #76]	@ (80080a4 <HAL_TIM_Base_Start+0x90>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d111      	bne.n	8008080 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b06      	cmp	r3, #6
 800806c:	d010      	beq.n	8008090 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	e007      	b.n	8008090 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr
 800809c:	40012c00 	.word	0x40012c00
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800

080080a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a1a      	ldr	r2, [r3, #32]
 80080b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10f      	bne.n	80080e0 <HAL_TIM_Base_Stop+0x38>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d107      	bne.n	80080e0 <HAL_TIM_Base_Stop+0x38>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d001      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e03a      	b.n	8008182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a18      	ldr	r2, [pc, #96]	@ (800818c <HAL_TIM_Base_Start_IT+0x98>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00e      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x58>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d009      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x58>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a14      	ldr	r2, [pc, #80]	@ (8008190 <HAL_TIM_Base_Start_IT+0x9c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d004      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x58>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a13      	ldr	r2, [pc, #76]	@ (8008194 <HAL_TIM_Base_Start_IT+0xa0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d111      	bne.n	8008170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d010      	beq.n	8008180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0201 	orr.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816e:	e007      	b.n	8008180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr
 800818c:	40012c00 	.word	0x40012c00
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800

08008198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d020      	beq.n	80081fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d01b      	beq.n	80081fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0202 	mvn.w	r2, #2
 80081cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f998 	bl	8008518 <HAL_TIM_IC_CaptureCallback>
 80081e8:	e005      	b.n	80081f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f98b 	bl	8008506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f99a 	bl	800852a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d020      	beq.n	8008248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01b      	beq.n	8008248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0204 	mvn.w	r2, #4
 8008218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f972 	bl	8008518 <HAL_TIM_IC_CaptureCallback>
 8008234:	e005      	b.n	8008242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f965 	bl	8008506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f974 	bl	800852a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d020      	beq.n	8008294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01b      	beq.n	8008294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0208 	mvn.w	r2, #8
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2204      	movs	r2, #4
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f94c 	bl	8008518 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f93f 	bl	8008506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f94e 	bl	800852a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0310 	and.w	r3, r3, #16
 800829a:	2b00      	cmp	r3, #0
 800829c:	d020      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0210 	mvn.w	r2, #16
 80082b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2208      	movs	r2, #8
 80082b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f926 	bl	8008518 <HAL_TIM_IC_CaptureCallback>
 80082cc:	e005      	b.n	80082da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f919 	bl	8008506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f928 	bl	800852a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0201 	mvn.w	r2, #1
 80082fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7f8 f9a8 	bl	8000654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa7f 	bl	8008826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00c      	beq.n	800834c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f8f8 	bl	800853c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d007      	beq.n	8008370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0220 	mvn.w	r2, #32
 8008368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa52 	bl	8008814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008370:	bf00      	nop
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_TIM_ConfigClockSource+0x1c>
 8008390:	2302      	movs	r3, #2
 8008392:	e0b4      	b.n	80084fe <HAL_TIM_ConfigClockSource+0x186>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083cc:	d03e      	beq.n	800844c <HAL_TIM_ConfigClockSource+0xd4>
 80083ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083d2:	f200 8087 	bhi.w	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083da:	f000 8086 	beq.w	80084ea <HAL_TIM_ConfigClockSource+0x172>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083e2:	d87f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b70      	cmp	r3, #112	@ 0x70
 80083e6:	d01a      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xa6>
 80083e8:	2b70      	cmp	r3, #112	@ 0x70
 80083ea:	d87b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b60      	cmp	r3, #96	@ 0x60
 80083ee:	d050      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x11a>
 80083f0:	2b60      	cmp	r3, #96	@ 0x60
 80083f2:	d877      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 80083f4:	2b50      	cmp	r3, #80	@ 0x50
 80083f6:	d03c      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xfa>
 80083f8:	2b50      	cmp	r3, #80	@ 0x50
 80083fa:	d873      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 80083fc:	2b40      	cmp	r3, #64	@ 0x40
 80083fe:	d058      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x13a>
 8008400:	2b40      	cmp	r3, #64	@ 0x40
 8008402:	d86f      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008404:	2b30      	cmp	r3, #48	@ 0x30
 8008406:	d064      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008408:	2b30      	cmp	r3, #48	@ 0x30
 800840a:	d86b      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d060      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008410:	2b20      	cmp	r3, #32
 8008412:	d867      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05c      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008418:	2b10      	cmp	r3, #16
 800841a:	d05a      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x15a>
 800841c:	e062      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800842e:	f000 f974 	bl	800871a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	609a      	str	r2, [r3, #8]
      break;
 800844a:	e04f      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800845c:	f000 f95d 	bl	800871a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800846e:	609a      	str	r2, [r3, #8]
      break;
 8008470:	e03c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800847e:	461a      	mov	r2, r3
 8008480:	f000 f8d4 	bl	800862c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2150      	movs	r1, #80	@ 0x50
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f92b 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 8008490:	e02c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 f8f2 	bl	8008688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2160      	movs	r1, #96	@ 0x60
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f91b 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e01c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084be:	461a      	mov	r2, r3
 80084c0:	f000 f8b4 	bl	800862c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2140      	movs	r1, #64	@ 0x40
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f90b 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 80084d0:	e00c      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f000 f902 	bl	80086e6 <TIM_ITRx_SetConfig>
      break;
 80084e2:	e003      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	e000      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
	...

08008550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2f      	ldr	r2, [pc, #188]	@ (8008620 <TIM_Base_SetConfig+0xd0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00b      	beq.n	8008580 <TIM_Base_SetConfig+0x30>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800856e:	d007      	beq.n	8008580 <TIM_Base_SetConfig+0x30>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a2c      	ldr	r2, [pc, #176]	@ (8008624 <TIM_Base_SetConfig+0xd4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_Base_SetConfig+0x30>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a2b      	ldr	r2, [pc, #172]	@ (8008628 <TIM_Base_SetConfig+0xd8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d108      	bne.n	8008592 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a22      	ldr	r2, [pc, #136]	@ (8008620 <TIM_Base_SetConfig+0xd0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <TIM_Base_SetConfig+0x62>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a0:	d007      	beq.n	80085b2 <TIM_Base_SetConfig+0x62>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008624 <TIM_Base_SetConfig+0xd4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_Base_SetConfig+0x62>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008628 <TIM_Base_SetConfig+0xd8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d108      	bne.n	80085c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008620 <TIM_Base_SetConfig+0xd0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d103      	bne.n	80085f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f023 0201 	bic.w	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	611a      	str	r2, [r3, #16]
  }
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr
 8008620:	40012c00 	.word	0x40012c00
 8008624:	40000400 	.word	0x40000400
 8008628:	40000800 	.word	0x40000800

0800862c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0201 	bic.w	r2, r3, #1
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4313      	orrs	r3, r2
 8008660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f023 030a 	bic.w	r3, r3, #10
 8008668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	621a      	str	r2, [r3, #32]
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f023 0210 	bic.w	r2, r3, #16
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	031b      	lsls	r3, r3, #12
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	621a      	str	r2, [r3, #32]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	f043 0307 	orr.w	r3, r3, #7
 8008708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	609a      	str	r2, [r3, #8]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800871a:	b480      	push	{r7}
 800871c:	b087      	sub	sp, #28
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	021a      	lsls	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	431a      	orrs	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	609a      	str	r2, [r3, #8]
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800876c:	2302      	movs	r3, #2
 800876e:	e046      	b.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a16      	ldr	r2, [pc, #88]	@ (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00e      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087bc:	d009      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a12      	ldr	r2, [pc, #72]	@ (800880c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d004      	beq.n	80087d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a10      	ldr	r2, [pc, #64]	@ (8008810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10c      	bne.n	80087ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40000400 	.word	0x40000400
 8008810:	40000800 	.word	0x40000800

08008814 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr

08008826 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e042      	b.n	80088d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7f9 fafa 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2224      	movs	r2, #36	@ 0x24
 8008868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800887a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 ff2f 	bl	80096e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08c      	sub	sp, #48	@ 0x30
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d156      	bne.n	80089a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_UART_Transmit_DMA+0x26>
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e04f      	b.n	80089a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2221      	movs	r2, #33	@ 0x21
 800891e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008926:	4a21      	ldr	r2, [pc, #132]	@ (80089ac <HAL_UART_Transmit_DMA+0xd4>)
 8008928:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892e:	4a20      	ldr	r2, [pc, #128]	@ (80089b0 <HAL_UART_Transmit_DMA+0xd8>)
 8008930:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008936:	4a1f      	ldr	r2, [pc, #124]	@ (80089b4 <HAL_UART_Transmit_DMA+0xdc>)
 8008938:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	2200      	movs	r2, #0
 8008940:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3304      	adds	r3, #4
 8008956:	461a      	mov	r2, r3
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	f7f9 ffa1 	bl	80028a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008966:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	617b      	str	r3, [r7, #20]
   return(result);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3314      	adds	r3, #20
 8008986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008988:	627a      	str	r2, [r7, #36]	@ 0x24
 800898a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6a39      	ldr	r1, [r7, #32]
 800898e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	61fb      	str	r3, [r7, #28]
   return(result);
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e5      	bne.n	8008968 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3730      	adds	r7, #48	@ 0x30
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	08008f75 	.word	0x08008f75
 80089b0:	0800900f 	.word	0x0800900f
 80089b4:	08009193 	.word	0x08009193

080089b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	d112      	bne.n	80089f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_UART_Receive_DMA+0x26>
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e00b      	b.n	80089fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	461a      	mov	r2, r3
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 fc1a 	bl	8009228 <UART_Start_Receive_DMA>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e000      	b.n	80089fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089f8:	2302      	movs	r3, #2
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b0ba      	sub	sp, #232	@ 0xe8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10f      	bne.n	8008a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_UART_IRQHandler+0x66>
 8008a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fd7e 	bl	8009564 <UART_Receive_IT>
      return;
 8008a68:	e25b      	b.n	8008f22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f000 80de 	beq.w	8008c30 <HAL_UART_IRQHandler+0x22c>
 8008a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 80d1 	beq.w	8008c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00b      	beq.n	8008ab2 <HAL_UART_IRQHandler+0xae>
 8008a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aaa:	f043 0201 	orr.w	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <HAL_UART_IRQHandler+0xd2>
 8008abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	f043 0202 	orr.w	r2, r3, #2
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00b      	beq.n	8008afa <HAL_UART_IRQHandler+0xf6>
 8008ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d005      	beq.n	8008afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <HAL_UART_IRQHandler+0x126>
 8008b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d105      	bne.n	8008b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b22:	f043 0208 	orr.w	r2, r3, #8
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 81f2 	beq.w	8008f18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <HAL_UART_IRQHandler+0x14e>
 8008b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fd09 	bl	8009564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf14      	ite	ne
 8008b60:	2301      	movne	r3, #1
 8008b62:	2300      	moveq	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d103      	bne.n	8008b7e <HAL_UART_IRQHandler+0x17a>
 8008b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d04f      	beq.n	8008c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fc13 	bl	80093aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d041      	beq.n	8008c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3314      	adds	r3, #20
 8008b98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3314      	adds	r3, #20
 8008bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1d9      	bne.n	8008b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d013      	beq.n	8008c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bea:	4a7e      	ldr	r2, [pc, #504]	@ (8008de4 <HAL_UART_IRQHandler+0x3e0>)
 8008bec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7f9 fef0 	bl	80029d8 <HAL_DMA_Abort_IT>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d016      	beq.n	8008c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0c:	e00e      	b.n	8008c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f99c 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c14:	e00a      	b.n	8008c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f998 	bl	8008f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1c:	e006      	b.n	8008c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f994 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c2a:	e175      	b.n	8008f18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2c:	bf00      	nop
    return;
 8008c2e:	e173      	b.n	8008f18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	f040 814f 	bne.w	8008ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8148 	beq.w	8008ed8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8141 	beq.w	8008ed8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	60bb      	str	r3, [r7, #8]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	60bb      	str	r3, [r7, #8]
 8008c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80b6 	beq.w	8008de8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8145 	beq.w	8008f1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	f080 813e 	bcs.w	8008f1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ca6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	f000 8088 	beq.w	8008dc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	330c      	adds	r3, #12
 8008cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008ce0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ce4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1d9      	bne.n	8008cb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3314      	adds	r3, #20
 8008d06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e1      	bne.n	8008d00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e3      	bne.n	8008d3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	330c      	adds	r3, #12
 8008d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d94:	f023 0310 	bic.w	r3, r3, #16
 8008d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	330c      	adds	r3, #12
 8008da2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008da6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008da8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e3      	bne.n	8008d82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f9 fdce 	bl	8002960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8bf 	bl	8008f5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de0:	e09c      	b.n	8008f1c <HAL_UART_IRQHandler+0x518>
 8008de2:	bf00      	nop
 8008de4:	0800946f 	.word	0x0800946f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 808e 	beq.w	8008f20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8089 	beq.w	8008f20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	330c      	adds	r3, #12
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	330c      	adds	r3, #12
 8008e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e32:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e3      	bne.n	8008e0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3314      	adds	r3, #20
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	623b      	str	r3, [r7, #32]
   return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f023 0301 	bic.w	r3, r3, #1
 8008e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	e853 3f00 	ldrex	r3, [r3]
 8008e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0310 	bic.w	r3, r3, #16
 8008ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008eb0:	61fa      	str	r2, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e3      	bne.n	8008e8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f844 	bl	8008f5e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ed6:	e023      	b.n	8008f20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d009      	beq.n	8008ef8 <HAL_UART_IRQHandler+0x4f4>
 8008ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fad0 	bl	8009496 <UART_Transmit_IT>
    return;
 8008ef6:	e014      	b.n	8008f22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00e      	beq.n	8008f22 <HAL_UART_IRQHandler+0x51e>
 8008f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d008      	beq.n	8008f22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb0f 	bl	8009534 <UART_EndTransmit_IT>
    return;
 8008f16:	e004      	b.n	8008f22 <HAL_UART_IRQHandler+0x51e>
    return;
 8008f18:	bf00      	nop
 8008f1a:	e002      	b.n	8008f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f1c:	bf00      	nop
 8008f1e:	e000      	b.n	8008f22 <HAL_UART_IRQHandler+0x51e>
      return;
 8008f20:	bf00      	nop
  }
}
 8008f22:	37e8      	adds	r7, #232	@ 0xe8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr

08008f3a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b090      	sub	sp, #64	@ 0x40
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d137      	bne.n	8009000 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f92:	2200      	movs	r2, #0
 8008f94:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3314      	adds	r3, #20
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e5      	bne.n	8008f96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fea:	61fa      	str	r2, [r7, #28]
 8008fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	69b9      	ldr	r1, [r7, #24]
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ffe:	e002      	b.n	8009006 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009000:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009002:	f7f7 fbad 	bl	8000760 <HAL_UART_TxCpltCallback>
}
 8009006:	bf00      	nop
 8009008:	3740      	adds	r7, #64	@ 0x40
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f7ff ff83 	bl	8008f28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b09c      	sub	sp, #112	@ 0x70
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0320 	and.w	r3, r3, #32
 8009042:	2b00      	cmp	r3, #0
 8009044:	d172      	bne.n	800912c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009048:	2200      	movs	r2, #0
 800904a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800904c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800905c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800905e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009062:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	330c      	adds	r3, #12
 800906a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800906c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800906e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009072:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800907a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3314      	adds	r3, #20
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	667b      	str	r3, [r7, #100]	@ 0x64
 8009098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80090a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80090a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	623b      	str	r3, [r7, #32]
   return(result);
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80090cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3314      	adds	r3, #20
 80090d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80090d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e5      	bne.n	80090b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d119      	bne.n	800912c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330c      	adds	r3, #12
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009118:	61fa      	str	r2, [r7, #28]
 800911a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e5      	bne.n	80090f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800912c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800912e:	2200      	movs	r2, #0
 8009130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009136:	2b01      	cmp	r3, #1
 8009138:	d106      	bne.n	8009148 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800913a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800913c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800913e:	4619      	mov	r1, r3
 8009140:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009142:	f7ff ff0c 	bl	8008f5e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009146:	e002      	b.n	800914e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009148:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800914a:	f7f7 fb1f 	bl	800078c <HAL_UART_RxCpltCallback>
}
 800914e:	bf00      	nop
 8009150:	3770      	adds	r7, #112	@ 0x70
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	2b01      	cmp	r3, #1
 8009170:	d108      	bne.n	8009184 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	4619      	mov	r1, r3
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f7ff feee 	bl	8008f5e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009182:	e002      	b.n	800918a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7ff fed8 	bl	8008f3a <HAL_UART_RxHalfCpltCallback>
}
 800918a:	bf00      	nop
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bf14      	ite	ne
 80091b2:	2301      	movne	r3, #1
 80091b4:	2300      	moveq	r3, #0
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b21      	cmp	r3, #33	@ 0x21
 80091c4:	d108      	bne.n	80091d8 <UART_DMAError+0x46>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2200      	movs	r2, #0
 80091d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80091d2:	68b8      	ldr	r0, [r7, #8]
 80091d4:	f000 f8c2 	bl	800935c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf14      	ite	ne
 80091e6:	2301      	movne	r3, #1
 80091e8:	2300      	moveq	r3, #0
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b22      	cmp	r3, #34	@ 0x22
 80091f8:	d108      	bne.n	800920c <UART_DMAError+0x7a>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2200      	movs	r2, #0
 8009204:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009206:	68b8      	ldr	r0, [r7, #8]
 8009208:	f000 f8cf 	bl	80093aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009210:	f043 0210 	orr.w	r2, r3, #16
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009218:	68b8      	ldr	r0, [r7, #8]
 800921a:	f7ff fe97 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b098      	sub	sp, #96	@ 0x60
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4613      	mov	r3, r2
 8009234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	88fa      	ldrh	r2, [r7, #6]
 8009240:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2222      	movs	r2, #34	@ 0x22
 800924c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009254:	4a3e      	ldr	r2, [pc, #248]	@ (8009350 <UART_Start_Receive_DMA+0x128>)
 8009256:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	4a3d      	ldr	r2, [pc, #244]	@ (8009354 <UART_Start_Receive_DMA+0x12c>)
 800925e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009264:	4a3c      	ldr	r2, [pc, #240]	@ (8009358 <UART_Start_Receive_DMA+0x130>)
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926c:	2200      	movs	r2, #0
 800926e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	f7f9 fb0a 	bl	80028a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d019      	beq.n	80092de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	330c      	adds	r3, #12
 80092b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80092cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80092d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80092d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e5      	bne.n	80092aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3314      	adds	r3, #20
 80092e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f0:	f043 0301 	orr.w	r3, r3, #1
 80092f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3314      	adds	r3, #20
 80092fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e5      	bne.n	80092de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3314      	adds	r3, #20
 8009318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	617b      	str	r3, [r7, #20]
   return(result);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009328:	653b      	str	r3, [r7, #80]	@ 0x50
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009332:	627a      	str	r2, [r7, #36]	@ 0x24
 8009334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6a39      	ldr	r1, [r7, #32]
 8009338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e5      	bne.n	8009312 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3760      	adds	r7, #96	@ 0x60
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	0800902b 	.word	0x0800902b
 8009354:	08009157 	.word	0x08009157
 8009358:	08009193 	.word	0x08009193

0800935c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b089      	sub	sp, #36	@ 0x24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	330c      	adds	r3, #12
 800936a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	60bb      	str	r3, [r7, #8]
   return(result);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800937a:	61fb      	str	r3, [r7, #28]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	330c      	adds	r3, #12
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	61ba      	str	r2, [r7, #24]
 8009386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6979      	ldr	r1, [r7, #20]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	613b      	str	r3, [r7, #16]
   return(result);
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2220      	movs	r2, #32
 800939c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80093a0:	bf00      	nop
 80093a2:	3724      	adds	r7, #36	@ 0x24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr

080093aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b095      	sub	sp, #84	@ 0x54
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	330c      	adds	r3, #12
 80093b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	330c      	adds	r3, #12
 80093d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80093d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e5      	bne.n	80093b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3314      	adds	r3, #20
 80093ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3314      	adds	r3, #20
 8009404:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009408:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800940c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941e:	2b01      	cmp	r3, #1
 8009420:	d119      	bne.n	8009456 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	330c      	adds	r3, #12
 8009428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	60bb      	str	r3, [r7, #8]
   return(result);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f023 0310 	bic.w	r3, r3, #16
 8009438:	647b      	str	r3, [r7, #68]	@ 0x44
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	330c      	adds	r3, #12
 8009440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009442:	61ba      	str	r2, [r7, #24]
 8009444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	6979      	ldr	r1, [r7, #20]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	613b      	str	r3, [r7, #16]
   return(result);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e5      	bne.n	8009422 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009464:	bf00      	nop
 8009466:	3754      	adds	r7, #84	@ 0x54
 8009468:	46bd      	mov	sp, r7
 800946a:	bc80      	pop	{r7}
 800946c:	4770      	bx	lr

0800946e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f7ff fd5f 	bl	8008f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009496:	b480      	push	{r7}
 8009498:	b085      	sub	sp, #20
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b21      	cmp	r3, #33	@ 0x21
 80094a8:	d13e      	bne.n	8009528 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b2:	d114      	bne.n	80094de <UART_Transmit_IT+0x48>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d110      	bne.n	80094de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	1c9a      	adds	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]
 80094dc:	e008      	b.n	80094f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	1c59      	adds	r1, r3, #1
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6211      	str	r1, [r2, #32]
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4619      	mov	r1, r3
 80094fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10f      	bne.n	8009524 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	e000      	b.n	800952a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009528:	2302      	movs	r3, #2
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800954a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f7 f903 	bl	8000760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08c      	sub	sp, #48	@ 0x30
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b22      	cmp	r3, #34	@ 0x22
 8009576:	f040 80ae 	bne.w	80096d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009582:	d117      	bne.n	80095b4 <UART_Receive_IT+0x50>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d113      	bne.n	80095b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009594:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	1c9a      	adds	r2, r3, #2
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80095b2:	e026      	b.n	8009602 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c6:	d007      	beq.n	80095d8 <UART_Receive_IT+0x74>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <UART_Receive_IT+0x82>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d106      	bne.n	80095e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e008      	b.n	80095f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009606:	b29b      	uxth	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	b29b      	uxth	r3, r3
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4619      	mov	r1, r3
 8009610:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009612:	2b00      	cmp	r3, #0
 8009614:	d15d      	bne.n	80096d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0220 	bic.w	r2, r2, #32
 8009624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009658:	2b01      	cmp	r3, #1
 800965a:	d135      	bne.n	80096c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	613b      	str	r3, [r7, #16]
   return(result);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f023 0310 	bic.w	r3, r3, #16
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	330c      	adds	r3, #12
 8009680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009682:	623a      	str	r2, [r7, #32]
 8009684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69f9      	ldr	r1, [r7, #28]
 8009688:	6a3a      	ldr	r2, [r7, #32]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e5      	bne.n	8009662 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0310 	and.w	r3, r3, #16
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d10a      	bne.n	80096ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff fc4c 	bl	8008f5e <HAL_UARTEx_RxEventCallback>
 80096c6:	e002      	b.n	80096ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7f7 f85f 	bl	800078c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e002      	b.n	80096d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e000      	b.n	80096d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80096d6:	2302      	movs	r3, #2
  }
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3730      	adds	r7, #48	@ 0x30
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689a      	ldr	r2, [r3, #8]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	4313      	orrs	r3, r2
 800970e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800971a:	f023 030c 	bic.w	r3, r3, #12
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6812      	ldr	r2, [r2, #0]
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	430b      	orrs	r3, r1
 8009726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699a      	ldr	r2, [r3, #24]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a2c      	ldr	r2, [pc, #176]	@ (80097f4 <UART_SetConfig+0x114>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d103      	bne.n	8009750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009748:	f7fd fcce 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	e002      	b.n	8009756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fd fcb6 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 8009754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009a      	lsls	r2, r3, #2
 8009760:	441a      	add	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	4a22      	ldr	r2, [pc, #136]	@ (80097f8 <UART_SetConfig+0x118>)
 800976e:	fba2 2303 	umull	r2, r3, r2, r3
 8009772:	095b      	lsrs	r3, r3, #5
 8009774:	0119      	lsls	r1, r3, #4
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009a      	lsls	r2, r3, #2
 8009780:	441a      	add	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	fbb2 f2f3 	udiv	r2, r2, r3
 800978c:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <UART_SetConfig+0x118>)
 800978e:	fba3 0302 	umull	r0, r3, r3, r2
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	2064      	movs	r0, #100	@ 0x64
 8009796:	fb00 f303 	mul.w	r3, r0, r3
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	3332      	adds	r3, #50	@ 0x32
 80097a0:	4a15      	ldr	r2, [pc, #84]	@ (80097f8 <UART_SetConfig+0x118>)
 80097a2:	fba2 2303 	umull	r2, r3, r2, r3
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097ac:	4419      	add	r1, r3
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009a      	lsls	r2, r3, #2
 80097b8:	441a      	add	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80097c4:	4b0c      	ldr	r3, [pc, #48]	@ (80097f8 <UART_SetConfig+0x118>)
 80097c6:	fba3 0302 	umull	r0, r3, r3, r2
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	2064      	movs	r0, #100	@ 0x64
 80097ce:	fb00 f303 	mul.w	r3, r0, r3
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	3332      	adds	r3, #50	@ 0x32
 80097d8:	4a07      	ldr	r2, [pc, #28]	@ (80097f8 <UART_SetConfig+0x118>)
 80097da:	fba2 2303 	umull	r2, r3, r2, r3
 80097de:	095b      	lsrs	r3, r3, #5
 80097e0:	f003 020f 	and.w	r2, r3, #15
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	440a      	add	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80097ec:	bf00      	nop
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	40013800 	.word	0x40013800
 80097f8:	51eb851f 	.word	0x51eb851f

080097fc <memset>:
 80097fc:	4603      	mov	r3, r0
 80097fe:	4402      	add	r2, r0
 8009800:	4293      	cmp	r3, r2
 8009802:	d100      	bne.n	8009806 <memset+0xa>
 8009804:	4770      	bx	lr
 8009806:	f803 1b01 	strb.w	r1, [r3], #1
 800980a:	e7f9      	b.n	8009800 <memset+0x4>

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	2600      	movs	r6, #0
 8009810:	4d0c      	ldr	r5, [pc, #48]	@ (8009844 <__libc_init_array+0x38>)
 8009812:	4c0d      	ldr	r4, [pc, #52]	@ (8009848 <__libc_init_array+0x3c>)
 8009814:	1b64      	subs	r4, r4, r5
 8009816:	10a4      	asrs	r4, r4, #2
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	f000 f81a 	bl	8009854 <_init>
 8009820:	2600      	movs	r6, #0
 8009822:	4d0a      	ldr	r5, [pc, #40]	@ (800984c <__libc_init_array+0x40>)
 8009824:	4c0a      	ldr	r4, [pc, #40]	@ (8009850 <__libc_init_array+0x44>)
 8009826:	1b64      	subs	r4, r4, r5
 8009828:	10a4      	asrs	r4, r4, #2
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	080098ac 	.word	0x080098ac
 8009848:	080098ac 	.word	0x080098ac
 800984c:	080098ac 	.word	0x080098ac
 8009850:	080098b0 	.word	0x080098b0

08009854 <_init>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr

08009860 <_fini>:
 8009860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009862:	bf00      	nop
 8009864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009866:	bc08      	pop	{r3}
 8009868:	469e      	mov	lr, r3
 800986a:	4770      	bx	lr
